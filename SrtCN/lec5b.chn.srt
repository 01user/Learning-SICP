1
00:00:21,170 --> 00:00:36,630
现在，我们已经拥有了通过改变局部状态进行对象建模的力量，我想我们应该找点复杂的东西来演示一下这种力量是多么强大

2
00:00:40,430 --> 00:00:52,060
假设，我们处在这样一个物理系统中，系统中的事物驱动彼此，全部的这些事物组成了世界

3
00:00:52,060 --> 00:00:58,830
每一个事物都有其独立的局部状态

4
00:00:58,830 --> 00:01:01,280
这决定了它属于一个事物

5
00:01:01,280 --> 00:01:10,940
这个模型存在于我们的大脑里，当然它也可以存在于计算机中

6
00:01:10,940 --> 00:01:28,570
我要做的是，把真实世界中事物，相应地在计算机中建立对象，真实世界中事物的联系，相应地在计算机建立对象间的关系，对象与关系与现实世界的事物与联系一一对应

7
00:01:30,840 --> 00:01:34,740
这也就指引了我们如何去模块化

8
00:01:34,740 --> 00:01:50,450
如果我们真的把世界想象成这样，由许多小的事物组成，我们就可以一一对其建模，这样就把世界的模块性传递到了我们的程序这中

9
00:01:50,450 --> 00:01:55,420
这就是面向对象编程的原理所在

10
00:01:55,420 --> 00:01:58,890
我所见过的最完美的对象

11
00:01:58,890 --> 00:02:14,220
非常非常完美，那就是电气系统。电气系统真的是物理学家构造的非常非常好的一种对象

12
00:02:14,220 --> 00:02:16,760
这里我有一些机器零件

13
00:02:16,760 --> 00:02:20,040
确实是机器零件

14
00:02:20,040 --> 00:02:27,190
有一个电线连接起了零件的两个部分

15
00:02:27,190 --> 00:02:38,310
电气世界中有一个非常棒的特性，就是我可以说这是一个对象，这是一个对象，这两个对象连接起来，所有关系一目了然

16
00:02:38,310 --> 00:02:44,740
而且，如果我没有用电线连接，它们便没有关系

17
00:02:44,740 --> 00:02:51,370
比如我有一个灯泡，一个已经接在插座上的电源

18
00:02:51,370 --> 00:02:53,620
关系非常明了

19
00:02:53,620 --> 00:02:56,220
没有另外的关系表现形式

20
00:02:56,220 --> 00:03:04,040
就算我把电线打个结，灯仍然是亮着的

21
00:03:04,040 --> 00:03:05,290
没什么影响

22
00:03:08,300 --> 00:03:15,270
在物理上，这种连接可以被抽象出来，至少在低频状态下是可以的

23
00:03:17,840 --> 00:03:22,350
而且这就是全部的连接方式了

24
00:03:22,350 --> 00:03:30,951
当然，我们来进一步讨论一种在电气系统中最为广泛的抽象，数字电路

25
00:03:30,951 --> 00:03:34,610
这有一些对象元件

26
00:03:34,610 --> 00:03:41,092
例如，在数字电路里我们有像非门这样的东西

27
00:03:41,092 --> 00:03:43,990
还有与门

28
00:03:43,990 --> 00:03:47,210
或门

29
00:03:47,210 --> 00:03:55,610
我们用电线把它们连接起来，电线就是对01信号的抽象

30
00:03:55,610 --> 00:04:05,160
我们不关心具体的物理因素，像电压啊，电流啊，元件怎么组合啊 等等

31
00:04:05,160 --> 00:04:09,420
这些因素统一抽象为信号

32
00:04:09,420 --> 00:04:14,070
我们用电路连接元件，构建系统

33
00:04:14,070 --> 00:04:32,700
一会儿我要向你们介绍一种新的语言，像之前讲过的图形语言一样，都嵌入在LISP中，不是昨天那种模式匹配替换的语言

34
00:04:32,700 --> 00:04:38,160
模式匹配替换的语言还需要用LISP编写另外的程序来解释

35
00:04:38,160 --> 00:04:45,480
但是之前那种绘图语言我们可以随意使用，不管构造过程还是组合数据

36
00:04:45,480 --> 00:04:53,026
举例来说，首先我要有一些原子对象，比如这个，这个

37
00:04:53,026 --> 00:04:55,810
然后用电线去组合它们

38
00:04:55,810 --> 00:04:59,870
(make-wire)构造一个电线

39
00:04:59,870 --> 00:05:01,740
a就代表了一根电线

40
00:05:01,740 --> 00:05:02,690
b也是

41
00:05:02,690 --> 00:05:03,460
c也是

42
00:05:03,460 --> 00:05:04,230
d也是

43
00:05:04,230 --> 00:05:04,830
还有e

44
00:05:04,830 --> 00:05:06,880
还有s

45
00:05:06,880 --> 00:05:17,940
再来看元件，或门有两个输入a和b，一个输出d，就像这样

46
00:05:17,940 --> 00:05:24,820
与门，a和b两个输入，一个输出c

47
00:05:24,820 --> 00:05:32,750
就像这样来声明，我可以组合出任意的电路

48
00:05:32,750 --> 00:05:43,690
我已经说明了原子元素，组合方法，然后就轮到抽象方法了

49
00:05:43,690 --> 00:05:52,240
举例来说，这是一个半加器

50
00:05:52,240 --> 00:05:56,930
如果你学过电路设计肯定知道这个东西

51
00:05:56,930 --> 00:06:03,956
输入两个数a和b，输出“和”和进位

52
00:06:03,956 --> 00:06:07,450
事实上，完全可以用我刚刚说的来组合电路

53
00:06:07,450 --> 00:06:14,790
把半加器看成一个盒子，盒子的边界，抽象出的永远都是一个盒子

54
00:06:14,790 --> 00:06:19,700
从盒子里引出A B S C四根线

55
00:06:19,700 --> 00:06:28,270
这些是已经声明了的变量，我们就用它们来定义半加器

56
00:06:31,400 --> 00:06:48,790
为了连接半加器里面的线路，我构造了电线D和E，E是这个，D是这个，内部连接的线路并没有引出盒子之外，就像这样连起来

57
00:06:48,790 --> 00:06:53,890
你可以看的出来，这个语言非常有层次性

58
00:06:53,890 --> 00:07:06,300
如果一个语言没有层次性，如果你不能把一个复合对象当成原子对象来使用，这个语言肯定是有问题的 -- 至少我这样觉得

59
00:07:06,300 --> 00:07:23,350
之前我们都是从计算一些数字上的函数开始的，现在我们不那样做，我们从一些电路对象开始，构建更多的电路对象

60
00:07:23,350 --> 00:07:30,500
用LISP里的lambda将其粘合起来

61
00:07:30,500 --> 00:07:32,930
lambda是很有用的粘合剂

62
00:07:32,930 --> 00:08:05,900
当然，两个半加器可以组成结构更为复杂的全加器，就像这里这个，把线路连在一起，还需要另外的电线如S，C1和C2，还有一个或门。全加器输入两个数，一个进位值，输出“和”和一个进位值

63
00:08:05,900 --> 00:08:12,990
除此之外，还可以把全加器链起来组成更大的加法器

64
00:08:12,990 --> 00:08:22,270
现在我们的语言有了原子元素，组合方法和抽象方法，才算完整

65
00:08:22,270 --> 00:08:25,000
现在问题来了，如何实现这套语言？

66
00:08:25,000 --> 00:08:27,070
其实并不难

67
00:08:27,070 --> 00:08:28,610
首先来看原子元素

68
00:08:28,610 --> 00:08:31,160
实现原子元素也是整个问题的根本所在

69
00:08:31,160 --> 00:08:43,417
至于组合方法与抽象方法完全不用亲自实现，因为语言嵌入在LISP中可以直接使用LISP中的这种机制

70
00:08:43,417 --> 00:08:45,860
好的，我们先来看一个原子元素

71
00:08:45,860 --> 00:08:47,400
非门吧

72
00:08:51,540 --> 00:08:54,900
非门有两个引脚，一个输入，一个输出

73
00:08:57,440 --> 00:09:04,300
有信号输入的时候它要做点什么

74
00:09:04,300 --> 00:09:20,120
它和输入的电线说 -- 我们开始讨论一些关于对象的东西，细节之处以后再谈 -- 它需要对作为输入的电线的说 “当你的值变的时候，告诉我一声”

75
00:09:20,120 --> 00:09:26,870
所以非门可能会这样和这个输入对象交流， “Hi，我是George”

76
00:09:26,870 --> 00:09:31,720
“我的工作就是，当你变化的时候对结果做一点修改”

77
00:09:31,720 --> 00:09:34,730
“所以当你变化的时候，告诉我一声”

78
00:09:34,730 --> 00:09:37,010
“因为我需要这个去做点别的”

79
00:09:37,010 --> 00:09:56,130
我们在这里为in添加一个动作invert-in，它在这里定义，是一个无参数的过程，对线路上的信号取反

80
00:09:56,130 --> 00:10:07,140
在一段延时之后，就是inverter-delay -- 每个电路对象都有延时 -- 我们再把输出设置为新的值

81
00:10:10,160 --> 00:10:12,400
非常简单

82
00:10:12,400 --> 00:10:23,840
你可以这样理解，这个作为输出的电线很有灵性，当信号改变的时候，它就奔走相告

83
00:10:23,840 --> 00:10:26,050
“我的值已经改变啦”

84
00:10:26,050 --> 00:10:36,810
所以当你把非门和与门或者其它的什么连在一起的时候，其中会有很多类似“奔走相告”的过程，确保信号以正确的方式传递

85
00:10:36,810 --> 00:10:38,620
到了这里反而很平常

86
00:10:38,620 --> 00:10:46,240
logical-not只是把0，1换成1，0罢了

87
00:10:46,240 --> 00:10:49,780
与门就相对复杂一些

88
00:10:49,780 --> 00:10:56,950
与门有两个输入A1，A2，输出是output

89
00:10:56,950 --> 00:11:00,860
但是其结构和非门没有什么大的不同

90
00:11:00,860 --> 00:11:10,910
当输入信号改变的时候，就执行过程and-action

91
00:11:10,910 --> 00:11:15,900
它所做的只是根据信号逻辑与运算出输出信号而已

92
00:11:15,900 --> 00:11:25,470
在and-gate-delay的延时之后，更新输出信号值

93
00:11:25,470 --> 00:11:28,350
我完全是按愿望思考来完成的这一切

94
00:11:28,350 --> 00:11:32,020
你看，这里有一个赋值操作

95
00:11:32,020 --> 00:11:34,570
并不是set!

96
00:11:34,570 --> 00:11:46,340
之前我们模仿过CAR，CDR构建新过程，这里也是同理，按照惯例，它的具体实现留作最后的惊喜

97
00:11:46,340 --> 00:12:03,350
这个过程add-action!，提醒线路A1，当它改变的时候记得执行过程add-action-procedure，A2也是一样

98
00:12:06,310 --> 00:12:09,510
非常简单

99
00:12:09,510 --> 00:12:18,310
现在我们再来聊聊各个部分之间信息是如何传递的吧

100
00:12:18,310 --> 00:12:47,360
假设，有一个非常简单的电路，一个与门，输入a，b，输出端c又作为输入接在非门上，非门的输出是d

101
00:12:47,360 --> 00:12:49,860
一个对实际电路的抽象

102
00:12:49,860 --> 00:12:54,880
要不了几分钱就可以从Radio Shack买到这些元件

103
00:12:54,880 --> 00:13:01,530
那些元件的作用和画在这里的差不多，不同的是元件上面都标有很多小数字像“LS04”之类的

104
00:13:01,530 --> 00:13:09,010
现在来看其中的计算模型

105
00:13:09,010 --> 00:13:15,850
它联系起我们头脑里的现实和在计算机中虚拟的现实，这种联系到底是什么

106
00:13:15,850 --> 00:13:25,750
真实世界的对象或关系改变了，我就去改变“虚拟”世界中相对应的对象或关系

107
00:13:25,750 --> 00:13:28,560
这是我们的目标

108
00:13:28,560 --> 00:13:30,900
让我们来看看怎么做

109
00:13:30,900 --> 00:13:35,401
这一团东西代表信号A

110
00:13:35,401 --> 00:13:37,940
A，一个信号

111
00:13:37,940 --> 00:13:39,900
画的像一团云

112
00:13:39,900 --> 00:13:49,140
再画另一个信号，B

113
00:13:49,140 --> 00:14:00,320
这两个信号将要一起连入一个盒子，一个与门，一个动作过程

114
00:14:00,320 --> 00:14:02,040
这就是与门的动作过程

115
00:14:07,660 --> 00:14:30,195
它又联系起另一个信号C，后面的非门连接起来和前面差不多

116
00:14:32,860 --> 00:14:42,970
最后一个信号/电线，D

117
00:14:42,970 --> 00:14:45,770
整体布局就是这样

118
00:14:45,770 --> 00:14:51,500
现在必须来研究它们内部的实际机制了，它们的实际运行过程

119
00:14:51,500 --> 00:14:57,340
每一个电线都必须知道自己的信号是什么

120
00:14:57,340 --> 00:15:00,680
所以内部一定有些变量来表示信号

121
00:15:02,670 --> 00:15:05,840
a有一个变量，signal

122
00:15:05,840 --> 00:15:08,656
也不要忘了它所关联的环境

123
00:15:08,656 --> 00:15:11,800
剩下的每一个都和a一样

124
00:15:15,400 --> 00:15:16,880
这里也有一个signal变量

125
00:15:19,400 --> 00:15:24,170
可以猜出来，signal的值不是0就是1

126
00:15:28,000 --> 00:15:34,390
还需要一个列表，记录一些“联系人”，当信号实际改变的时候要去通知”他们“

127
00:15:36,660 --> 00:15:39,300
我们得通知这个与门

128
00:15:39,300 --> 00:15:44,500
这个列表我们叫它AP(Action Procedures，动作过程)

129
00:15:44,500 --> 00:15:50,500
假定它真的用列表实现，在这里，列表里第一个肯定是这个与门

130
00:15:50,500 --> 00:15:54,810
b和a一样

131
00:15:54,810 --> 00:15:59,020
也可能有一些其它“人”在时刻等待着A来叫“他们”

132
00:15:59,020 --> 00:16:03,630
所以这里可能有其它“人”，具体不知道是谁

133
00:16:03,630 --> 00:16:07,200
我画在这里

134
00:16:07,200 --> 00:16:13,070
在b内部的AP列表里，肯定也要有这个与门

135
00:16:13,070 --> 00:16:18,530
相类似的，这里这样来连接

136
00:16:18,530 --> 00:16:21,770
这是c要通知的“人”

137
00:16:21,770 --> 00:16:24,280
d也一样

138
00:16:24,280 --> 00:16:27,190
但是我不知道它要通知谁，因为“他们”没有在我的图中出现

139
00:16:27,190 --> 00:16:30,320
可能是和D连接起来的其它门吧

140
00:16:30,320 --> 00:16:52,790
假如与门被“人”通知了 -- 因为"其它人"信号值的变化 -- 与门就得回头去检测自己的输入电路的新值是多少，才能做“与”操作，生成新的输出信号

141
00:16:57,090 --> 00:17:06,400
这也即与门的输入，A1是这个a，A2就是b

142
00:17:08,930 --> 00:17:16,170
不只这样，还有点别的

143
00:17:16,170 --> 00:17:21,160
还有一个输出

144
00:17:25,800 --> 00:17:43,520
同样地，非门也有一个输入，它也不时地在关注着信号的变化，当有“人”来通知它“我已经改变了”

145
00:17:43,520 --> 00:17:46,900
它就反过来查询这个新的信号值

146
00:17:46,900 --> 00:17:55,860
取到值之后，然后计算输出，改变输出的信号值

147
00:18:00,600 --> 00:18:02,481
等等等等，就像是这样

148
00:18:02,481 --> 00:18:06,240
因此我也必须有这么多的连接

149
00:18:06,240 --> 00:18:10,260
现在我们回头观察一下，这个与门

150
00:18:10,260 --> 00:18:13,670
这张幻灯片

151
00:18:13,670 --> 00:18:16,040
这几个部分的内容

152
00:18:16,040 --> 00:18:21,030
对每个与门，都有A1，A2两个输入，一个输出output

153
00:18:21,030 --> 00:18:46,240
当and-gate运行的时候，A1 A2 output构成了其运行“环境”，它们有各自的信号值

154
00:18:46,240 --> 00:18:54,590
在这个环境下，我构建一个新的过程

155
00:18:54,590 --> 00:18:57,780
and-action-procedure

156
00:18:57,780 --> 00:19:01,620
过程定义了并没有实际运行

157
00:19:01,620 --> 00:19:07,620
当它运行的时候，根据环境模型

158
00:19:07,620 --> 00:19:11,700
找到它的局部环境

159
00:19:11,700 --> 00:19:17,310
and-action-procedure就取到了这里的A1 A2 output的值

160
00:19:17,310 --> 00:19:19,645
A1 A2 output

161
00:19:22,360 --> 00:19:26,030
我们还没有深入探索“电线”的内部结构

162
00:19:26,030 --> 00:19:29,030
我们来看看

163
00:19:29,030 --> 00:19:30,280
来看看“电线”

164
00:19:33,520 --> 00:19:36,160
非常棒的结构

165
00:19:39,500 --> 00:19:43,090
“电线”是有那么一点复杂

166
00:19:43,090 --> 00:19:46,840
哦，说错了

167
00:19:46,840 --> 00:19:49,780
是非常复杂

168
00:19:49,780 --> 00:19:54,720
但是还是来看一下，到底是什么

169
00:19:54,720 --> 00:19:57,760
“电线”是这上面画的云一样的东西

170
00:19:57,760 --> 00:20:05,010
有两个主要部分，都是它的状态

171
00:20:05,010 --> 00:20:07,390
其中一个是信号值

172
00:20:07,390 --> 00:20:19,270
换句话说，当我们执行make-wire，首先要做的是新建两个局部变量signal和action-procs

173
00:20:22,042 --> 00:20:27,840
在这个上下文中，我们定义了一系列的过程

174
00:20:27,840 --> 00:20:32,850
先看(set-my-signal! new)

175
00:20:32,850 --> 00:20:37,930
它所做的只是，取一个新值new

176
00:20:37,930 --> 00:20:40,360
如果new和signal一样，信号没有变化，就没必要做什么了

177
00:20:40,360 --> 00:20:54,630
否则，把signal的值赋值为new，再执行action-procs里的所有过程，即通知所有“相关的人”

178
00:20:54,630 --> 00:21:01,530
当作为and-gate的参数的时候，它就是我的“联系人”了，得去通知它

179
00:21:04,130 --> 00:21:07,410
添加“联系人”的这个过程在最下面

180
00:21:07,410 --> 00:21:27,780
然后，我还得定义一个接受动作过程的过程，就在这里，使用con把新的过程与原来的过程列表连接在一起，再赋值予action-pros，最后还要再运行一次这个过程proc

181
00:21:27,780 --> 00:21:36,950
这是一种事件驱动的模拟模型，我还不打算细讲，因为那还需要思考更多的内容

182
00:21:36,950 --> 00:21:53,820
最后定义一个过程dispatcher，用来解读传递给线路的信息，执行不同的操作，比如这里，当前的信号值是多少？

183
00:21:53,820 --> 00:21:57,180
设置新信号值的方法是什么？

184
00:21:57,180 --> 00:22:00,100
我想要这个方法

185
00:22:00,100 --> 00:22:02,600
我怎么样去添加另外的动作过程呢？

186
00:22:05,510 --> 00:22:09,940
最后，返回过程dispatch

187
00:22:09,940 --> 00:22:19,790
因此整个电线的被构建成了一个可接受不同信息的对象，比如 ‘add-action!来询问添加动作过程的方法是什么？

188
00:22:19,790 --> 00:22:29,010
因此实际上，它返回了一个过程，这个过程接收一个动作过程作为参数，将其实际添加入电线的action-procs的列表中

189
00:22:31,620 --> 00:22:32,820
这是一种权限

190
00:22:32,820 --> 00:22:37,450
给予你了一种去改变自身动作过程列表的权限

191
00:22:37,450 --> 00:22:41,710
再来看看这里

192
00:22:41,710 --> 00:22:43,278
下一张幻灯片

193
00:22:43,278 --> 00:22:44,528
噢

194
00:22:47,760 --> 00:22:49,120
没什么有意思的

195
00:22:49,120 --> 00:22:54,990
(call-each procedures)只是对列表中过程顺序地执行调用，没什么好说的

196
00:22:54,990 --> 00:22:57,560
我们早就知道了

197
00:22:57,560 --> 00:23:03,090
然而，如果我想知道线路上的信号值是多少，就得这样来询问wire

198
00:23:03,090 --> 00:23:05,860
wire只是一个dispatch过程而已

199
00:23:05,860 --> 00:23:06,830
只是一个过程

200
00:23:06,830 --> 00:23:12,590
这是是‘get-signal作为参数来执行这个过程

201
00:23:12,590 --> 00:23:16,900
实际得到的只是取得线路信号值的方法

202
00:23:16,900 --> 00:23:19,220
进一步的就可以得到信号值

203
00:23:19,220 --> 00:23:38,700
如果我想要对线路设置一个新的信号值，这里传递wire和new-value两个参数，(wire 'set-signal!)取得改变线路信号的权限，实际是一个过程，应用于new-value

204
00:23:38,700 --> 00:24:13,010
我们继续追溯这个过程，调用(wire 'set-signal)之后，我们返回这个过程，定义在线路里面，名为set-my-signal，我们回头看幻灯片，返回的过程有一个实际的调用，以new-value为参数，去改变线路内部signal变量的值，最后再去依次通知“联系人”

205
00:24:16,340 --> 00:24:19,400
非常简单

206
00:24:19,400 --> 00:24:30,100
再来看看幻灯片，还有最后一点，add-action!，我想你们很轻易地就理解了

207
00:24:30,100 --> 00:24:36,470
wire action-proc两个参数

208
00:24:36,470 --> 00:24:40,050
然后请求添加动作过程的权限

209
00:24:40,050 --> 00:24:45,020
得到权限去添加新的动作过程

210
00:24:45,020 --> 00:24:48,570
这就是整个“电线”对象

211
00:24:48,570 --> 00:24:52,460
还有些细节

212
00:24:52,460 --> 00:24:58,390
比如，我怎么来控制它？

213
00:24:58,390 --> 00:25:01,290
这些延时怎么实现？

214
00:25:01,290 --> 00:25:02,540
我们来快速过一遍

215
00:25:05,275 --> 00:25:08,360
下一张

216
00:25:08,360 --> 00:25:09,570
我们来看看

217
00:25:09,570 --> 00:25:18,770
我们细看与门或者或门定义，会发现里面还有“延时”这样的东西

218
00:25:18,770 --> 00:25:23,310
一段延时之后才开始执行过程，改变输出

219
00:25:26,040 --> 00:25:28,120
这个要如何实现？

220
00:25:28,120 --> 00:25:34,720
这里引入一种新技巧，非常复杂，我们得非常细心地来看

221
00:25:34,720 --> 00:25:37,390
在“delay”的延时之后，执行过程action

222
00:25:37,390 --> 00:25:40,590
"delay"是一个数字，"action“是一个过程

223
00:25:40,590 --> 00:25:49,510
这里有一个特殊的数据结构the-agenda，用于组织时间与动作过程

224
00:25:49,510 --> 00:25:50,880
一会儿再来细看它

225
00:25:50,880 --> 00:25:53,070
先把这里说完

226
00:25:53,070 --> 00:25:59,130
the-agenda记录下来一个动作过程未来执行的时间

227
00:25:59,130 --> 00:26:08,460
在current-time + delay段的时间之后，将会执行那个过程

228
00:26:08,460 --> 00:26:13,090
这个过程随着计算好的这个时刻，添加入the-agenda中

229
00:26:15,280 --> 00:26:18,660
要使这个”计时钟表“运行起来并不困难

230
00:26:18,660 --> 00:26:22,710
下面这个过程progagate，就是来做这件事的

231
00:26:22,710 --> 00:26:27,440
如果the-agenda是空的，就没有要做的

232
00:26:27,440 --> 00:26:34,200
否则，我们就取出the-agenda的第一个元素，它是一个没有参数的过程

233
00:26:34,200 --> 00:26:36,030
这里有两层括号

234
00:26:36,030 --> 00:26:39,190
里面的一层返回一个过程，外面的一层括号执行了这个过程

235
00:26:39,190 --> 00:26:42,200
就是之前存储入the-agenda的动作

236
00:26:42,200 --> 00:26:48,395
然后这个过程就可以从the-agenda删掉了，最后执行propagate，进行无限循环

237
00:26:48,395 --> 00:26:50,750
这就是整体的结构

238
00:26:53,380 --> 00:26:57,430
还有点其它的

239
00:26:57,430 --> 00:27:00,410
一会儿再来看the-agenda

240
00:27:00,410 --> 00:27:02,800
现在整体上来看

241
00:27:02,800 --> 00:27:07,410
说点题外话

242
00:27:07,410 --> 00:27:12,370
这个模拟器其实是非常简单，简单到你认为它根本没什么用

243
00:27:12,370 --> 00:27:18,680
事实上这样的模拟器曾用来操纵大型机

244
00:27:18,680 --> 00:27:22,360
那是一个真实的案例

245
00:27:22,360 --> 00:27:25,560
实际上这两个模拟器有点不同

246
00:27:25,560 --> 00:27:29,820
不同之处在于操纵大型机的模拟器有更多的原子结构

247
00:27:29,820 --> 00:27:33,200
不只是有非门，与门之类的

248
00:27:33,200 --> 00:27:45,170
还有边缘触发器，触发电路，锁存器，电平触发器，加法器等等之类的

249
00:27:45,170 --> 00:27:54,690
困难之处在于需要很多页的文档来描述这些原子结构

250
00:27:54,690 --> 00:27:56,740
同时它们还有很多的参数

251
00:27:56,740 --> 00:27:58,480
不是只有一个延时这么简单

252
00:27:58,480 --> 00:28:01,220
还有建立时间，维持时间之类的

253
00:28:01,220 --> 00:28:15,110
真实计算机的结构确实复杂，但是那么所谓模拟器的部分却和这里我们要讲的很相似

254
00:28:15,110 --> 00:28:19,270
回到正题，这些东西都很简单

255
00:28:19,270 --> 00:28:23,030
像这个，设置非门的延时时间，构建一个the-agenda

256
00:28:23,030 --> 00:28:26,470
这里我们可以用(make-wire)构建更多线路

257
00:28:26,470 --> 00:28:29,460
这里只有4个，input-1 input-2 sum carry

258
00:28:29,460 --> 00:28:37,810
过程probe在sum carry对象上放置了一种称为探测器的特殊对象

259
00:28:37,810 --> 00:28:46,120
探测器可以在被监测的对象信号改变的时候，输出一条消息

260
00:28:46,120 --> 00:28:47,970
这很容易实现

261
00:28:47,970 --> 00:28:59,400
这里，我们第一次执行(probe 'sum sum)，它打印出消息说，当前sum在时刻0的信号值是0

262
00:28:59,400 --> 00:29:05,556
carry与sum相同

263
00:29:05,556 --> 00:29:09,620
我们继续来构建更多结构

264
00:29:09,620 --> 00:29:18,420
比如这里构建一个半加器

265
00:29:18,420 --> 00:29:20,420
现在把input-1上的信号变为1

266
00:29:20,420 --> 00:29:21,880
然后开始模拟

267
00:29:21,880 --> 00:29:29,520
在时刻8的时候，sum的信号变为1

268
00:29:29,520 --> 00:29:31,150
然后没有然后了

269
00:29:31,150 --> 00:29:32,630
好像没什么意思

270
00:29:32,630 --> 00:29:34,150
我们继续

271
00:29:34,150 --> 00:29:36,590
把input-2也变为1

272
00:29:36,590 --> 00:29:45,040
如果再模拟，在时刻11，carry变为1，时刻16，sum变为0

273
00:29:45,040 --> 00:29:48,990
如果你想，你可以实现一个电子电路

274
00:29:48,990 --> 00:29:50,620
真的，确实可以

275
00:29:50,620 --> 00:29:51,535
把input-2变为1，整个过程看起来也没什么特别的

276
00:29:51,535 --> 00:29:54,580
但是却清楚地表明了这一些都是如何运作的

277
00:30:01,830 --> 00:30:12,952
现在我给你们呈现的是一种宏观的图景，如何去实现事件驱动的模拟

278
00:30:12,952 --> 00:30:21,225
你如何组织出有层次性的结构，构建抽象的盒子

279
00:30:21,225 --> 00:30:25,780
the-agenda忘记说了

280
00:30:25,780 --> 00:30:28,630
下一小节再说

281
00:30:28,630 --> 00:30:34,310
这将涉及到一些关于数据变化之类的事情

282
00:30:34,310 --> 00:30:35,860
在我继续之前，有什么问题吗？

283
00:30:47,160 --> 00:30:47,550
没有的话

284
00:30:47,550 --> 00:30:48,800
休息时间

285
00:31:28,940 --> 00:31:35,060
我们已经做了一个模拟器

286
00:31:35,060 --> 00:31:43,920
这种模拟是事件驱动的，计算机中的对象与现实中的对象一一对应

287
00:31:43,920 --> 00:32:04,420
现实世界中的时间相对的也由计算机中的时间代替，假如现实中这件事发生在那件事之后，在计算机中也应该是这样，同样的顺序

288
00:32:04,420 --> 00:32:08,220
那也是我们引入赋值的开始

289
00:32:08,220 --> 00:32:16,040
现在我要介绍一种方法来组织时间，用agenda和优先队列来实现

290
00:32:16,040 --> 00:32:21,230
这样做之前，先来了解点别的

291
00:32:28,330 --> 00:32:35,960
这里我们先写一些对于agenda的基础操作

292
00:32:35,960 --> 00:32:43,680
具体实现我就不细说了，非常简单而且你们手上也有

293
00:32:43,680 --> 00:32:44,380
有什么操作呢？

294
00:32:44,380 --> 00:32:54,130
make-agenda构造一个agenda

295
00:32:59,860 --> 00:33:12,625
current-time，取得当前的时间，是一个数字

296
00:33:16,990 --> 00:33:21,900
empty-agenda，判断agenda是否为空

297
00:33:30,200 --> 00:33:32,570
返回true或false

298
00:33:42,590 --> 00:33:44,720
也要向agenda添加对象

299
00:33:52,710 --> 00:33:56,910
现实上这里添加的对象是一个过程，一个动作过程

300
00:33:56,910 --> 00:34:04,810
一共3个参数，时间time，动作过程action，要添加入的agenda

301
00:34:07,850 --> 00:34:10,719
把action放入agenda合适的地方

302
00:34:10,719 --> 00:34:23,259
(FIRST-ITEM agenda)用于取出agenda中第一个item

303
00:34:26,085 --> 00:34:29,540
还可以把第一个item从中删除

304
00:34:29,540 --> 00:34:31,409
这些就是对agenda的全部基础操作

305
00:34:31,409 --> 00:34:33,020
杂乱不甚

306
00:34:42,530 --> 00:34:43,780
从agenda删除

307
00:34:45,530 --> 00:34:52,528
现在我们来看如何具体组织数据结构

308
00:34:52,528 --> 00:35:01,570
agenda应该是一个列表，一个可修改的列表

309
00:35:01,570 --> 00:35:11,070
因为我们要向其中添加，删除，所以列表必定是可被修改的

310
00:35:11,070 --> 00:35:13,820
它依时间来组织

311
00:35:13,820 --> 00:35:15,570
以某种顺序排序起来也是有益的

312
00:35:18,330 --> 00:35:23,420
但是也有可能同一时间会发生很多事，需要执行很多过程

313
00:35:23,420 --> 00:35:29,040
我们把将要发生的事，要执行的过程按时间顺序来组织

314
00:35:29,040 --> 00:35:32,780
所以agenda看起来就像是很多segment组成的列表

315
00:35:32,780 --> 00:35:39,620
我来画一下这个结构，好让人理解

316
00:35:39,620 --> 00:35:41,110
这是一个agenda

317
00:35:41,110 --> 00:35:42,870
以一个名字开始

318
00:35:47,630 --> 00:35:49,940
在画具体的表结构之前先画它

319
00:35:52,620 --> 00:35:53,980
作为一个头部

320
00:35:53,980 --> 00:35:55,840
这个头部的存在也是很必要的

321
00:35:55,840 --> 00:35:57,630
待会你就会知道

322
00:36:00,680 --> 00:36:03,750
再画一个segment

323
00:36:03,750 --> 00:36:05,620
这将是许多segment组成的列表

324
00:36:08,310 --> 00:36:33,320
假设现在有两个segment，这样连接在一起-- 连接使用CAR就可访问到 -- 每个segment都要有一个时间，代表动作过程要执行的时间，比如这个就是10

325
00:36:33,320 --> 00:36:42,240
这里还要有另一个数据结构，先不具体描述，代表在时刻10将要做的事

326
00:36:42,240 --> 00:36:43,330
一个队列

327
00:36:43,330 --> 00:36:45,130
一会儿再细说

328
00:36:45,130 --> 00:36:50,200
抽象来看，队列就是一系列在一个固定时间要做的事情的集合

329
00:36:50,200 --> 00:36:53,100
我可以向其中添加其它要做的事

330
00:36:53,100 --> 00:36:56,140
一个队列

331
00:36:56,140 --> 00:36:59,115
一个时刻，两者就是segment的主要元素

332
00:37:02,889 --> 00:37:06,035
这里还有一个segment

333
00:37:08,940 --> 00:37:13,410
假设其时刻是30

334
00:37:13,410 --> 00:37:23,210
类似的，这里也要有一个队列，记录这一时刻将发生的事

335
00:37:23,210 --> 00:37:27,090
现在我们来看看，对agenda的一系列操作

336
00:37:27,090 --> 00:37:33,030
假设我想在时刻10，想做新的事情

337
00:37:33,030 --> 00:37:34,700
这并不难

338
00:37:34,700 --> 00:37:39,730
我只需要沿着这下来，找到时刻是10的segment

339
00:37:39,730 --> 00:37:42,930
也可能这样的一个segment并不存在

340
00:37:42,930 --> 00:37:45,420
一会儿再谈这种情况

341
00:37:45,420 --> 00:37:56,290
如果我找到了这样一个segment，就把这件事放入队列中 -- 尽管要怎样加入队列并不明显

342
00:37:56,290 --> 00:38:01,430
但是那时我就得这样做

343
00:38:01,430 --> 00:38:05,140
现在，假设我想在时刻20做点什么

344
00:38:05,140 --> 00:38:08,680
然而并没有时刻是20的segment

345
00:38:08,680 --> 00:38:11,340
我不得不构造一个segment

346
00:38:11,340 --> 00:38:17,610
我想把这个segment放在10与30之间

347
00:38:17,610 --> 00:38:20,170
这着实要花点功夫

348
00:38:20,170 --> 00:38:21,525
先用CONS

349
00:38:24,260 --> 00:38:29,940
构建一个新的segment

350
00:38:33,600 --> 00:38:35,400
这里的连接必须要变

351
00:38:35,400 --> 00:38:37,540
就像这样

352
00:38:37,540 --> 00:38:56,657
把segment 10的CDR指向新的segment 20，新的segment 20的CDR指向segment 30

353
00:38:56,657 --> 00:39:06,290
这个segment的时刻为20，队列只有一件事要做

354
00:39:10,730 --> 00:39:20,770
如果我想在后面添加点什么，就更改这个CDR指向要添加的东西

355
00:39:20,770 --> 00:39:24,040
必须对数据结构进行修改

356
00:39:24,040 --> 00:39:27,210
因此我需要新的基础操作

357
00:39:27,210 --> 00:39:29,550
因为原有的基础操作达不到这一点

358
00:39:29,550 --> 00:39:49,400
如果我想在时刻5做点什么事，按时间顺序来看，就得改变这里的CDR，这也就是我留了一个“头”的原因，可以方便的进行在队列头插入的操作

359
00:39:49,400 --> 00:39:53,420
如果我想做些改变

360
00:39:53,420 --> 00:39:58,600
就必须找准哪些地方需要修改

361
00:39:58,600 --> 00:40:02,540
从agenda中删除东西并不困难

362
00:40:02,540 --> 00:40:11,220
删除操作非常简单，我只讲一种情况，先找到第一个segment

363
00:40:11,220 --> 00:40:14,510
判断队列是否为空

364
00:40:14,510 --> 00:40:20,100
如果队列不是空的，就把要移除的事情从队列中删掉

365
00:40:20,100 --> 00:40:24,220
如果这时队列变为空的，就还要继续把segment删掉

366
00:40:24,220 --> 00:40:28,220
这里，把“头”的CDR指向这里

367
00:40:28,220 --> 00:40:36,440
这个数据结构操作起来很复杂，很无趣

368
00:40:36,440 --> 00:40:38,920
现在我们来聊聊队列

369
00:40:38,920 --> 00:40:41,160
它们很相似

370
00:40:41,160 --> 00:40:44,340
每一个segment都有一个队列

371
00:40:44,340 --> 00:40:45,590
队列是什么？

372
00:40:49,079 --> 00:40:52,350
一个队列有这些基础操作

373
00:40:52,350 --> 00:41:02,170
MAKE-QUEUE 构建一个新队列

374
00:41:07,274 --> 00:41:16,850
INSERT-QUEUE！ 向队列中插入新元素

375
00:41:24,510 --> 00:41:28,740
DELETE-QUEUE！ 从队列中删除元素

376
00:41:39,988 --> 00:41:52,890
FRONT-QUEUE 查看队列中第一个元素

377
00:41:52,890 --> 00:41:55,140
还需要检测队列是否为空

378
00:42:07,110 --> 00:42:15,120
如果你以后要发明些类似的基础操作，我希望你要注意下命名约定

379
00:42:15,120 --> 00:42:19,870
有改动的操作加上！，判断的谓词用？

380
00:42:19,870 --> 00:42:24,335
看起来，和这边的好像差不多

381
00:42:24,335 --> 00:42:29,240
嗯，这里也需要一个是否为空的检测

382
00:42:29,240 --> 00:42:31,720
好的，我要如何构建一个队列呢？

383
00:42:31,720 --> 00:42:37,840
队列是一个后进先出的结构

384
00:42:37,840 --> 00:42:41,230
从队列头删除元素，向队列尾添加元素

385
00:42:41,230 --> 00:42:43,740
我可以用一种很简单的结构来实现

386
00:42:43,740 --> 00:42:47,080
先有一个序对

387
00:42:47,080 --> 00:42:49,910
整个队列的开始

388
00:42:49,910 --> 00:42:59,610
这是一个队列“头”，包含一个头指针和一个尾指针

389
00:43:02,930 --> 00:43:09,000
假如队列一共两个元素

390
00:43:09,000 --> 00:43:12,095
第一个，值假定是1

391
00:43:12,095 --> 00:43:16,530
第二个假定是2吧

392
00:43:21,160 --> 00:43:31,850
需要两个指针的原因在于，向尾部添加元素的时候，就不用一直CDR找到结尾这样费力

393
00:43:31,850 --> 00:43:47,530
例如，我想要向队列添加入一个新元素，只需要先用CONS构建一个序对，假如值是3

394
00:43:47,530 --> 00:43:51,340
再添加到队列里

395
00:43:51,340 --> 00:44:00,100
这里就需要把item 2的CDR指向item 3

396
00:44:00,100 --> 00:44:04,320
尾指针也指到最后

397
00:44:09,120 --> 00:44:18,890
如果我想查看第一个元素，由头指针就可以轻易找到

398
00:44:18,890 --> 00:44:27,450
如果想删除元素，只需要把头指针向后移到就行

399
00:44:27,450 --> 00:44:31,700
新的头指针指向这里

400
00:44:31,700 --> 00:44:34,390
所以队列比较简单

401
00:44:34,390 --> 00:44:41,350
我们需要一些另外的基础操作来支持这种修改操作

402
00:44:41,350 --> 00:44:42,560
我先列出它们的名字

403
00:44:42,560 --> 00:44:47,350
然后我们再来看它们是如何使用的

404
00:44:47,350 --> 00:44:58,940
SET-CAR！ 改变一个序对的CAR为一个新值

405
00:45:02,370 --> 00:45:09,920
SET-CDR！和它类似

406
00:45:12,680 --> 00:45:16,030
现在来看看它们到底做了什么

407
00:45:16,030 --> 00:45:20,960
我用SET-CAR！修改头指针的指向，删除第一个元素

408
00:45:20,960 --> 00:45:23,470
这是CAR，我把它SET为另的值

409
00:45:23,470 --> 00:45:30,160
同理SET-CDR！修改尾指针的指向来添加元素

410
00:45:30,160 --> 00:45:35,515
全部的修改工作都是由SET-CAR！ SET-CDR！完成的

411
00:45:38,230 --> 00:45:38,430
非常完美

412
00:45:38,430 --> 00:45:40,357
先讲到这里，大家休息一下

413
00:46:38,346 --> 00:47:21,850
当我们讲到CONS的时候，我们提到了CONS的原则，(car (cons x y)) => x，(cdr (cons x y )) => y

414
00:47:21,850 --> 00:47:29,740
这个描述的有点抽象，CONS是由它组成的部分所组成的

415
00:47:29,740 --> 00:47:37,390
要是这样来看，如果两个CONS，它们两个的组成部分是相同的，从原则来看，这两个CONS就应该相同

416
00:47:37,390 --> 00:47:49,830
但是引入了赋值以后，数据变成了变量，值可以通过赋值来改变，比如用SET-CAR！ SET-CDR！，这样来看，这些原则好像没有把CONS描述清楚

417
00:47:49,830 --> 00:47:53,250
但是这里写的也是对的

418
00:47:53,250 --> 00:47:56,070
只不过描述的不再完整

419
00:47:56,070 --> 00:48:10,090
如果我用SET-CAR！ SET-CDR！改变两个CONS，使它们的CAR和CDR都相同，这两个CONS是否是完全相同的？

420
00:48:10,090 --> 00:48:21,570
假如我用CONS构建两个有理数，两个3/4

421
00:48:21,570 --> 00:48:25,340
这两个一样吗？还是不一样？

422
00:48:25,340 --> 00:48:27,860
当然，对于数字来说，这并不重要

423
00:48:27,860 --> 00:48:33,020
因为这两个有理数表示的大小是一样的，都是3/4

424
00:48:33,020 --> 00:48:36,840
你可以改变一个有理数的分母来使它们变的不一样

425
00:48:36,840 --> 00:48:44,770
但是这看来很怪异，强制的改变分母使其两个有理数有区别，这也和数学上认知不符合

426
00:48:44,770 --> 00:48:53,690
但是，如果CONS表示的是现实世界中的物体，修改CAR就像剪掉你的指甲一样，是切实存在的

427
00:48:53,690 --> 00:48:57,770
所以，每一个CONS都是不同的，它们有自己的身份

428
00:48:57,770 --> 00:49:01,280
我来先说明“身份”是什么意思

429
00:49:01,280 --> 00:49:04,320
来看些例子

430
00:49:04,320 --> 00:49:15,200
假如(define a (cons 1 2))

431
00:49:18,040 --> 00:49:38,120
这是什么意思呢？在环境中的某处有一个符号a，它代表了一个序对，CAR指向1，CDR指向2

432
00:49:38,120 --> 00:50:03,970
假设再定义一个b，(define b (cons a a))

433
00:50:03,970 --> 00:50:07,840
这里用了两次a

434
00:50:07,840 --> 00:50:11,300
现在就要考虑序对的身份问题了

435
00:50:11,300 --> 00:50:13,690
这两个a是一样的，是同一个东西

436
00:50:13,690 --> 00:50:33,260
所以b是这样的一个序对，CAR与CDR都指向a，对于a来说，有三个别名都代表着它

437
00:50:33,260 --> 00:50:34,790
a是一个

438
00:50:34,790 --> 00:50:37,230
(car b)是一个

439
00:50:37,230 --> 00:50:39,360
(cdr b)也是一个

440
00:50:39,360 --> 00:50:41,150
都是这个序对的别名

441
00:50:44,230 --> 00:51:07,880
假设现在执行 (SET-CAR! (CAR B) 3)

442
00:51:12,750 --> 00:51:17,830
找到b的CAR

443
00:51:17,830 --> 00:51:20,935
把它的CAR设置为3

444
00:51:24,760 --> 00:51:35,340
这样我也就修改了a，现在调用(CAR A)来看一下结果

445
00:51:35,340 --> 00:51:45,290
结果是3，尽管上面定义a是(cons 1 2)

446
00:51:45,290 --> 00:51:48,400
我通过改变b而改变了a

447
00:51:48,400 --> 00:51:52,010
它们共享着一处数据

448
00:51:52,010 --> 00:51:54,240
有时候我们需要这样的结构

449
00:51:54,240 --> 00:52:04,350
我们之前的队列，就是这样来组织的

450
00:52:04,350 --> 00:52:25,190
但是对象之间不合理的共享与操作，是很多复杂系统中bug的来源。所以我们虽然使对象具有身份，可以用很多别名来共享，得到了不少的好处

451
00:52:25,190 --> 00:52:28,640
但是同时也为此引出的bug而付出代价

452
00:52:32,190 --> 00:52:46,560
还看这里的这个例子，(CADR B)，看起来和(CAR B)没有一点关系

453
00:52:46,560 --> 00:52:49,350
但是它的值是什么？

454
00:52:49,350 --> 00:52:53,560
来找一下

455
00:52:53,560 --> 00:52:56,480
哦，还是3

456
00:52:56,480 --> 00:53:01,120
有了共享这样的机制，局部的含义也不是那么清楚了

457
00:53:01,120 --> 00:53:02,480
所以我们要非常小心的操作

458
00:53:06,640 --> 00:53:22,820
目前为止，我已经介绍了SET！ SET-CAR！ SET-CDR！这些赋值操作，或许我应该不用SET-CAR！ SET-CDR！，它们引入太多问题了

459
00:53:22,820 --> 00:53:27,170
不幸的是，一旦你让骆驼的鼻子进了帐篷，相当于你把它放进了帐篷

460
00:53:30,160 --> 00:53:35,850
我想说的是，只要有set！，这一切不幸的都可能会发生

461
00:53:38,550 --> 00:53:40,690
我们来分析一下

462
00:53:40,690 --> 00:53:52,480
前些日子讲到复合数据的时候，哈罗德教授向你们展示了用消息接收的方式来定义CONS

463
00:53:52,480 --> 00:54:04,440
现在我要用一种更为恐怖的方式来定义CONS

464
00:54:04,440 --> 00:54:14,580
过去的那个CONS是怎么定义的来着？一个lambda表达式，一个过程？

465
00:54:17,190 --> 00:54:28,580
我们这里对CONS的修改是要达到这样的效果，用SET！来代替SET-CAR！ SET-CDR！

466
00:54:28,580 --> 00:54:46,320
这里我定义CONS为一个接受一个参数M的过程，M作用于X与Y

467
00:54:51,120 --> 00:54:57,870
这是阿隆佐·丘奇发明的方法，他是20世纪最伟大的程序员之一，尽管当时电脑还没有被发明

468
00:54:57,870 --> 00:54:59,130
那时20世纪30年代的事了

469
00:54:59,130 --> 00:55:02,220
他是一个逻辑学家，当时应该是在普林斯顿

470
00:55:08,660 --> 00:55:46,670
(DEFINE (CAR X) (X (lambda(A D) A)))
(DEFINE (CDR X) (X (lambda(A D) D)))

471
00:55:46,670 --> 00:55:50,510
这就是CONS CAR CDR

472
00:55:50,510 --> 00:55:55,210
我来举例看一下，它是否符合之前所说的CONS的原则

473
00:55:55,210 --> 00:55:58,290
简单来看

474
00:55:58,290 --> 00:56:09,695
(CAR (CONS 35 47))

475
00:56:09,695 --> 00:56:11,120
这是什么呢？

476
00:56:11,120 --> 00:56:19,710
用代换模型，把CONS换成这边定义的

477
00:56:19,710 --> 00:56:20,690
非常容易

478
00:56:20,690 --> 00:56:35,750
就是(CAR (lambda (M) (M 35 47)))

479
00:56:35,750 --> 00:56:42,830
再来代换CAR

480
00:56:42,830 --> 00:57:15,840
((lambda (M) (M 35 47)) (lambda (A D) A))

481
00:57:15,840 --> 00:57:26,026
继续代换，((lambda (A D) A) 35 47)

482
00:57:26,026 --> 00:57:27,560
结果就是35

483
00:57:27,560 --> 00:57:40,720
35对应A，47对应的是D。在这种定义里，我什么数据都不需要，甚至连数字都没有

484
00:57:40,720 --> 00:57:42,640
太佩服丘奇了

485
00:57:52,420 --> 00:57:56,760
现在呢我们来对这个定义做点修改

486
00:57:56,760 --> 00:57:58,860
作为逻辑学家，他可能会不太开心

487
00:57:58,860 --> 00:58:03,260
但是作为程序员，应该没什么

488
00:58:03,260 --> 00:58:05,390
我们来看看

489
00:58:05,390 --> 00:58:09,570
修改CONS的定义

490
00:58:09,570 --> 00:58:14,520
和丘奇的定义很相似，但是不完全相同

491
00:58:14,520 --> 00:58:16,070
具体到底是什么？

492
00:58:16,070 --> 00:58:40,940
CONS定义为一个过程，这个过程需要一个参数M，但是M作用于4个参数，X，Y 和两个lambda过程

493
00:58:40,940 --> 00:59:03,365
所以这里的不同之处在于，M除了应用于x y之外，还应用于两个过程，分别用于修改x与y的值

494
00:59:06,540 --> 00:59:11,690
类似之前，CAR看起来也很相似

495
00:59:11,690 --> 00:59:22,550
(CAR X)也就只是从4个参数里挑出第一个而已

496
00:59:22,550 --> 00:59:37,920
和之前一样，返回的将会是这个过程中的x

497
00:59:41,940 --> 00:59:45,640
这个过程的整体就是CONS

498
00:59:45,640 --> 00:59:47,730
接着，最为精彩的一段

499
00:59:47,730 --> 00:59:48,960
CDR，和CAR一样的

500
00:59:48,960 --> 00:59:55,800
SET-CAR！ SET-CDR！的实现着实让人眼前一亮，其实它们也并不复杂

501
00:59:55,800 --> 01:00:26,150
(SET-CAR! X Y)无非就是用一个取到4个参数中第3个参数的过程，去代换实际定义的CONS，取得修改其中X的权限，把其修改为新的值Y

502
01:00:31,650 --> 01:00:33,540
SET-CDR！和它是类似的

503
01:00:36,120 --> 01:00:40,470
你也看到了，这里并没有引入新的其它基础操作

504
01:00:40,470 --> 01:00:45,340
具体要不要这样来实现是一个工程性问题

505
01:00:45,340 --> 01:00:51,680
实际上出于一些原因，工程上并不这样来实现

506
01:00:51,680 --> 01:00:58,765
原理上逻辑上就是这样，一旦引入了赋值，便可以修改任意的东西

507
01:01:05,420 --> 01:01:06,670
有什么问题吗？

508
01:01:09,200 --> 01:01:12,040
好的，David

509
01:01:12,040 --> 01:01:15,740
我可以跟的上你的思路，直到

510
01:01:15,740 --> 01:01:24,210
直到那个lambda (n)那里，我不知道这个参数是什么时候传进来的

511
01:01:24,210 --> 01:01:25,100
哦，抱歉

512
01:01:25,100 --> 01:01:26,340
我没讲清楚

513
01:01:26,340 --> 01:01:27,360
我们来仔细看看

514
01:01:27,360 --> 01:01:29,180
当然，我们也可以在黑板上演示

515
01:01:29,180 --> 01:01:30,170
并不难懂

516
01:01:30,170 --> 01:01:32,450
非常简单

517
01:01:32,450 --> 01:01:38,520
来看(set-cdr! x y)

518
01:01:38,520 --> 01:01:46,890
x是一个CONS

519
01:01:46,890 --> 01:01:58,110
x可以代换为这一部分，一个lambda表达式

520
01:01:58,110 --> 01:01:59,380
对吧

521
01:01:59,380 --> 01:02:08,950
这个lambda，是在定义CONS的环境下执行的

522
01:02:11,750 --> 01:02:29,250
这意味着，x y都是自由变量，x y所在的frame在这个lambda的上层，因此在这个过程中可以访问到x和y

523
01:02:29,250 --> 01:02:31,910
也可以对它们赋值

524
01:02:31,910 --> 01:02:37,010
这里赋值为n，是一个传过来的参数

525
01:02:37,010 --> 01:02:47,940
这个可以进行修改的过程是M的参数，而M又是CONS对象的参数

526
01:02:47,940 --> 01:02:57,480
现在再来看看SET-CDR！，第一个参数是一个CONS对象

527
01:03:00,260 --> 01:03:07,920
这是一个有4个参数的过程，作为实参，对应这里的形参M

528
01:03:07,920 --> 01:03:12,970
这边的这个sd，就对应于这个过程

529
01:03:15,470 --> 01:03:19,930
当我执行sd，应用于Y

530
01:03:22,910 --> 01:03:25,740
y是这里传过来的参数

531
01:03:25,740 --> 01:03:34,160
David：那-- 教授：对应起来，这里的y就对应于这里的n

532
01:03:34,160 --> 01:03:34,810
明白了吧

533
01:03:34,810 --> 01:03:35,750
了解了

534
01:03:35,750 --> 01:03:41,970
当你执行SET-CDR！的时候，x是CDR要变成的值

535
01:03:41,970 --> 01:03:44,742
这里的x

536
01:03:44,742 --> 01:03:46,200
并不全对

537
01:03:46,200 --> 01:03:56,150
SET-CAR！有两个参数，这个x是我们要改变的CONS对象

538
01:03:56,150 --> 01:03:58,320
你可以代换回去看看，就很清楚了

539
01:04:01,750 --> 01:04:03,000
还有什么问题吗？

540
01:04:07,880 --> 01:04:08,640
好的

541
01:04:08,640 --> 01:04:09,890
这节课就到这里

