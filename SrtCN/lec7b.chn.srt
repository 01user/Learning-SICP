1
00:00:00,994 --> 00:00:16,401
[MUSIC PLAYING]

2
00:00:16,401 --> 00:00:19,520
现在，我们想想上一节课讲过的东西

3
00:00:19,520 --> 00:00:23,050
感觉上它非常有趣，它有什么实际的用途吗？

4
00:00:26,330 --> 00:00:29,380
我想答案肯定是“是的”

5
00:00:29,380 --> 00:00:35,180
元循环求值器是非常有价值非常值得琢磨的

6
00:00:38,050 --> 00:00:52,570
我曾花费一年的时间研究元循环求值器，并据此设计出不同的元循环求值器

7
00:00:52,570 --> 00:01:01,270
元循环以它们自身来定义自身，因为元循环所求值的语言包含有元循环本身[此句不确定，可能大概意思是 元循环所解释的语言正是编写此元循环的语言]

8
00:01:01,270 --> 00:01:06,800
这样的求值器是一种探索语言的良好媒介

9
00:01:06,800 --> 00:01:15,490
如果你想添加一个新的feature，小菜一碟，只需稍做修改运行看结果就行

10
00:01:15,490 --> 00:01:21,090
你可能试了一会儿，觉得不行，放弃了这个feature

11
00:01:21,090 --> 00:01:33,720
你可能想试试修改一下绑定策略或者更复杂一些的东西，然后看看语言会发生什么

12
00:01:33,720 --> 00:01:49,690
事实上，对于讨论与交换语言设计，元循环求值器是一个良好的媒介，它们非常容易理解，简洁简单

13
00:01:49,690 --> 00:02:05,450
假如我想和在印度的Dan Friedman讨论语言设计上的想法，我只需写一个元循环求值器邮件给他

14
00:02:05,450 --> 00:02:11,940
他在他的机器上运行看看效果，可能他会觉得这个设计并不好

15
00:02:11,940 --> 00:02:16,880
然后他修改一番，然后再邮件给我，为什么不试试这个，会更好一些

16
00:02:16,880 --> 00:02:20,160
所以我将会讲一些这方面的技术

17
00:02:20,160 --> 00:02:30,790
因为，针对特定目的来设计新语言，它真的是一种必需的技术，而且还很容易 

18
00:02:30,790 --> 00:02:34,210
我们试着先在Lisp中添加一个非常简单的feature

19
00:02:40,640 --> 00:02:44,370
在这之前，我先来谈谈feature吧

20
00:02:49,560 --> 00:02:56,620
有太多的语言因为添加了过多的feature而把语言弄的混乱不堪

21
00:02:56,620 --> 00:03:02,520
计算机科学家也有一个笑话说 bug总可以变成feature的事

22
00:03:05,030 --> 00:03:12,820
我认为很多系统都在经受着蠕变特性的折磨

23
00:03:12,820 --> 00:03:20,170
比方说George有一个很喜欢的feature，并且加入了系统

24
00:03:20,170 --> 00:03:26,640
Harry也想着，我也不喜欢这个系统，然后加入了自己最喜欢的特性

25
00:03:26,640 --> 00:03:30,710
Jim也这样做

26
00:03:30,710 --> 00:03:37,790
要不了多长时间，系统的操作手册一定是没人能看懂的500多页的庞然大物

27
00:03:37,790 --> 00:03:44,830
有时候也可能只是一个人在添加feature并且导致同样糟糕的结果

28
00:03:44,830 --> 00:03:55,730
很多情况下，比如编辑器，就会有很多feature，因为你想要很多的功能并且很多功能都有些随意性

29
00:03:55,730 --> 00:04:01,690
但是回到编程语言上来，我认为有太多的feature是一个灾难

30
00:04:04,110 --> 00:04:21,010
还有另一种情况你之为feeping creaturism，假如这儿有一个盒子，它有一个华丽的显示器，还从中引出一个鼠标，这个盒子内部可能还有些复杂

31
00:04:21,010 --> 00:04:30,080
你的编程语言可能会因为Windows内存交换，磁盘颤动等一系列问题而不能正常工作

32
00:04:30,080 --> 00:04:37,440
每当你使用计算机的时候，就会唤醒鼠标进程，它会询问是否需要做什么事情然后就回去沉睡

33
00:04:37,440 --> 00:04:42,940
可能你突然不小心地胳膊肘碰到了鼠标，你的计算机突然就冒起浓烟或者更糟糕的情况 [= =]

34
00:04:42,940 --> 00:04:47,500
这就是由于添加feature而导致系统不能用的两种典型情况

35
00:04:47,500 --> 00:04:49,730
现在我们要添加的是一个非常简单的feature

36
00:04:52,300 --> 00:04:57,250
这是一个好的feature，事实上，Lisp中就有这个feature

37
00:04:57,250 --> 00:05:05,430
我们都知道，像+ *这样的过程可以接受不定数目的参数

38
00:05:05,430 --> 00:05:17,540
就比如 (+ (* a x x) (* b x) c)

39
00:05:17,540 --> 00:05:30,000
你可以看到，+有两到三个参数，*也有两到三个参数，不管多少个参数都同样可以计算

40
00:05:30,000 --> 00:05:34,960
可以接受不定数目的参数，这一点非常有用

41
00:05:34,960 --> 00:05:47,850
而之前我所讲的Lisp求值器只能接受固定数目的参数，因为我用pair-up将形参与实参一一对应

42
00:05:50,810 --> 00:05:58,590
假如我想定义像这样的不定参数数目的过程

43
00:05:58,590 --> 00:06:01,150
我们分步来考虑

44
00:06:01,150 --> 00:06:15,480
第一步，我得先有相应的语法描述，就是一种表示附加参数的表示法，而且附加参数的个数是不定的

45
00:06:15,480 --> 00:06:26,980
下一步，我们之前也提到过，即，我们怎样使用新的语法得到正确的结果呢？

46
00:06:26,980 --> 00:06:30,480
我们先来看一个相关的例子

47
00:06:33,070 --> 00:06:49,090
我想要定义一个过程，有一个必需的参数x和剩下的一串不定数目的参数y

48
00:06:49,090 --> 00:07:05,990
x是必需的，还有剩下的很多参数用y表示，y是剩下参数的列表

49
00:07:14,480 --> 00:07:36,890
这个过程里，我可以这样写 (map (lambda(u) (* x u)) y)

50
00:07:36,890 --> 00:07:46,300
我用一个“点号”来表明y代表了剩下的所有参数

51
00:07:46,300 --> 00:07:47,745
这样，我就对问题做出了语法描述

52
00:07:53,320 --> 00:08:08,631
为什么这样来写呢？因为这恰好是Lisp reader[应该是指REPL的输出]用来表示cons的一种语法

53
00:08:08,631 --> 00:08:11,080
之前没有介绍过

54
00:08:11,080 --> 00:08:26,980
你可能也自己尝试过，当你用cons连接两个东西，返回的结果是 ( 第一个 . 第二个)

55
00:08:26,980 --> 00:08:41,870
举例来说吧，x . y 对应着这样一个序对，CAR是x CDR是y

56
00:08:41,870 --> 00:09:18,280
目前为止你们所见到的过程参数都像是这样的，比如x y z，画出列表来就像是这样，x y z '()

57
00:09:18,280 --> 00:09:46,380
如果我想要一个列表与之匹配的话，假设列表(1 2 3)，用来和(x y z)相匹配

58
00:09:48,990 --> 00:09:54,220
用(x y z)来对应(1 2 3)

59
00:09:54,220 --> 00:10:05,480
很明显的，我们先把列表的第一个元素相对应，即x对应1，然后再开始对应列表剩下的部分

60
00:10:05,480 --> 00:10:18,510
假设我来匹配(x . y)，还是用(1 2 3)

61
00:10:18,510 --> 00:10:20,000
我们再来看

62
00:10:28,000 --> 00:10:43,740
1 2 3,我遍历过来，哦对的，x对应1，y对应剩下的列表，也就是(2 3)

63
00:10:43,740 --> 00:10:50,160
所以这里选用的表示法对于Lisp来说是非常自然的

64
00:10:52,660 --> 00:10:56,040
如果我就选择 x . y 来表示不定参数

65
00:10:58,290 --> 00:11:00,770
还有一种可能性

66
00:11:00,770 --> 00:11:25,140
我不想要一个必需的参数，或者两个或者更多，我想要所有的参数都是不必需的全部作为一个列表，这样的话所有的实际参数组成的列表就是x

67
00:11:25,140 --> 00:11:45,850
举例来看，我定义一个过程，接受参数并返回参数的列表，这个匿名过程就是过程list啊

68
00:11:45,850 --> 00:11:46,840
怎么来看待这一点呢？

69
00:11:46,840 --> 00:11:55,140
不管怎么说，这里应该是一个形参列表，来匹配实际参数的列表

70
00:11:55,140 --> 00:11:57,145
这时，这里的x就代表了所有的参数

71
00:12:01,490 --> 00:12:10,285
所以这是一种特殊的语法描述，来表示参数个数完全不定的情况

72
00:12:13,190 --> 00:12:18,420
一共就两种情况，上面这种和下面这种

73
00:12:18,420 --> 00:12:31,100
当你构建新的语法描述的时候，一定要注意，不要与现有的语法混淆或者矛盾

74
00:12:33,610 --> 00:12:58,465
引入了新的语法描述，我也总是可以分清是接收固定数目的参数，还是一定固定参数后再接不定数目的参数，更或者是参数的个数完全不确定全部由x来表示

75
00:13:02,250 --> 00:13:14,560
有很多语言都是由于语法描述方面出现了混淆或者矛盾导致语言解释器的错误

76
00:13:14,560 --> 00:13:25,060
比如 类ALGOL语言的嵌套if问题

77
00:13:25,060 --> 00:13:35,250
现在我已经告诉你们可行的语法了，接下来要怎么做呢？

78
00:13:35,250 --> 00:13:36,590
我们如何来解释它？

79
00:13:36,590 --> 00:13:38,440
其实很简单

80
00:13:38,440 --> 00:13:43,396
现在我来修改一下元循环

81
00:13:43,396 --> 00:13:46,020
只需要修改一行

82
00:13:46,020 --> 00:13:47,590
在这里

83
00:13:47,590 --> 00:13:49,560
把pair-up修改一下就行

84
00:13:56,390 --> 00:14:16,080
pair-up就是那个用来匹配形参与实参的过程

85
00:14:18,960 --> 00:14:22,670
大部分地方都不需要修改

86
00:14:22,670 --> 00:14:31,050
如果变量列表为空，而且值的列表也是空，就返回空列表

87
00:14:31,050 --> 00:14:41,580
否则，就是值太多了，也即变量列表为空而值列表不是空的

88
00:14:41,580 --> 00:14:50,090
如果值列表为空，但是变量列表不为空，那么就是实参给少了

89
00:14:50,090 --> 00:15:06,255
如果变量是一个符号，开始有意思了，这是一种特殊情况，这是一个符号尾

90
00:15:09,010 --> 00:15:14,900
情况就像这里的一样

91
00:15:14,900 --> 00:15:18,630
tail部分的y是一个符号

92
00:15:18,630 --> 00:15:20,730
它不是nil

93
00:15:20,730 --> 00:15:25,600
也不是空列表，这里的符号尾x就是最开始的那种情况

94
00:15:25,600 --> 00:15:27,790
不是另外的情况

95
00:15:27,790 --> 00:15:44,500
这种情况下，我就用这个符号去匹配整个值列表

96
00:15:44,500 --> 00:15:48,910
否则，我就回到以往的正常情况来一一匹配

97
00:15:52,020 --> 00:15:54,510
我认为这很容易理解 

98
00:15:54,510 --> 00:15:57,080
就是这些

99
00:15:57,080 --> 00:15:58,330
现在  答疑时间

100
00:16:02,620 --> 00:16:06,600
有什么问题吗？

101
00:16:06,600 --> 00:16:06,950
你说

102
00:16:06,950 --> 00:16:10,450
你能再解释一下第三种形式吗？

103
00:16:10,450 --> 00:16:12,590
这个？

104
00:16:12,590 --> 00:16:18,570
或许你用表结构来思考它会更容易理解一些

105
00:16:18,570 --> 00:16:22,400
这是一个过程，包含一个lambda

106
00:16:25,970 --> 00:16:31,090
我来画出表示上面这个过程的表结构

107
00:16:31,090 --> 00:16:32,730
这里是x

108
00:16:32,730 --> 00:16:33,980
这些是我们的符号

109
00:16:37,410 --> 00:16:39,580
过程体就是x而已

110
00:16:44,840 --> 00:16:54,010
如果我来查找这个过程的形参部分，取整个结构的CADR，返回一个符号x

111
00:16:54,010 --> 00:17:05,760
所以，很自然地，在pair-up中，我就用一个符号去匹配整个实参的列表

112
00:17:05,760 --> 00:17:09,559
这个符号与实参的列表相绑定

113
00:17:13,910 --> 00:17:20,920
上面这种情况，如果我用CADR，得到这样的结构去匹配实参列表

114
00:17:24,140 --> 00:17:31,450
这里的x就匹配到整个实参的列表然后返回x这个列表，这就是这个过程所做的事

115
00:17:34,510 --> 00:17:36,140
好的

116
00:17:36,140 --> 00:17:37,830
大家休息一下吧

117
00:17:37,830 --> 00:18:20,358
[MUSIC PLAYING]

118
00:18:20,358 --> 00:18:23,260
我们接着来看

119
00:18:23,260 --> 00:18:38,250
我将要介绍另一种Lisp变式，这项feature非常出名，早期的很多Lisp实现都有它

120
00:18:38,250 --> 00:18:41,770
它被称为变量的动态绑定

121
00:18:41,770 --> 00:18:44,680
我们现在来研究一下

122
00:18:47,620 --> 00:18:53,740
我先来介绍一下是什么情况导致人们会有动态绑定这样的想法的

123
00:18:53,740 --> 00:18:58,640
我不具体说是到底是什么情况，我只来举一些例子，你们说不定也会有同样的想法的

124
00:18:58,640 --> 00:19:08,140
假设，我们再来考虑sum这个过程，对一串东西求和

125
00:19:08,140 --> 00:20:08,220
(define sum (lambda (term a next b) (cond ((> a b) 0) (else (+ (term a) (sum term (next a) next b))))))

126
00:20:14,510 --> 00:20:25,450
当我使用sum过程的时候，我可以这样来用

127
00:20:25,450 --> 00:21:11,440
(define sum-powers (lambda (a b n) (sum (lambda (x) (expt x n)) a 1+ b)))

128
00:21:11,440 --> 00:21:16,340
计算x^n

129
00:21:16,340 --> 00:21:19,740
x从a到b取值，加1递增

130
00:21:22,940 --> 00:21:29,780
我也可以写 -- 对了

131
00:21:29,780 --> 00:21:31,910
乘积

132
00:21:31,910 --> 00:21:33,220
product-powers

133
00:21:38,080 --> 00:21:40,020
名字有点奇怪

134
00:21:40,020 --> 00:21:41,960
还是不改了

135
00:21:41,960 --> 00:21:50,890
有点怪，就按原来的吧

136
00:21:50,890 --> 00:22:03,400
And if I want the product of a bunch of powers-- That was 12 brain cells, that double-take.

137
00:22:03,400 --> 00:22:11,450
I can for example use the procedure which is like sum, which is for making products, but it's similar to that, that you've seen before.

138
00:22:11,450 --> 00:22:16,725
There's a procedure of three arguments again.

139
00:22:16,725 --> 00:22:37,850
Which is the product of terms that are constructed, or factors in this case, constructed from exponentiating x to the n, where I start with a, I increment, and I go to b.

140
00:22:41,530 --> 00:22:50,750
Now, there's some sort of thing here that should disturb you immediately.

141
00:22:50,750 --> 00:22:53,180
These look the same.

142
00:22:53,180 --> 00:22:56,590
Why am I writing this code so many times?

143
00:22:56,590 --> 00:23:01,270
Here I am, in the same boat I've been in before.

144
00:23:01,270 --> 00:23:03,810
Wouldn't it be nice to make an abstraction here?

145
00:23:03,810 --> 00:23:05,980
What's an example of a good abstraction to make?

146
00:23:05,980 --> 00:23:08,470
Well, I see some codes that's identical.

147
00:23:08,470 --> 00:23:11,080
Here's one, and here's another.

148
00:23:14,450 --> 00:23:17,090
And so maybe I should be able to pull that out.

149
00:23:17,090 --> 00:23:25,710
I should be able to say, oh yes, the sum of the powers could be written in terms of something called the nth power procedure.

150
00:23:25,710 --> 00:23:30,030
Imagine somebody wanted to write a slightly different procedure that looks like this.

151
00:23:37,630 --> 00:23:53,556
The sum powers to be a procedure of a, b, and n, as the result of summing up the nth power.

152
00:23:53,556 --> 00:24:02,170
We're going to give a name to that idea, for starting at a, going by one, and ending at b.

153
00:24:06,000 --> 00:24:16,270
And similarly, I might want to write the product powers this way, abstracting out this idea.

154
00:24:16,270 --> 00:24:17,520
I might want this.

155
00:24:22,100 --> 00:24:58,380
Product powers, to be a procedure of a, b, and n, which is the product of the nth power operation on a with the incrementation and b being my arguments for the analogous-thing product.

156
00:24:58,380 --> 00:25:05,930
And I'd like to be able to define, I'd like to be able to define nth power-- I'll put it over here.

157
00:25:11,215 --> 00:25:12,990
I'll put it at the top.

158
00:25:25,410 --> 00:25:35,390
--to be, in fact, my procedure of one argument x which is the result of exponentiating x to the n.

159
00:25:35,390 --> 00:25:38,640
But I have a problem.

160
00:25:38,640 --> 00:25:48,810
My environment model, that is my means of interpretation for the language that we've defined so far, does not give me a meaning for this n.

161
00:25:52,520 --> 00:26:06,410
Because, as you know, this n is free in this procedure.

162
00:26:06,410 --> 00:26:16,640
The environment model tells us that the meaning of a free variable is determined in the environment in which this procedure is defined.

163
00:26:16,640 --> 00:26:25,850
In a way I have written it, assuming these things are defined on the blackboard as is, this is defined in the global environment, where there is no end.

164
00:26:25,850 --> 00:26:28,720
Therefore, n is unbound variable.

165
00:26:28,720 --> 00:26:36,220
But it's perfectly clear, to most of us, that we would like it to be this n and this n.

166
00:26:38,990 --> 00:26:42,840
On the other hand, it would be nice.

167
00:26:42,840 --> 00:26:52,900
Certainly we've got to be careful here of keeping this to be this, and this one over here, wherever it is to be this one.

168
00:26:57,390 --> 00:27:04,040
Well, the desire to make this work has led to a very famous bug.

169
00:27:04,040 --> 00:27:07,310
I'll tell you about the famous bug.

170
00:27:07,310 --> 00:27:10,660
Look at this slide.

171
00:27:10,660 --> 00:27:13,990
This is an idea called dynamic binding.

172
00:27:13,990 --> 00:27:29,125
Where, instead of the free variable being interpreted in the environment of definition of a procedure, the free variable is interpreted as having its value in the environment of the caller of the procedure.

173
00:27:31,850 --> 00:28:04,470
So what you have is a system where you search up the chain of callers of a particular procedure, and, of course, in this case, since nth power is called from inside product whatever it is-- I had to write our own sum which is the analogous procedure-- and product is presumably called from product powers, as you see over here, then since product powers bind with variable n , then nth powers n would be derived through that chain.

174
00:28:08,140 --> 00:28:15,800
Similarly, this n, the nth power in n in this case, would come through nth power here being called from inside sum.

175
00:28:15,800 --> 00:28:19,730
You can see it being called from inside sum here.

176
00:28:19,730 --> 00:28:22,900
It's called term here.

177
00:28:22,900 --> 00:28:28,930
But sum was called from inside of sum powers, which bound n.

178
00:28:28,930 --> 00:28:36,495
Therefore, there would be an n available for that n to get it's value from.

179
00:28:39,430 --> 00:28:46,540
What we have below this white line plus over here, is what's called a dynamic binding view of the world.

180
00:28:46,540 --> 00:28:50,850
If that works, that's a dynamic binding view.

181
00:28:50,850 --> 00:28:55,990
Now, let's take a look, for example, at just what it takes to implement that.

182
00:28:55,990 --> 00:28:57,480
That's real easy.

183
00:28:57,480 --> 00:29:06,490
In fact, the very first Lisps that had any interpretations of the free variables at all, had dynamic binding interpretations for the free variables.

184
00:29:06,490 --> 00:29:15,220
APL has dynamic binding interpretation for the free variables, not lexical or static binding.

185
00:29:15,220 --> 00:29:18,790
So, of course, the change is in eval.

186
00:29:18,790 --> 00:29:22,780
And it's really in two places.

187
00:29:22,780 --> 00:29:29,010
First of all, one thing we see, is that things become a little simpler.

188
00:29:32,460 --> 00:29:42,030
If I don't have to have the environment be the environment of definition for procedure, the procedure need not capture the environment at the time it's defined.

189
00:29:42,030 --> 00:30:01,290
And so if we look here at this slide, we see that the clause for a lambda expression, which is the way a procedure is defined, does not make up a thing which has a type closure and a attached environment structure.

190
00:30:01,290 --> 00:30:02,540
It's just the expression itself.

191
00:30:02,540 --> 00:30:06,440
And we'll decompose that some other way somewhere else.

192
00:30:06,440 --> 00:30:14,290
The other thing we see is the applicator must be able to get the environment of the caller.

193
00:30:14,290 --> 00:30:19,560
The caller of a procedure is right here.

194
00:30:19,560 --> 00:30:26,980
If the expression we're evaluating is anpplication or a combination, then we're going to call a procedure which is the value of the operator.

195
00:30:29,840 --> 00:30:35,890
The environment of the caller is the environment we have right here, available now.

196
00:30:35,890 --> 00:30:41,490
So all I have to do is pass that environment to the applicator, to apply.

197
00:30:41,490 --> 00:31:06,810
And if we look at that here, the only change we have to make is that fellow takes that environment and uses that environment for the purpose of extending that environment when abiding the formal parameters of the procedure to the arguments that were passed, not an environment that was captured in the procedure.

198
00:31:06,810 --> 00:31:14,130
The reason why the first Lisps were implemented this way, is the sort of the obvious, accidental implementation.

199
00:31:14,130 --> 00:31:17,250
And, of course, as usual, people got used to it and liked it.

200
00:31:17,250 --> 00:31:21,590
And there were some people said, this is the way to do it.

201
00:31:21,590 --> 00:31:35,460
Unfortunately that causes some serious problems. The most important, serious problem in using dynamic binding is there's a modularity crisis that's involved it.

202
00:31:35,460 --> 00:31:44,580
If two people are working together on some big system, then an important thing to want is that the names used by each one don't interfere with the names of the other.

203
00:31:47,930 --> 00:31:59,850
It's important that when I invent some segment of code that no one can make my code stop working by using my names that I use internal to my code, internal to his code.

204
00:31:59,850 --> 00:32:06,670
However, dynamic binding violates that particular modularity constraint in a clear way.

205
00:32:06,670 --> 00:32:12,540
Consider, for example, what happens over here.

206
00:32:12,540 --> 00:32:19,810
Suppose it was the case that I decided to change the word next.

207
00:32:19,810 --> 00:32:28,970
Supposing somebody is writing sum, and somebody else is going to use sum.

208
00:32:28,970 --> 00:32:33,790
The writer of sum has a choice of what names he may use.

209
00:32:33,790 --> 00:32:36,760
Let's say, I'm that writer.

210
00:32:36,760 --> 00:32:39,300
Well, by gosh, just happens I didn't want to call this next.

211
00:32:39,300 --> 00:32:41,500
I called it n.

212
00:32:41,500 --> 00:32:48,140
So all places where you see next, I called it n.

213
00:32:48,140 --> 00:32:49,940
Whoops.

214
00:32:49,940 --> 00:32:56,110
I changed nothing about the specifications of this program, but this program stops working.

215
00:32:56,110 --> 00:32:59,730
Not only that, unfortunately, this one does too.

216
00:32:59,730 --> 00:33:02,260
Why do these programs stop working?

217
00:33:02,260 --> 00:33:04,480
Well, it's sort of clear.

218
00:33:04,480 --> 00:33:24,370
Instead of chasing out the value of the n that occurs in nth power over here or over here, through the environment of definition, where this one is always linked to this one, if it was through the environment of definition, because here is the definition.

219
00:33:24,370 --> 00:33:30,700
This lambda expression was executed in the environment where that n was defined.

220
00:33:30,700 --> 00:33:37,320
If instead of doing that, I have to chase through the call chain, then look what horrible thing happens.

221
00:33:37,320 --> 00:33:44,780
Well, this was called from inside sum as term, term a.

222
00:33:44,780 --> 00:33:47,350
I'm looking for a value of n.

223
00:33:47,350 --> 00:33:50,700
Instead of getting this one, I get that one.

224
00:33:50,700 --> 00:33:54,680
So by changing the insides of this program, this program stops working.

225
00:33:56,770 --> 00:34:00,020
So I no longer have a quantifier, as I described before.

226
00:34:02,700 --> 00:34:05,430
The lambda symbol is supposed to be a quantifier.

227
00:34:05,430 --> 00:34:24,040
A thing which has the property that the names that are bound by it are unimportant, that I can uniformly substitute any names for these throughout this thing, so long as they don't occur in here, the new names, and the meaning of this expression should remain unchanged.

228
00:34:24,040 --> 00:34:28,690
I've just changed the meaning of the expression by changing the one of the names.

229
00:34:28,690 --> 00:34:32,170
So lambda is no longer a well defined idea.

230
00:34:32,170 --> 00:34:34,550
It's a very serious problem.

231
00:34:34,550 --> 00:34:48,090
So for that reason, I and my buddies have given up this particular kind of abstraction, which I would like to have, in favor of a modularity principle.

232
00:34:48,090 --> 00:34:54,530
But this is the kind of experiment you can do if you want to play with these interpreters.

233
00:34:54,530 --> 00:34:58,270
You can try them out this way, that way, and the other way.

234
00:34:58,270 --> 00:35:00,070
You see what makes a nicer language.

235
00:35:02,680 --> 00:35:04,990
So that's a very important thing to be able to do.

236
00:35:04,990 --> 00:35:10,880
Now, I would like to give you a feeling for I think the right thing to do is here.

237
00:35:10,880 --> 00:35:16,280
How are you going to I get this kind of power in a lexical system?

238
00:35:16,280 --> 00:35:23,690
And the answer is, of course, what I really want is a something that makes up for me an exponentiator for a particular n.

239
00:35:23,690 --> 00:35:26,280
Given an n, it will make me an exponentiator.

240
00:35:26,280 --> 00:35:28,170
Oh, but that's easy too.

241
00:35:28,170 --> 00:35:30,570
In other words, I can write my program this way.

242
00:35:35,450 --> 00:35:45,240
I'm going to define a thing called PGEN, which is a procedure of n which produces for me an exponentiator.

243
00:35:50,240 --> 00:35:51,490
--x to the n.

244
00:35:56,900 --> 00:36:07,890
Given that I have that, then I can capture the abstraction I wanted even better, because now it's encapsulated in a way where I can't be destroyed by a change of names.

245
00:36:07,890 --> 00:36:37,590
I can define some powers to be a procedure again of a, b, and n which is the sum of the term function generated by using this generator, PGEN, n, with a, incrementer, and b.

246
00:36:42,490 --> 00:37:11,150
And I can define the product of powers to be a procedure of a, b, and n which is the product PGEN, n, with a, increment, and b.

247
00:37:11,150 --> 00:37:17,280
Now, of course, this is a very simple example where this object that I'm trying to abstract over is small.

248
00:37:17,280 --> 00:37:20,100
But it could be a 100 lines of code.

249
00:37:20,100 --> 00:37:23,670
And so, the purpose of this is, of course, to make it simple.

250
00:37:23,670 --> 00:37:28,200
I'd give a name to it, it's just that here it's a parameterized name.

251
00:37:28,200 --> 00:37:34,050
It's a name that depends upon, explicitly, the lexically apparent value of n.

252
00:37:37,130 --> 00:37:40,210
So you can think of this as a long name.

253
00:37:40,210 --> 00:37:49,220
And here, I've solved my problem by naming the term generation procedures within an n in them.

254
00:37:55,080 --> 00:37:57,140
Are there any questions?

255
00:37:57,140 --> 00:37:58,380
Oh, yes, David.

256
00:37:58,380 --> 00:38:06,470
AUDIENCE: Is the only solution to the problem you raise to create another procedure?

257
00:38:06,470 --> 00:38:12,402
In other words, can this only work in languages that are capable of defining objects as procedures?

258
00:38:12,402 --> 00:38:13,765
PROFESSOR: Oh, I see.

259
00:38:16,530 --> 00:38:28,190
My solution to making this abstraction, when I didn't want include the procedure inside the body, depends upon my ability to return a procedure or export one.

260
00:38:28,190 --> 00:38:30,410
And that's right.

261
00:38:30,410 --> 00:38:43,000
If I don't have that, then I just don't have this ability to make an abstraction in a way where I don't have possibilities of symbol conflicts that were unanticipated.

262
00:38:43,000 --> 00:38:45,610
That's right.

263
00:38:45,610 --> 00:39:03,700
I consider being able to return the procedural value and, therefore, to sort of have first class procedures, in general, as being essential to doing very good modular programming.

264
00:39:03,700 --> 00:39:07,440
Now, indeed there are many other ways to skin this cat.

265
00:39:07,440 --> 00:39:15,840
What you can do is take for each of the bad things that you have to worry about, you can make a special feature that covers that thing.

266
00:39:15,840 --> 00:39:17,930
You can make a package system.

267
00:39:17,930 --> 00:39:22,240
You can make a module system as in Ada, et cetera.

268
00:39:22,240 --> 00:39:26,440
And all of those work, or they cover little regions of it.

269
00:39:26,440 --> 00:39:45,590
The thing is that returning procedures as values cover all of those problems. And so it's the simplest mechanism that gives you the best modularity, gives you all of the known modularity mechanisms.

270
00:39:45,590 --> 00:39:48,248
Well, I suppose it's time for the next break, thank you.

271
00:39:48,248 --> 00:40:41,871
[MUSIC PLAYING]

272
00:40:41,871 --> 00:40:55,420
PROFESSOR: Well, yesterday when you learned about streams, Hal worried to you about the order of evaluation and delayed arguments to procedures.

273
00:40:55,420 --> 00:41:15,250
The way we played with streams yesterday, it was the responsibility of the caller and the callee to both agree that an argument was delayed, and the callee must force the argument if it needs the answer.

274
00:41:15,250 --> 00:41:26,100
So there had to be a lot of hand shaking between the designer of a procedure and user of it over delayedness.

275
00:41:26,100 --> 00:41:45,900
That turns out, of course, to be a fairly bad thing, it works all right with streams. But as a general thing, what you want is an idea to have a locus, a decision, a design decision in general, to have a place where it's made, explicitly, and notated in a clear way.

276
00:41:45,900 --> 00:41:59,500
And so it's not a very good idea to have to have an agreement, between the person who writes a procedure and the person who calls it, about such details as, maybe, the arguments of evaluation, the order of evaluation.

277
00:41:59,500 --> 00:42:00,750
Although, that's not so bad.

278
00:42:00,750 --> 00:42:04,540
I mean, we have other such agreements like, the input's a number.

279
00:42:04,540 --> 00:42:11,020
But it would be nice if only one of these guys could take responsibility, completely.

280
00:42:11,020 --> 00:42:15,510
Now this is not a new idea.

281
00:42:15,510 --> 00:42:22,020
ALGOL 60 had two different ways of calling a procedure.

282
00:42:22,020 --> 00:42:25,590
The arguments could be passed by name or by value.

283
00:42:25,590 --> 00:42:31,110
And what that meant was that a name argument was delayed.

284
00:42:31,110 --> 00:42:39,620
That when you passed an argument by name, that its value would only be obtained if you accessed that argument.

285
00:42:42,290 --> 00:42:50,320
So what I'd like to do now is show you, first of all, a little bit about, again, we're going to make a modification to a language.

286
00:42:50,320 --> 00:42:53,370
In this case, we're going to add a feature.

287
00:42:53,370 --> 00:43:00,430
We're going to add the feature of, by name parameters, if you will, or delayed parameters.

288
00:43:00,430 --> 00:43:08,220
Because, in fact, the default in our Lisp system is by the value of a pointer.

289
00:43:08,220 --> 00:43:13,410
A pointer is copied, but the data structure it points at is not.

290
00:43:13,410 --> 00:43:19,990
But I'd like to, in fact, show you is how you add name arguments as well.

291
00:43:19,990 --> 00:43:23,100
Now again, why would we need such a thing?

292
00:43:23,100 --> 00:43:29,720
Well supposing we wanted to invent certain kinds of what otherwise would be special forms, reserve words?

293
00:43:29,720 --> 00:43:32,180
But I'd rather not take up reserve words.

294
00:43:32,180 --> 00:43:36,360
I want procedures that can do things like if.

295
00:43:36,360 --> 00:43:39,420
If is special, or cond, or whatever it is.

296
00:43:39,420 --> 00:43:40,600
It's the same thing.

297
00:43:40,600 --> 00:43:50,840
It's special in that it determines whether or not to evaluate the consequent or the alternative based on the value of the predicate part of an expression.

298
00:43:50,840 --> 00:43:57,270
So taking the value of one thing determines whether or not to do something else.

299
00:43:57,270 --> 00:44:08,670
Whereas all the procedures like plus, the ones that we can define right now, evaluate all of their arguments before application.

300
00:44:08,670 --> 00:44:19,452
So, for example, supposing I wish to be able to define something like the reverse of if in terms of if.

301
00:44:19,452 --> 00:44:20,702
Call it unless.

302
00:44:24,890 --> 00:44:28,190
We've a predicate, a consequent, and an alternative.

303
00:44:28,190 --> 00:44:32,440
Now what I would like to sort of be able to do is say-- oh, I'll do it in terms of cond.

304
00:44:32,440 --> 00:44:45,350
Cond, if not the predicate, then take the consequent, otherwise, take the alternative.

305
00:44:51,290 --> 00:44:56,920
Now, what I'd like this to mean, is supposing I do something like this.

306
00:44:56,920 --> 00:45:11,350
I'd like this unless say if equals one, 0, then the answer is two, otherwise, the quotient of one and 0.

307
00:45:15,980 --> 00:45:25,580
What I'd like that to mean is the result of substituting equal one, 0, and two, and the quotient of one, 0 for p, c, and a.

308
00:45:25,580 --> 00:45:51,160
I'd like that to mean, and this is funny, I'd like it to transform into or mean cond not equal one, 0, then the result is two, otherwise I want it to be the quotient one and 0.

309
00:45:54,480 --> 00:45:59,970
Now, you know that if I were to type this into Lisp, I'd get a two.

310
00:45:59,970 --> 00:46:02,910
There's no problem with that.

311
00:46:02,910 --> 00:46:10,840
However, if I were to type this into Lisp, because all the arguments are evaluated before I start, then I'm going to get an error out of this.

312
00:46:13,380 --> 00:46:16,880
So that if the substitutions work at all, of course, I would get the right answer.

313
00:46:16,880 --> 00:46:20,160
But here's a case where the substitutions don't work.

314
00:46:22,920 --> 00:46:23,860
I don't get the wrong answer.

315
00:46:23,860 --> 00:46:24,670
I get no answer.

316
00:46:24,670 --> 00:46:25,920
I get an error.

317
00:46:28,420 --> 00:46:34,270
Now, however, I'd like to be able to make my definition so that this kind of thing works.

318
00:46:34,270 --> 00:46:39,930
What I want to do is say something special about c and a.

319
00:46:39,930 --> 00:46:42,715
I want them to be delayed automatically.

320
00:46:46,300 --> 00:46:51,520
I don't want them to be evaluated at the time I call.

321
00:46:51,520 --> 00:46:55,600
So I'm going to make a declaration, and then I'm going to see how to implement such a declaration.

322
00:46:55,600 --> 00:47:02,140
But again, I want you to say to yourself, oh, this is an interesting kluge he's adding in here.

323
00:47:02,140 --> 00:47:05,750
The piles of kluges make a big complicated mess.

324
00:47:05,750 --> 00:47:10,120
And is this going to foul up something else that might occur.

325
00:47:10,120 --> 00:47:13,860
First of all, is it syntactically unambiguous?

326
00:47:13,860 --> 00:47:17,840
Well, it will be syntactically unambiguous with what we've seen so far.

327
00:47:17,840 --> 00:47:21,670
But what I'm going to do may, in fact, cause trouble.

328
00:47:21,670 --> 00:47:34,300
It may be that the thing I had will conflict with type declarations I might want to add in the future for giving some system, some compiler or something, the ability to optimize given the types are known.

329
00:47:34,300 --> 00:47:40,570
Or it might conflict with other types of declarations I might want to make about the formal parameters.

330
00:47:40,570 --> 00:47:44,925
So I'm not making a general mechanism here where I can add declarations.

331
00:47:44,925 --> 00:47:46,750
And I would like to be able to do that.

332
00:47:46,750 --> 00:47:51,010
But I don't want to talk about that right now.

333
00:47:51,010 --> 00:47:53,680
So here I'm going to do, I'm going to build a kluge.

334
00:47:57,050 --> 00:48:14,930
So we're going to define unless of a predicate-- and I'm going to call these by name-- the consequent, and name the alternative.

335
00:48:19,850 --> 00:48:25,280
Huh, huh-- I got caught in the corner.

336
00:48:31,240 --> 00:48:41,360
If not p then the result is c, else-- that's what I'd like.

337
00:48:44,670 --> 00:48:51,650
Where I can explicitly declare certain of the parameters to be delayed, to be computed later.

338
00:48:55,008 --> 00:49:00,450
Now, this is actually a very complicated modification to an interpreter rather than a simple one.

339
00:49:00,450 --> 00:49:09,280
The ones you saw before, dynamic binding or adding indefinite argument procedures, is relatively simple.

340
00:49:09,280 --> 00:49:12,120
But this one changes a basic strategy.

341
00:49:12,120 --> 00:49:36,110
The problem here is that our interpreter, as written, evaluates a combination by evaluating the procedure, the operator producing the procedure, and evaluating the operands producing the arguments, and then doing apply of the procedure to the arguments.

342
00:49:36,110 --> 00:49:46,810
However, here, I don't want to evaluate the operands to produce the arguments until after I examined the procedure to see what the procedure's declarations look like.

343
00:49:49,590 --> 00:49:52,680
So let's look at that.

344
00:49:52,680 --> 00:49:57,480
Here we have a changed evaluator.

345
00:49:57,480 --> 00:50:09,750
I'm starting with the simple lexical evaluator, not dynamic, but we're going to have to do something sort of similar in some ways.

346
00:50:09,750 --> 00:50:19,360
Because of the fact that, if I delay a procedure-- I'm sorry-- delay an argument to a procedure, I'm going to have to attach and environment to it.

347
00:50:19,360 --> 00:50:23,380
Remember how Hal implemented delay.

348
00:50:23,380 --> 00:50:31,180
Hal implemented delay as being a procedure of no arguments which does some expression.

349
00:50:31,180 --> 00:50:32,670
That's what delay of the expression is.

350
00:50:35,370 --> 00:50:36,620
--of that expression.

351
00:50:39,180 --> 00:50:40,950
This turned into something like this.

352
00:50:44,520 --> 00:50:49,010
Now, however, if I evaluate a lambda expression, I have to capture the environment.

353
00:50:51,410 --> 00:51:01,530
The reason why is because there are variables in there who's meaning I wish to derive from the context where this was written.

354
00:51:04,010 --> 00:51:06,095
So that's why a lambda does the job.

355
00:51:06,095 --> 00:51:08,070
It's the right thing.

356
00:51:08,070 --> 00:51:21,090
And such that the forcing of a delayed expression was same thing as calling that with no arguments.

357
00:51:21,090 --> 00:51:24,100
It's just the opposite of this.

358
00:51:24,100 --> 00:51:33,132
Producing an environment of the call which is, in fact, the environment where this was defined with an extra frame in it that's empty.

359
00:51:33,132 --> 00:51:36,240
I don't care about that.

360
00:51:36,240 --> 00:51:51,980
Well, if we go back to this slide, since it's the case, if we look at this for a second, everything is the same as it was before except the case of applications or combinations.

361
00:51:51,980 --> 00:51:54,680
And combinations are going to do two things.

362
00:51:54,680 --> 00:52:00,425
One, is I have to evaluate the procedure-- forget the procedure-- by evaluating the operator.

363
00:52:00,425 --> 00:52:02,380
That's what you see right here.

364
00:52:02,380 --> 00:52:10,730
I have to make sure that that's current, that is not a delayed object, and evaluate that to the point where it's forced now.

365
00:52:10,730 --> 00:52:18,460
And then I have to somehow apply that to the operands.

366
00:52:18,460 --> 00:52:21,530
But I have to keep the environment, pass that environmental along.

367
00:52:21,530 --> 00:52:23,710
So some of those operands I may have to delay.

368
00:52:23,710 --> 00:52:29,302
I may have to attach that environment to those operands.

369
00:52:29,302 --> 00:52:32,990
This is a rather complicated thing happening here.

370
00:52:32,990 --> 00:52:34,240
Looking at that in apply.

371
00:52:36,400 --> 00:52:42,610
Apply, well it has a primitive procedure thing just like before.

372
00:52:42,610 --> 00:52:44,390
But the compound one is a little more interesting.

373
00:52:47,250 --> 00:53:00,290
I have to evaluate the body, just as before, in an environment which is the result of binding some formal parameters to arguments in the environment.

374
00:53:00,290 --> 00:53:01,530
That's true.

375
00:53:01,530 --> 00:53:03,820
The environment is the one that comes from the procedure now.

376
00:53:03,820 --> 00:53:08,040
It's a lexical language, statically bound.

377
00:53:08,040 --> 00:53:12,960
However, one thing I have to do is strip off the declarations to get the names of the variables.

378
00:53:12,960 --> 00:53:15,450
That's what this guy does, vnames.

379
00:53:15,450 --> 00:53:33,770
And the other thing I have to do is process these declarations, deciding which of these operands-- that's the operands now, as opposed to the arguments-- which of these operands to evaluate, and which of them are to be encapsulated in delays of some sort.

380
00:53:37,280 --> 00:53:45,820
The other thing you see here is that we got a primitive, a primitive like plus, had better get at the real operands.

381
00:53:45,820 --> 00:53:47,690
So here is a place where we're going to have to force them.

382
00:53:47,690 --> 00:53:51,340
And we're going to look at what evlist is going to have to do a bunch of forces.

383
00:53:51,340 --> 00:53:52,780
So we have two different kinds of evlist now.

384
00:53:52,780 --> 00:53:59,870
We have evlist and gevlist. Gevlist is going to wrap delays around some things and force others, evaluate others.

385
00:53:59,870 --> 00:54:07,900
And this guy's going to do some forcing of things.

386
00:54:07,900 --> 00:54:12,250
Just looking at this a little bit, this is a game you must play for yourself, you know.

387
00:54:12,250 --> 00:54:19,730
It's not something that you're going to see all possible variations on an evaluator talking to me.

388
00:54:19,730 --> 00:54:21,410
What you have to do is do this for yourself.

389
00:54:21,410 --> 00:54:29,930
And after you feel this, you play this a bit, you get to see all the possible design decisions and what they might mean, and how they interact with each other.

390
00:54:29,930 --> 00:54:33,160
So what languages might have in them.

391
00:54:33,160 --> 00:54:37,200
And what are some of the consistent sets that make a legitimate language.

392
00:54:37,200 --> 00:54:41,850
Whereas what things are complicated kluges that are just piles of junk.

393
00:54:41,850 --> 00:54:50,750
So evlist of course, over here, just as I said, is a list of operands which are going to be undelayed after evaluation.

394
00:54:50,750 --> 00:54:56,050
So these are going to be forced, whatever that's going to mean.

395
00:54:56,050 --> 00:55:04,040
And gevlist, which is the next thing-- Thank you.

396
00:55:04,040 --> 00:55:09,810
What we see here, well there's a couple of possibilities.

397
00:55:09,810 --> 00:55:19,390
Either it's a normal, ordinary thing, a symbol sitting there like the predicate in the unless, and that's what we have here.

398
00:55:19,390 --> 00:55:23,340
In which case, this is intended to be evaluated in applicative order.

399
00:55:23,340 --> 00:55:25,630
And it's, essentially, just what we had before.

400
00:55:25,630 --> 00:55:37,900
It's mapping eval down the list. In other words, I evaluate the first expression and continue gevlisting the CDR of the expression in the environment.

401
00:55:37,900 --> 00:55:43,600
However, it's possible that this is a name parameter.

402
00:55:43,600 --> 00:56:02,790
If it's a name parameter, I want to put a delay in which combines that expression, which I'm calling by name, with the environment that's available at this time and passing that as the parameter.

403
00:56:02,790 --> 00:56:05,600
And this is part of the mapping process that you see here.

404
00:56:09,070 --> 00:56:14,700
The only other interesting place in this interpreter is cond.

405
00:56:14,700 --> 00:56:18,550
People tend to write this thing, and then they leave this one out.

406
00:56:18,550 --> 00:56:20,510
There's a place where you have to force.

407
00:56:20,510 --> 00:56:25,990
Conditionals have to know whether or not the answer is true or false.

408
00:56:25,990 --> 00:56:28,550
It's like a primitive.

409
00:56:28,550 --> 00:56:31,890
When you do a conditional, you have to force.

410
00:56:31,890 --> 00:56:34,350
Now, I'm not going to look at any more of this in any detail.

411
00:56:34,350 --> 00:56:36,750
It isn't very exciting.

412
00:56:36,750 --> 00:56:38,990
And what's left is how you make delays.

413
00:56:38,990 --> 00:56:44,840
Well, delays are data structures which contain an expression, an environment, and a type on them.

414
00:56:44,840 --> 00:56:46,680
And it says they're a thunk.

415
00:56:46,680 --> 00:56:52,970
That comes from ALGOL language, and it's claimed to be the sound of something being pushed on a stack.

416
00:56:52,970 --> 00:56:53,410
I don't know.

417
00:56:53,410 --> 00:56:58,740
I was not an ALGOLician or an ALGOLite or whatever, so I don't know.

418
00:56:58,740 --> 00:57:00,270
But that's what was claimed.

419
00:57:00,270 --> 00:57:07,860
And undelay is something which will recursively undelay thunks until the thunk becomes something which isn't a thunk.

420
00:57:07,860 --> 00:57:12,050
This is the way you implement a call by name like thing in ALGOL.

421
00:57:12,050 --> 00:57:15,210
And that's about all there is.

422
00:57:15,210 --> 00:57:16,460
Are there any questions?

423
00:57:26,840 --> 00:57:27,560
AUDIENCE: Gerry?

424
00:57:27,560 --> 00:57:29,626
PROFESSOR: Yes, Vesko?

425
00:57:29,626 --> 00:57:39,350
AUDIENCE: I noticed you avoided calling by name in the primitive procedures, I was wondering what cause you have on that?

426
00:57:39,350 --> 00:57:40,070
You never need that?

427
00:57:40,070 --> 00:57:47,140
PROFESSOR: Vesko is asking if it's ever reasonable to call a primitive procedure by name?

428
00:57:47,140 --> 00:57:49,270
The answer is, yes.

429
00:57:49,270 --> 00:57:52,930
There's one particular case where it's reasonable, actually two.

430
00:57:56,050 --> 00:58:03,690
Construction of a data structure like cons where making an array if you have arrays with any number of elements.

431
00:58:03,690 --> 00:58:07,440
It's unnecessary to evaluate those arguments.

432
00:58:07,440 --> 00:58:11,160
All you need is promises to evaluate those arguments if you look at them.

433
00:58:11,160 --> 00:58:21,830
If I cons together two things, then I could cons together the promises just as easily as I can cons together the things.

434
00:58:21,830 --> 00:58:24,840
And it's not even when I CAR CDR them that I have to look at them.

435
00:58:24,840 --> 00:58:28,260
That just gets out the promises and passes them to somebody.

436
00:58:28,260 --> 00:58:34,420
That's why the lambda calculus definition, the Alonzo Church definition of CAR, CDR, and cons makes sense.

437
00:58:34,420 --> 00:58:40,760
It's because no work is done in CAR, CDR, and cons, it's just shuffling data, it's just routing, if you will.

438
00:58:40,760 --> 00:58:45,280
However, the things that do have to look at data are things like plus.

439
00:58:45,280 --> 00:58:52,460
Because they have a look at the bits that the numbers are made out of, unless they're lambda calculus numbers which are funny.

440
00:58:52,460 --> 00:58:55,880
They have to look at the bits to be able to crunch them together to do the add.

441
00:58:59,210 --> 00:59:13,300
So, in fact, data constructors, data selectors, and, in fact, things that side-effect data objects don't need to do any forcing in the laziest possible interpreters.

442
00:59:16,460 --> 00:59:18,700
On the other hand predicates on data structures have to.

443
00:59:21,710 --> 00:59:23,560
Is this a pair?

444
00:59:23,560 --> 00:59:24,640
Or is it a symbol?

445
00:59:24,640 --> 00:59:25,690
Well, you better find out.

446
00:59:25,690 --> 00:59:26,940
You got to look at it then.

447
00:59:30,300 --> 00:59:31,550
Any other questions?

448
00:59:40,050 --> 00:59:41,610
Oh, well, I suppose it's time for a break.

449
00:59:41,610 --> 00:59:42,106
Thank you.

450
00:59:42,106 --> 01:00:02,950
[MUSIC PLAYING]

