1
00:00:15,314 --> 00:00:18,410
今天我们学习一些非同一般的东西
PROFESSOR: Well today we're going to learn about something quite amazing.

2
00:00:18,410 --> 00:00:26,800
我们借助一些程序来理解更为深刻的理论
We're going to understand what we mean by a program a little bit more profoundly than we have up till now.

3
00:00:26,800 --> 00:00:32,729
到目前为止，我们一直把程序看作可描述的机器
Up till now, we've been thinking of programs as describing machines.

4
00:00:32,729 --> 00:00:42,800
举个例子，这个幻灯片上有一个计算阶乘的程序
So for example, looking at this still store, we see here is a program for factorial.

5
00:00:42,800 --> 00:00:52,230
它不过就是一连串字符串描述的东西，如果想的话，你也可以用可能无限递归的机器的布线图来表示
And what it is, is a character string description, if you will, of the wiring diagram of a potentially infinite machine.

6
00:00:52,230 --> 00:00:55,130
我们只消看一点就明白程序是怎么回事
And we can look at that a little bit and just see the idea.

7
00:00:55,130 --> 00:01:00,170
这种记法很简洁，这句描述的是，如果n是0，结果就是1
That this is a sort of compact notation which says, if n is 0, the result is one.

8
00:01:00,170 --> 00:01:09,340
这里n输入机器，如果是0，就控制这个开关转到输出为1的方向
Well here comes n coming into this machine, and if it's 0, then I control this switch in such a way that the switch allows the output to be one.

9
00:01:09,340 --> 00:01:12,970
否则，开关就转到输出为 n乘以n-1的阶乘 的方向
Otherwise, it's n times factorial of n minus one.

10
00:01:12,970 --> 00:01:21,900
下面计算的是n乘以n-1的阶乘，当n不是0的时候，开关就转到这个方向，输出这部分的计算
Well, I'm computing factorial of n minus one and multiplying that by n, and, in the case that it's not 0, this switch makes the output come from there.

11
00:01:21,900 --> 00:01:31,070
当然，这个机器可能是有无数个部件，因为factorial内部又调用了factorial，因此我们也不知道递归的深度是多少
Of course, this is a machine with a potentially infinite number of parts, because factorial occurs within factorial, so we don't know how deep it has to be.

12
00:01:31,070 --> 00:01:38,310
这就是程序的记法所告诉我们的
But that's basically what our notation for programs really means to us at this point.

13
00:01:38,310 --> 00:01:44,900
字符串可以描述程序，如果你想，用布线图表示也是可以的
It's a character string description, if you will, of a wiring diagram that could also be drawn some other way.

14
00:01:44,900 --> 00:01:49,490
事实上，很多人都对我说过，说编程语言和这种图形很相似
And, in fact, many people have proposed to me, programming languages look graphical like this.

15
00:01:49,490 --> 00:01:51,500
不过我不认为用图形表示会有很多优势
I'm not sure I believe there are many advantages.

16
00:01:51,500 --> 00:02:01,090
一个缺点就是表示出来需要占用很大的平面空间，所以就很难一次性表示很大的程序，而且编辑修改起来也不方便
The major disadvantage, of course, is that it takes up more space on a page, and, therefore, it's harder to pack into a listing or to edit very well.

17
00:02:01,090 --> 00:02:10,450
但是不管怎样，有一个叫做“通用机”的机器还是很值得我们注意的
But in any case, there's something very remarkable that can happen in the competition world which is that you can have something called a universal machine.

18
00:02:10,450 --> 00:02:21,260
我们再来看第二张幻灯片，这个特殊的机器名为eval
If we look at the second slide, what we see is a special machine called eval.

19
00:02:21,260 --> 00:02:25,720
这个eval也就是今天要讲的
There is a machine called eval, and I'm going to show it to you today.

20
00:02:25,720 --> 00:02:27,780
它非常简单
It's very simple.

21
00:02:27,780 --> 00:02:30,490
甚至在黑板这么小的空间里都能把它写出来
What is remarkable is that it will fit on the blackboard.

22
00:02:33,350 --> 00:02:40,450
要注意的是，eval的输入比较特殊，它以对其它机器的描述作为输入
However, eval is a machine which takes as input a description of another machine.

23
00:02:40,450 --> 00:02:46,490
这里它以一个计算阶乘的机器的布线图描述作为输入
It could take the wiring diagram of a factorial machine as input.

24
00:02:46,490 --> 00:02:58,910
这样一来，eval变成了计算阶乘机器的模拟器，对eval输入6，得到阶乘结果720
Having done so, it becomes a simulator for the factorial machine such that, if you put a six in, out comes a 720.

25
00:02:58,910 --> 00:03:02,130
这种机器非同一般
That's a very remarkable sort of machine.

26
00:03:02,130 --> 00:03:05,590
最让人吃惊的是只消在黑板这么小的空间内就可以描述完它
And the most amazing part of it is that it fits on a blackboard.

27
00:03:05,590 --> 00:03:28,050
我们可以类比着来看，假设在现实里的模拟电路中，有这样一种通用的机器，它以电路设计图纸为输入，像是低通滤波器、 单极点低通滤波器之类的
By contrast, one could imagine in the analog electronics world a very different machine, a machine which also was, in some sense, universal, where you gave a circuit diagram as one of the inputs, for example, of this little low-pass filter, one-pole low-pass filter.

28
00:03:28,050 --> 00:03:49,890
你可以这样想像，用这个机器进行扫描输出 -- 扫描线应该可以描述出通用机在模拟的这个机器 -- 使用响应特定频率的滤波电路图的通用机模拟的效果应该和真实的滤波器达到的效果一样
And you can imagine that you could, for example, scan this out-- the scan lines are the signal that's describing what this machine is to simulate-- then the analog of that which is made out of electrical circuits, should configure itself into a filter that has the frequency response specified by the circuit diagram.

29
00:03:49,890 --> 00:03:55,670
这种机器很难制造出来，我肯定也不能只在黑板这么大的空间就具体的表述出它
That's a very hard machine to make, and, surely, there's no chance that I could put it on a blackboard.

30
00:03:55,670 --> 00:03:58,430
所以说，今天是我们见证奇迹的时刻
So we're going to see an amazing thing today.

31
00:03:58,430 --> 00:04:02,790
我们将会见证，在黑板上，我就可以“制造”出通用机
We're going to see, on the blackboard, the universal machine.

32
00:04:02,790 --> 00:04:06,780
除了部分事情以外，它其实非常简单
And we'll see that among other things, it's extremely simple.

33
00:04:06,780 --> 00:04:11,280
我们也逐渐触碰到活在计算机中真正的神灵
Now, we're getting very close to the real spirit in the computer at this point.

34
00:04:11,280 --> 00:04:20,470
这里务必要保持足够的尊敬，所以我特地穿上西服外套，你们应该从没见我穿过
So I have to show a certain amount of reverence and respect, so I'm going to wear a suit jacket for the only time that you'll ever see me wear a suit jacket here.

35
00:04:20,470 --> 00:04:26,980
我想我还得戴上一顶合适的帽子
And I think I'm also going to put on an appropriate hat for the occasion.

36
00:04:28,780 --> 00:04:40,370
开讲前再给大家提个醒 -- 40岁以下以及还没有几个孩子的人要小心了
Now, this is a lecturer which I have to warn you--  let's see, normally, people under 40 and who don't have several children are advised to be careful.

37
00:04:40,370 --> 00:04:51,820
如果你真的受不了，可以选择离开 因为一会儿要发生的事情非常神秘，可能使你的思想异常混乱
If they're really worried, they should leave. Because there's a certain amount of mysticism that will appear here which may be disturbing and cause trouble in your minds.

38
00:04:51,820 --> 00:05:02,510
好了，无论如何，我还是要向你们写一下Lisp的求值程序
Well in any case, let's see, I wish to write for you the evaluator for Lisp.

39
00:05:02,510 --> 00:05:05,020
求值程序并不复杂
Now the evaluator isn't very complicated.

40
00:05:05,020 --> 00:05:08,240
很像我们以前见到过的程序
It's very much like all the programs we've seen already.

41
00:05:08,240 --> 00:05:10,860
这也是它令人吃惊的地方
That's the amazing part of it.

42
00:05:10,860 --> 00:05:16,620
现在我开始写这个程序，叫做eval
It's going to be-- and I'm going to write it right here-- it's a program called eval.

43
00:05:22,900 --> 00:05:30,030
它是一个接受两个参数的过程，exp是表达式，env是表达式执行的环境
And it's a procedure of two arguments in expression of an environment.

44
00:05:31,860 --> 00:05:34,940
和很多有趣的过程一样，过程内部按情况分析
And like every interesting procedure, it's a case analysis.

45
00:05:40,460 --> 00:05:44,210
但是在我开始之前，我还想告诉你们一些其它的
But before I start on this, I want to tell you some things.

46
00:05:44,210 --> 00:05:54,210
这里的这个程序非常丑陋、混乱、令人作呕，并不是一种专业的写法
The program we're going to write on the blackboard is ugly, dirty, disgusting, not the way I would write this is a professional.

47
00:05:54,210 --> 00:06:02,550
它用具体的语法写就，也就是说我们用很多CAR CDR之类，我之前告诉过你们这样写并不好
It is written with concrete syntax, meaning you've got really to use lots of CARs and CDRs which is exactly what I told you not to do.

48
00:06:02,550 --> 00:06:12,420
在这里是故意这样来写的，因为我想使其娇小，简洁，达到可以写在黑板上的规模
That's on purpose in this case, because I want it to be small, compact, fit on the blackboard so you can get the whole thing.

49
00:06:12,420 --> 00:06:15,800
我就不像平时那样使用很多很长的命名了
So I don't want to use long names like I normally use.

50
00:06:15,800 --> 00:06:19,580
就用CAR CDR，很简洁
I want to use CAR-CDR because it's short.

51
00:06:19,580 --> 00:06:20,950
这算是一种权衡
Now, that's a trade-off.

52
00:06:20,950 --> 00:06:23,570
我不希望你们这样来写程序
I don't want you writing programs like this.

53
00:06:23,570 --> 00:06:26,090
这里单纯地想达到一种简洁的效果
This is purely for an effect.

54
00:06:26,090 --> 00:06:31,270
因此你们读起来可能有些费力，我尽量写的清楚
Now, you're going to have to work a little harder to read it, but I'm going to try to make it clear as I'm writing it.

55
00:06:31,270 --> 00:06:51,670
这个求值器比较完整，但是并不完全，我就不写define和assignment的部分了，不是它们不重要，而是出于一些数学上的原因，再说黑板地方也不大
I'm also-- this is a pretty much complete interpreter, but there's going to be room for putting in more things-- I'm going to leave out definition and assignment, just because they are not essential, for a mathematical reason I'll show you later and also they take up more space.

56
00:06:51,670 --> 00:06:54,170
但是，我们怎么做呢？
But, in any case, what do we have to do?

57
00:06:54,170 --> 00:07:02,030
这里需要做一个分配，把表达式分类
We have to do a dispatch which breaks the types of expressions up into particular classes.

58
00:07:02,030 --> 00:07:03,525
这就是现在要做的
So that's what we're going to have here.

59
00:07:03,525 --> 00:07:05,150
这里的表达式应该是什么？
Well, what expressions are there?

60
00:07:05,150 --> 00:07:06,810
我们先来看几种表达式
Let's look at the kinds of expressions.

61
00:07:06,810 --> 00:07:10,420
表达式数字3
We can have things like the numeral three.

62
00:07:10,420 --> 00:07:12,720
要怎么做？
What do I want that to do?

63
00:07:12,720 --> 00:07:17,050
我有很多选择，但是我马上想到，它就应该是数字3
I can make choices, but I think right now, I want it to be a three.

64
00:07:17,050 --> 00:07:18,860
这就是我要的
That's what I want.

65
00:07:18,860 --> 00:07:19,800
这个足够简单
So that's easy enough.

66
00:07:19,800 --> 00:07:31,970
那就意味着，如果表达式是数字，表达式本身就应该是求值结果
That means I want, if the thing is a number, the expression, that I want the expression itself as the answer.

67
00:07:35,420 --> 00:07:39,390
表达式还可能是符号
Now the next possibility is things that we represent as symbols.

68
00:07:39,390 --> 00:07:47,614
比如x n eval number之类
Examples of symbols are things like x, n, eval, number, x.

69
00:07:47,614 --> 00:07:49,630
它们意味着什么？
What do I mean them to be?

70
00:07:49,630 --> 00:07:51,690
它们是一类代表其它事物的事物
Those are things that stand for other things.

71
00:07:51,690 --> 00:07:54,770
也就是我们语言中所谓的变量
Those are the variables of our language.

72
00:07:54,770 --> 00:08:02,930
因此，假如这有一个x，求值结果应该是它代表的那个值，我随便写一个3
And so I want to be able to say, for example, that x, for example, transforms to it's value which might be three.

73
00:08:02,930 --> 00:08:07,920
又假如符号是car
Or I might ask something like car.

74
00:08:07,920 --> 00:08:23,100
这时候来求值，结果应该是一个过程，具体内部可能是机器码或是别的，不过这里我们并不需要关心
I want to have as its value-- be something like some procedure, which I don't know what is inside there, perhaps a machine language code or something like that.

75
00:08:23,100 --> 00:08:24,430
到这是还是相对简单的
So, well, that's easy enough.

76
00:08:24,430 --> 00:08:27,890
我还是想把符号求值的具体部分交给别人来写
I'm going to push that off on someone else.

77
00:08:27,890 --> 00:08:40,159
假如表达式是符号，就执行(lookup exp env)，得到表达式在当前环境的结果
If something is a symbol, if the expression is a symbol, then I want the answer to be the result, looking up the expression in the environment.

78
00:08:46,480 --> 00:08:54,060
这里的环境就相当于一本字典，根据符号名字就可以查找到相应的值
Now the environment is a dictionary which maps the symbol names to their values.

79
00:08:54,060 --> 00:08:56,280
就这么简单
And that's all it is.

80
00:08:56,280 --> 00:08:57,530
env在这里到底是什么？
How it's done?

81
00:08:57,530 --> 00:08:59,760
稍后我们再谈这个
Well, we'll see that later.

82
00:08:59,760 --> 00:09:01,670
其实并不难
It's very easy.

83
00:09:01,670 --> 00:09:04,670
就是一个融合了多种排序的表结构
It's easy to make data structures that are tables of various sorts.

84
00:09:04,670 --> 00:09:10,040
可以简单理解为它就是一个表，lookup过程可以查找这个表
But it's only a table, and this is the access routine for some table.

85
00:09:10,040 --> 00:09:17,430
好的，接下来，下一种可能 -- 表达式可能是一些不是数字的常数，比如'foo
Well, the next thing, another kind of expression-- you have things that are described constants that are not numbers, like 'foo.

86
00:09:20,170 --> 00:09:31,520
这里方便起见，我把它转化为语法上等同的形式(quote foo)
Well, for my convenience, I want to syntactically transform that into a list structure which is, quote foo.

87
00:09:35,140 --> 00:09:48,780
求值器并不处理引号，一个被引的表达式，无论它是什么，都是一个缩写，像是(quote foo)这种形式的缩写
A quoted object, whatever it is, is going to be actually an abbreviation, which is not part of the evaluator but happens somewhere else, an abbreviation for an expression that looks like this.

88
00:09:48,780 --> 00:09:55,615
这样我就可以依据表达式的car来判断表达式的类型了
This way, I can test for the type of the expression as being a quotation by examining the car of the expression.

89
00:09:58,460 --> 00:10:01,650
因此这一部分也不难写
So I'm not going to worry about that in the evaluator.

90
00:10:01,650 --> 00:10:05,540
它之前已经在哪里出现过[此句不确定]
It's happening somewhere earlier in the reader or something.

91
00:10:05,540 --> 00:10:25,140
如果表达式被引，求值结果是，这里(quote foo)的求值结果应该是foo自身
If the expression of the expression is quote, then what I want, I want quote foo to itself evaluate to foo.

92
00:10:25,140 --> 00:10:27,530
一个常量
It's a constant.

93
00:10:27,530 --> 00:10:30,645
也就是说求值结果是它自身
This is just a way of saying that this evaluates to itself.

94
00:10:33,150 --> 00:10:33,660
该怎么来写呢？
What is that?

95
00:10:33,660 --> 00:10:51,290
也就是列表的第二个部分了，应该是列表的CADR，所以这里我就写CADR
That's the second of the list. It's the second element of the list. The second element of the list is it's CADR. So I'm just going to write here, CADR.

96
00:10:51,290 --> 00:10:52,510
表达式还可能是什么类型呢？
What else do we have here?

97
00:10:52,510 --> 00:11:04,160
还有lambda表达式，比如，(lambda (x) (+ x y))
We have lambda expressions, for example, lambda of x plus x y.

98
00:11:04,160 --> 00:11:09,600
这样的话，我就必须得有方法来表示过程，也就是lambda求值的结果
Well, I going have to have some representation for the procedure which is the value of an expression, of a lambda expression.

99
00:11:09,600 --> 00:11:13,030
过程并不是lambda (x)表达式
The procedure here is not the expression lambda x.

100
00:11:13,030 --> 00:11:16,170
表达式只是对过程的文字描述
That's the description of it, the textual description.

101
00:11:16,170 --> 00:11:27,360
相对地，我更希望执行过程的时候还要考虑环境的因素
However, what what I going to expect to see here is something which contains an environment as one of its parts if I'm implementing a lexical language.

102
00:11:27,360 --> 00:11:30,790
所以这里我们需要一些类型标志
And so what I'd like to see is some type flags.

103
00:11:30,790 --> 00:11:39,060
因为之后我们要凭借标志来区分哪些是过程，即lambda和一些原子元素求值的结果
I'm going to have to be able to distinguish procedures later, procedures which were produced by lambdas, from ones that may be primitive.

104
00:11:39,060 --> 00:11:44,935
这里考虑历史因素，我就用closure作为类型标志
And so I'm going to have some flag, which I'll just arbitrarily call closure, just for historical reasons.

105
00:11:47,760 --> 00:11:49,920
现在来看看，哪些部分必不可少
Now, to say what parts of this are important.

106
00:11:49,920 --> 00:11:54,220
我需要形参列表和过程体
I'm going to need to know the bound variable list and the body.

107
00:11:54,220 --> 00:12:03,795
也就是lambda的CDR，最后还有执行环境env
Well, that's the CDR of this, so it's going to be x and plus x y and some environment.

108
00:12:08,170 --> 00:12:18,520
单纯的语言使用者肯定没见过像这样的，它只是内部对过程对象的一种表示方法吧
Now this is not something that users should ever see, this is purely a representation, internally, for a procedure object.

109
00:12:18,520 --> 00:12:26,340
它包含了形参列表，过程体，执行环境，和表示自身为过程类型的标志
It contains a bound variable list, a body, and an environment, and some type tag saying, I am a procedure.

110
00:12:26,340 --> 00:12:28,080
接下来写代码
I'm going to make one now.

111
00:12:28,080 --> 00:13:10,250
如果表达式的CAR是'lambda，求值结果就是(list 'closure (cdr exp) env)
So if the CAR of the expression is quote lambda, then what I'm going to put here is-- I'm going to make a list of closure, the CDR of the procedure description was everything except the lambda, and the current environment.

112
00:13:10,250 --> 00:13:15,190
这样就实现了环境模型中的那些规则
This implements the rule for environments in the environment model.

113
00:13:15,190 --> 00:13:19,210
对于从lambda构建一个过程是必不可少的
It has to do with construction of procedures from lambda expressions.

114
00:13:19,210 --> 00:13:32,240
而且closure里的这个环境就是过程真正执行的时候查找自由变量的地方
The environment that was around at the time the evaluator encountered the lambda expression is the environment where the procedure resulting interprets it's free variables.

115
00:13:34,720 --> 00:13:35,920
所以这里应该有环境env
So that's part of that.

116
00:13:35,920 --> 00:13:39,210
必须把环境作为过程对象的一部分
And so we have to capture that environment as part of the procedure object.

117
00:13:39,210 --> 00:13:41,750
之后我们再来细看环境在其中的作用
And we'll see how that gets used later.

118
00:13:41,750 --> 00:13:54,520
下一种情况，条件表达式，(cond (p1 e1) (p2 e2) ...)
There are also conditional expressions of things like COND of say, p one, e one, p two, e two.

119
00:13:54,520 --> 00:14:03,480
p是谓词，谓词求值结果非真即假，e是表达式，只有在谓词为真的时候才被求值
Where this is a predicate, a predicate is a thing that is either true or false, and the expression to be evaluated if the predicate is true.

120
00:14:03,480 --> 00:14:06,790
如果不介意，我暂时称其为一组子句
A set of clauses, if you will, that's the name for such a thing.

121
00:14:06,790 --> 00:14:09,360
具体的求值过程写在别的地方
So I'm going put that somewhere else.

122
00:14:09,360 --> 00:14:12,420
让别人来考虑具体求值的部分
We're going to worry about that in another piece of code.

123
00:14:12,420 --> 00:14:32,050
这里继续写，如果(car exp)是'cond，然后就求值(cdr exp)
So EQ--  if the CAR of the expression is COND, then I'm going to do nothing more than evaluate the COND, the CDR of the expression.

124
00:14:34,080 --> 00:14:38,380
记得带上环境
That's all the clauses in the environment that I'm given.

125
00:14:41,430 --> 00:14:56,590
好的，还有一种情况，比如(+ x 3)，一个操作符应用于操作数，它并不特殊
Well, there's one more case, arbitrary thing like the sum of x and three, where this is an operator applied to operands, and there's nothing special about it.

126
00:14:56,590 --> 00:14:59,850
就是说，它不属于这里的特殊形式
It's not one of the special cases, the special forms.

127
00:14:59,850 --> 00:15:09,650
上面写的这些都是特殊形式
These are the special forms.

128
00:15:09,650 --> 00:15:14,370
还是再提一下，如果这里用数据导向的方式来写，会更加的专业
And if I were writing here a professional program, again, I would somehow make this data directed.

129
00:15:14,370 --> 00:15:22,360
那样的话这里就不会是一系列的条件判断，数据导向会把这种按条件分配的过程表示的更为优雅
So there wouldn't be a sequence of conditionals here, there'd be a dispatch on some bits if I were trying to do this in a more professional way.

130
00:15:22,360 --> 00:15:26,710
并且，我还可以在不改动代码的情况下添加新的条件判断
So that, in fact, I can add to the thing without changing my program much.

131
00:15:26,710 --> 00:15:31,280
也可能那样会执行的更快，虽然有很多优势，这里我并不考虑那样来写
So, for example, they would run fast, but I'm not worried about that.

132
00:15:31,280 --> 00:15:34,890
现在的目的是把握eval过程的全局
Here we're trying to look at this in its entirety.

133
00:15:34,890 --> 00:15:37,360
好吧，接着写
So it's else.

134
00:15:37,360 --> 00:15:38,560
要怎么做呢？
Well, what do we do?

135
00:15:38,560 --> 00:15:40,965
这个(+ x 3)的例子里，我得做加法
In this case, I have to somehow do an addition.

136
00:15:44,350 --> 00:15:46,565
那样的话我就得清楚 + 到底是什么
Well, I could find out what the plus is.

137
00:15:46,565 --> 00:15:50,550
接着弄清楚 x 和 3 是什么
I have to find out what the x and the three are.

138
00:15:50,550 --> 00:15:58,020
然后再把 + 的结果应用于 x 与 3 的结果
And then I have to apply the result of finding what the plus is to the result of finding out what the x and the three are.

139
00:15:58,020 --> 00:15:59,830
具体来写一下
We'll have a name for that.

140
00:15:59,830 --> 00:16:20,480
(apply (eval (car exp) env)，(car exp)就是操作符的部分
So I'm going to apply the result of evaluating the CAR of the expression-- the car of the expression is the operator-- in the environment given.

141
00:16:20,480 --> 00:16:24,050
执行(eval (car exp) env)就得到操作符的结果
So evaluating the operator gets me the procedure.

142
00:16:24,050 --> 00:16:27,290
我还得求值操作数来得到具体参数
Now I have to evaluate all the operands to get the arguments.

143
00:16:27,290 --> 00:16:38,835
执行evlist来求值操作数
I'll call that EVLIST, the CDR of the operands, of the expression, with respect to the environment.

144
00:16:41,940 --> 00:16:48,070
(evlist (cdr exp) env)，这个evlist稍后细讲
EVLIST will come up later-- EVLIST, apply, COND pair, COND, lambda, define.

145
00:16:50,900 --> 00:16:56,590
你现在看到的就是一个完整的求值器
So that what you are seeing here now is pretty much all there is in the evaluator itself.

146
00:16:56,590 --> 00:17:07,470
它针对表达式的类型分情况处理，表达式可以是一个完整的程序或者简单表达式的组合
It's the case dispatch on the type of the expression with the default being a general application or a combination.

147
00:17:17,520 --> 00:17:20,089
不过我们还有些过程没有被定义
Now there is lots of things we haven't defined yet.

148
00:17:20,089 --> 00:17:21,780
接下来就看这些未定义的部分
Let's just look at them and see what they are.

149
00:17:21,780 --> 00:17:25,480
evcond稍后再说
We're going to have to do this later, evcond.

150
00:17:25,480 --> 00:17:27,579
我得定义apply
We have to write apply.

151
00:17:27,579 --> 00:17:31,790
还有evlist，lookup
We're going to have to write EVLIST. We're going to write LOOKUP.

152
00:17:31,790 --> 00:17:33,430
我看看，没别的了吧？
I think that's everything, isn't there?

153
00:17:33,430 --> 00:17:38,570
剩下的就是一些简单基本的东西了
Everything else is something which is simple, or primitive, or something like that.

154
00:17:38,570 --> 00:17:44,450
当然，这里可以写很多特殊形式，但是对于一个语言来说无疑很糟糕
And, of course, we could many more special forms here, but that would be a bad idea in general in a language.

155
00:17:44,450 --> 00:17:47,690
那会让语言变得很复杂
You make a language very complicated by putting a lot of things in there.

156
00:17:47,690 --> 00:17:54,010
保留字就不该比你能记住几个手指脚指的数目还多
The number of reserve words that should exist in a language should be no more than a person could remember on his fingers and toes.

157
00:17:54,010 --> 00:17:59,410
看到有些语言的保留字有上百个，我都不知道该说什么
And I get very upset with languages which have hundreds of reserve words.

158
00:17:59,410 --> 00:18:00,710
特殊形式也就是所谓定义保留字的地方
But that's where the reserve words go.

159
00:18:04,750 --> 00:18:09,640
好的，接下来，我们来看第二个核心的部分，apply
Well, now let's get to the next part of this, the kernel, apply.

160
00:18:09,640 --> 00:18:11,590
它还做些什么呢？
What else is this doing?

161
00:18:11,590 --> 00:18:26,610
apply主要是将过程应用于实际参数，这里所说的是过程和参数的符号求值的结果，而不是过程和参数的符号
Well, apply's job is to take a procedure and apply it to its arguments after both have been evaluated to come up with a procedure and the arguments rather the operator symbols and the operand symbols, whatever they are-- symbolic expressions.

162
00:18:33,270 --> 00:18:43,280
所以我们定义apply过程，接受两个参数分别代表将应用的过程和这个过程的参数列表
So we will define apply to be a procedure of two arguments, a procedure and arguments.

163
00:18:47,110 --> 00:18:48,080
具体怎么来写呢？
And what does it do?

164
00:18:48,080 --> 00:18:49,720
其实并不复杂
It does nothing very complicated.

165
00:18:49,720 --> 00:18:50,970
分两种情况就够了
It's got two cases.

166
00:18:53,580 --> 00:19:06,930
如果这个过程是基本过程 -- 我不知道这个谓词具体是根据什么来判断的
Either the procedure is primitive--  And I don't know exactly how that is done.

167
00:19:06,930 --> 00:19:18,550
可能原理就像我们用'closure标志来表示组合结构的类型一样，我想可能是这样
It's possible there's some type information just like we made closure for, here, being the description of the type of a compound thing-- probably so.

168
00:19:18,550 --> 00:19:27,350
但是深究这个谓词并不必要，事实上你可能已经知道或是演绎过，我们并不需要任何基本过程
But it is not essential how that works, and, in fact, it turns out, as you probably know or have deduced, that you don't need any primitives anyway.

169
00:19:27,350 --> 00:19:33,190
我们没有基本过程只用lambda也照样可以正常计算
You can compute anything without them because some of the lambda that I've been playing with.

170
00:19:33,190 --> 00:19:34,750
但是有它们总归方便点儿
But it's nice to have them.

171
00:19:34,750 --> 00:19:38,060
接下来就是精彩的部分了，我先不细讲
So here we're going to do some magic which I'm not going to explain.

172
00:19:38,060 --> 00:19:42,860
转到机器语言，执行apply-primop
Go to machine language, apply primop.

173
00:19:42,860 --> 00:19:44,850
加法就是这样运算的
Here's how it adds.

174
00:19:44,850 --> 00:19:46,100
执行加法指令
Execute an add instruction.

175
00:19:50,360 --> 00:19:54,940
然而一门语言有趣的部分在于谓词是如何组合在一起的
However, the interesting part of a language is the glue by which the predicates are glued together.

176
00:19:54,940 --> 00:19:56,910
我们接着往下看
So let's look at that.

177
00:19:56,910 --> 00:20:07,620
另一种可能就是这是一个求值lambda得到的过程，一个复合过程
Well, the other possibility is that this is a compound made up by executing a lambda expression, this is a compound procedure.

178
00:20:07,620 --> 00:20:10,110
我们检测它的类型标志
Well, we'll check its type.

179
00:20:10,110 --> 00:20:24,500
如果是'closure，我就得求值这个过程体
If it is closure, if it's one of those, then I have to do an eval of the body.

180
00:20:24,500 --> 00:20:44,260
这里我要将过程应用于其参数，也就是 将形参与实参绑定，添加入过程的运行环境，然后在此环境下对过程求值
The way I do this, the way I deal with this at all, is the way I evaluate the application of a procedure to its arguments, is by evaluating the body of the procedure in the environment resulting from extending the environment of the procedure with the bindings of the formal parameters of the procedure to the arguments that were passed to it.

181
00:20:47,030 --> 00:20:48,280
这句话很长
That was a long sentence.

182
00:20:51,130 --> 00:20:52,822
但是描述的内容足够简单
Well that's easy enough.

183
00:20:52,822 --> 00:20:56,214
一会儿可能会出现许多CAR CDR CADR ...
Now here's going to be a lot of CAR-CDRing.

184
00:20:56,214 --> 00:20:59,400
现在我先要得到过程体
I have to get the body of the procedure.

185
00:20:59,400 --> 00:21:02,960
过程体如何取出呢？
Where's the body of the procedure in here?

186
00:21:02,960 --> 00:21:06,130
这一部分是CAR，剩下的是CDR部分
Well here's the CAR, here's the CDR is the whole rest of this.

187
00:21:06,130 --> 00:21:13,200
然后这里就是CADR，我看看，过程体就在整个过程第二部分的第二部分
So here's the CADR. And so I see, what I have here is the body is the second element of the second element of the procedure.

188
00:21:13,200 --> 00:21:19,170
也就是CADR的CADR，或者简写为CADADR
So it's the CADR of the CADR or the CADADR.

189
00:21:19,170 --> 00:21:27,495
这里取整个过程的CADADR
It's the C-A-D-A-D-R, CADADR of the procedure.

190
00:21:30,260 --> 00:21:43,500
为了在参数绑定后的新环境之中执行这个过程，我还得取到过程的形式参数，形参怎么取呢？
To evaluate the body in the result of binding that's making up more environment, well I need the formal parameters of the of the procedure, what is that?

191
00:21:43,500 --> 00:21:48,780
就是CDR的CAR，很混乱不是吗？
That's the CAR of the CDR. It's horrible isn't it?

192
00:21:52,440 --> 00:21:55,440
过程的CADR
--of the procedure.

193
00:21:55,440 --> 00:22:04,540
绑定形参实参添加进环境中，环境也是随着过程被传递进来
Bind that to the arguments that were passed in the environment, which is passed also as part of the procedure.

194
00:22:04,540 --> 00:22:16,315
也就是CDR的CDR的CAR，过程的CADDR
Well, that's the CAR of the CDR of the CDR of this, CADDR, of the procedure.

195
00:22:20,290 --> 00:22:39,000
(bind (caadr proc) args (caddr proc)) 如果我有点强迫症，这里就会非常谨慎，我会在后面多加一个判断来处理错误情况，比如你对参数应用的是一个过程吗？
Bind, eval, pair, COND, lamda, define-- Now, of course, if I were being really a neat character, and I was being very careful, I would actually put an extra case here for checking for certain errors like, did you try to apply one to an argument?

196
00:22:39,000 --> 00:22:42,570
如果不是，这里就是未定义的过程类型
You get a undefined procedure type.

197
00:22:42,570 --> 00:22:45,500
这里保持原样
So I may as well do that anyway.

198
00:22:45,500 --> 00:22:57,610
下面加上else，如果出现错误情况
--else, some sort of error, like that.

199
00:22:57,610 --> 00:23:10,750
插个话，目前很多专业用途的系统中，内部的结构也与这类似，主要是分条件判断，分配处理不同情况
Now, of course, again, in some sort of more real system, written for professional reasons, this would be written with a case analysis done by some sort of dispatch.

200
00:23:10,750 --> 00:23:16,220
回到这里，我可能还会添加新的条件判断，比如这是编译过的代码吗？
Over here, I would probably have other cases like, is this compiled code?

201
00:23:16,220 --> 00:23:17,020
这很重要
It's very important.

202
00:23:17,020 --> 00:23:25,880
这样的话我就可以区分一段代码是我通过解释代码对lambda求值得到的结果还是通过编译器编译代码得到的结果
I might have distinguished the kind of code that's produced by a directly evaluating a lambda in interpretation from code that was produced by somebody's compiler or something like that.

203
00:23:25,880 --> 00:23:27,230
之后再讨论这个话题
And we'll talk about that later.

204
00:23:27,230 --> 00:23:30,510
又或许是我必须要执行的一段Frotran代码
Or is this a piece Fortran program I have to go off and execute.

205
00:23:30,510 --> 00:23:32,920
如果这种可能发生了，记住，就在这里把情况加进去
It's a perfectly possible thing, at this point, to do that.

206
00:23:32,920 --> 00:23:44,360
事实上，我在写这个求值器的时候，有一个内在的假定即这是一种Lisp语言的实现方式，因为我大量使用了CAR CDR之类
In fact, in this concrete syntax evaluator I'm writing here, there's an assumption built in that this is Lisp, because I'm using CARs and CDRs.

207
00:23:44,360 --> 00:23:46,750
CAR意味着操作符，CDR意味着操作数
CAR means the operator, and CDR means the operand.

208
00:23:46,750 --> 00:23:56,160
在这种情形下，就可以想像已经存在了一个抽象的语法解析器，通过它我们就可以取到操作符操作数等等
In the text, there is an abstract syntax evaluator for which these could be-- these are given abstract names like operator, and operand, and all these other things are like that.

209
00:23:56,160 --> 00:24:01,570
在清楚了这个假定之后，你完全可以用ALGOL再来实现这个求值器
And, in that case, you could reprogram it to be ALGOL with no problem.

210
00:24:03,760 --> 00:24:08,660
写完apply之后，发现又引入了一些未定义的过程
Well, here we have added another couple of things that we haven't defined.

211
00:24:10,810 --> 00:24:15,050
我先不操心这两个，下面这个BIND还是挺有意思的
I don't think I'll worry about these at all, however, this one will be interesting later.

212
00:24:17,930 --> 00:24:20,550
现在我们来快速过一遍，结束这一部分
Let's just proceed through this and get it done.

213
00:24:20,550 --> 00:24:23,060
只剩下两块黑板了，因此它们加起来代码并不多
There's only two more blackboards so it can't be very long.

214
00:24:27,056 --> 00:24:30,070
不过代码还得精心剪裁一番才可以全部放的进黑板
It's carefully tailored to exactly fit.

215
00:24:30,070 --> 00:24:30,980
嗯，还剩下点什么？
Well, what do we have left?

216
00:24:30,980 --> 00:24:33,730
我们得定义那边的evlist
We have to define EVLIST, which is over here.

217
00:24:33,730 --> 00:24:44,240
evlist不过是遍历一串操作数生成实际参数
And EVLIST is nothing more than a map down a bunch of operands producing arguments.

218
00:24:44,240 --> 00:24:45,820
但是还是写出来看看
But I'm going to write it out.

219
00:24:45,820 --> 00:24:53,610
还要把它写出来是为了一个神秘的原因，就是我想要求值器简单到可以求值自身
And one of the reasons I'm going to write this out is for a mystical reason, which is I want to make this evaluator so simple that it can understand itself.

220
00:24:56,450 --> 00:25:00,230
这一点还是有点重要的
I'm going to really worry about that a little bit.

221
00:25:00,230 --> 00:25:02,850
现在我就把它完全写在这里
So let's write it out completely.

222
00:25:02,850 --> 00:25:06,080
看，我完全不用操心是否传递入的参数是一个过程
See, I don't want to worry about whether or not the thing can pass functional arguments.

223
00:25:06,080 --> 00:25:08,980
求值器并不会真正使用到它们
The value evaluator is not going to use them.

224
00:25:08,980 --> 00:25:10,880
求值器也不会生成一个是过程的值
The evaluator is not going to produce functional values.

225
00:25:10,880 --> 00:25:24,070
因此，如果有一个不同的，和scheme非常相似的语言，它也可以像scheme一样求值比如使用过程参数，返回过程为值，允许过程作为数据
So even if there were a different, alternative language that were very close to this, this evaluates a complex language like Scheme which does allow procedural arguments, procedural values, and procedural data.

226
00:25:24,070 --> 00:25:31,580
值得注意的是，如果我对ALGOL语言求值，也可以使用这个求值器，尽管ALGOL并不允许过程作为返回值
But even if I were evaluating ALGOL, which doesn't allow procedural values, I could use this evaluator.

227
00:25:31,580 --> 00:25:34,050
因为这个解释器并没有对这些事情做过什么假定
And this evaluator is not making any assumptions about that.

228
00:25:34,050 --> 00:25:40,640
事实上，如果被求值的语言真的被限定了不能做这做那，没关系，只能算它们没有使用到这些高级功能
And, in fact, if this value were to be restricted to not being able to that, it wouldn't matter, because it doesn't use any of those clever things.

229
00:25:40,640 --> 00:25:44,070
这也是为什么我可以将求值器组织的如此简单
So that's why I'm arranging this to be super simple.

230
00:25:44,070 --> 00:25:47,810
这几乎是所有现存语言求值器的核心
This is sort of the kernel of all possible language evaluators.

231
00:25:47,810 --> 00:25:49,420
回到这个定义上来
How about that?

232
00:25:49,420 --> 00:25:53,820
evlise，它是什么呢？
Evlist--  well, what is it?

233
00:25:53,820 --> 00:26:33,260
这个过程也有两个参数，l和env，l是所有参数的列表，如果l为空，就返回一个空列表，否则就先在环境中求值第一个参数
It's the procedure of two arguments, l and an environment, where l is a list such that if the list of arguments is the empty list, then the result is the empty list. Otherwise, I want to cons up the result of evaluating the CAR of the list of operands in the environment.

234
00:26:33,260 --> 00:26:50,130
求值第一个参数之后，我想要在当前环境递归evlist求值CDR部分，和第一个求值结果连接为列表
So I want the first operand evaluated, and I'm going to make a list of the results by CONSing that onto the result of this EVLISTing as a CDR recursion, the CDR of the list relative to the same environment.

235
00:26:53,350 --> 00:27:03,620
闭合括号evlist cons else cond lambda define，还有一个过程我也想写在这里
Evlist, cons, else, COND, lambda, define--  And I have one more that I want to put on the blackboard.

236
00:27:03,620 --> 00:27:05,470
它是整件事的关键部分
It's the essence of this whole thing.

237
00:27:05,470 --> 00:27:08,130
还要深入一个层次
And there's some sort of next layer down.

238
00:27:14,540 --> 00:27:18,880
条件式 -- 在剩下的过程中，条件式是唯一一个非常重要的过程
Conditionals-- conditionals are the only thing left that are sort of substantial.

239
00:27:18,880 --> 00:27:25,530
除了这个，我们还有lookup bind的过程要讨论
Then below that, we have to worry about things like lookup and bind, and we'll look at that in a second.

240
00:27:25,530 --> 00:27:31,600
但是在这个讨论事情相对具体的层次上，下一个重要的事就是你如何处理条件式
But of the substantial stuff at this level of detail, next important thing is how you deal with conditionals.

241
00:27:31,600 --> 00:27:33,330
这里，条件式具体要怎么写？
Well, how do we have a conditional thing?

242
00:27:37,670 --> 00:27:44,720
它是一个过程，参数是一串子句和环境
It's a procedure of a set of clauses and an environment.

243
00:27:47,340 --> 00:27:49,820
它做些什么呢？
And what does it do?

244
00:27:49,820 --> 00:28:04,520
如果这里没有子句，我得有一个返回值
It says, if I've no more clauses, well, I have to give this a value.

245
00:28:04,520 --> 00:28:06,540
可能是一个错误
It could be that it was an error.

246
00:28:06,540 --> 00:28:10,060
假设它遍历完了所有条件，都没有符合的，接下来发生什么还真不好说
Supposing it run off the end of a conditional, it's pretty arbitrary.

247
00:28:10,060 --> 00:28:13,650
这完全取决于我，作为一个程序员可以选择应该怎么处理
It's up to me as programmer to choose what I want to happen.

248
00:28:13,650 --> 00:28:20,100
对我来说实在太方便了，现在我写一个空列表作为返回值，完全无碍
It's convenient for me, right now, to write down that this has a value which is the empty list, doesn't matter.

249
00:28:20,100 --> 00:28:23,110
如是有些人倾向于错误检测，他们可以在这里写点别的
For error checking, some people might prefer something else.

250
00:28:23,110 --> 00:28:25,570
下面的更有意思
But the interesting things are the following ones.

251
00:28:25,570 --> 00:28:40,265
这里有一系列的子句，每个子句都是一个列表，假如我遇到一个else子句，子句的谓词部分应该是子句的CAAR
If I've got an else clause--  You see, if I have a list of clauses, then each clause is a list. And so the predicate part is the CAAR of the clauses.

252
00:28:43,560 --> 00:28:51,090
所有子句中第一个子句的第一个部分
It's the CAR, which is the first part of the first clause in the list of clauses.

253
00:28:51,090 --> 00:28:59,800
如果是else，就意味着整个条件式的结果就是执行这个else子句中表达式的结果
If it's an else, then it means I want my result of the conditional to be the result of evaluating the matching expression.

254
00:28:59,800 --> 00:29:22,195
所以接着对CADAR部分在当前环境下求值，就是第一个子句的第二个部分
So I eval the CADAR. So this is the first clause, the second element of it, CADAR-- CADAR of a CAR-- of the clauses, with respect to the environment.

255
00:29:26,620 --> 00:29:29,630
下一种可能性更有意思
Now the next possibility is more interesting.

256
00:29:29,630 --> 00:29:44,360
如果不是else子句，而且子句的谓词结果是false -- 我们接着写
If it's false, if the first predicate in the predicate list is not an else, and it's not false, if it's not the word else, and if it's not a false thing-- Let's write down what it is if it's a false thing.

257
00:29:44,360 --> 00:30:04,180
在当前环境下求值子句的谓词部分，如果是false，这就意味着还得接着判断下面的子句
If the result of evaluating the first predicate, the clauses--  respect the environment, if that evaluation yields false, then it means, I want to look at the next clause.

258
00:30:04,180 --> 00:30:05,990
第一个就扔掉不管了
So I want to discard the first one.

259
00:30:05,990 --> 00:30:16,700
我们还得在当前环境下，继续递归evcond循环子句的CDR部分
So we just go around loop, evcond, the CDR of the clauses relative to that environment.

260
00:30:21,240 --> 00:30:41,960
又或者，我遇到了一个真子句，即求值子句的谓词部分结果为真
And otherwise, I had a true clause, in which case, what I want is to evaluate the CADAR of the clauses relative to that environment.

261
00:30:48,200 --> 00:30:51,210
条件式就要到尾声了
Boy, it's almost done.

262
00:30:51,210 --> 00:30:53,730
非常近了
It's quite close to done.

263
00:30:53,730 --> 00:30:56,210
把这一部分结束
I think we're going to finish this part off.

264
00:30:56,210 --> 00:31:01,220
回到全局再看一遍求值器，你已经对它有一个完整的把握了
So just buzzing through this evaluator, but so far you're seeing almost everything.

265
00:31:01,220 --> 00:31:04,040
接着来看一张幻灯片
Let's look at the next transparency here.

266
00:31:08,980 --> 00:31:11,980
bind的定义
Here is bind.

267
00:31:11,980 --> 00:31:15,460
bind在环境中添加新的绑定
Bind is for making more table.

268
00:31:15,460 --> 00:31:22,800
我们这里先依照环境的数据结构构造一个frame
And what we are going to do here is make a-- we're going to make a no-frame for an environment structure.

269
00:31:22,800 --> 00:31:28,080
环境就是由一系列的frame组成的
The environment structure is going to be represented as a list of frames.

270
00:31:28,080 --> 00:31:49,690
所以对于环境来说，我把一个新的frame和环境连接在一起就构成了新的环境，新的frame是由pair-up对形参与实参进行绑定得到的结果
So given an existing environment structure, I'm going to make a new environment structure by consing a new frame onto the existing environment structure, where the new frame consists of the result of pairing up the variables, which are the bound variables of the procedure I'm applying, to the values which are the arguments that were passed that procedure.

271
00:31:49,690 --> 00:31:58,391
环境也就是一个列表而已，构造一个新frame元素，添加入列表就构成了新环境
This is just making a list, adding a new element to our list of frames, which is an environment structure, to make a new environment.

272
00:31:58,391 --> 00:32:01,540
其实pair-up非常简单
Where pair-up is very simple.

273
00:32:01,540 --> 00:32:09,720
对于一个变量的列表和一个值的列表，两个列表中元素个数应该相同
Pair-up is nothing more than if I have a list of variables and a list of values, well, if I run out of variables and if I run out of values, everything's OK.

274
00:32:09,720 --> 00:32:12,990
如果不同，就是实参的数目不对了
Otherwise, I've given too many arguments.

275
00:32:12,990 --> 00:32:18,560
假如值遍历完了，还剩下有变量，说明实参给少了
If I've not run out of variables, but I've run out of values, that I have too few arguments.

276
00:32:18,560 --> 00:32:42,950
如果没有遇到错误，即变量和值是可以对上号的，就应该用第一个变量和第一个值构造一个序对，和pair-up对两列表CDR的求值结果相连接
And in the general case, where I don't have any errors, and I'm not done, then I really am just adding a new pair of the first variable with the first argument, the first value, onto a list resulting from pairing-up the rest of the variables with the rest of the values.

277
00:32:42,950 --> 00:32:46,620
lookup也简单
Lookup is of course equally simple.

278
00:32:46,620 --> 00:32:54,650
假使我要在环境中查找一个变量，环境是空的，这个变量就是未绑定的
If I have to look up a symbol in an environment, well, if the environment is empty, then I've got an unbound variable.

279
00:32:54,650 --> 00:33:05,930
否则，就调用一个新的过程来从环境的第一个frame开始查找变量
Otherwise, what I'm going to do is use a special pair list lookup procedure, which we'll have very shortly, of the symbol in the first frame of the environment.

280
00:33:05,930 --> 00:33:09,200
因为环境不是空的，所以一定有第一个frame
Since I know the environment is not empty, it must have a first frame.

281
00:33:09,200 --> 00:33:11,140
所以我就在第一个frame中查找
So I lookup the symbol in the first frame.

282
00:33:11,140 --> 00:33:15,150
找到的序对也就是这里的vcell
That becomes the value cell here.

283
00:33:15,150 --> 00:33:23,720
如果vcell为空，我就需要在环境中剩下的frame中查找
And then, if the value cell is empty, if there is no such value cell, then I have to continue and look at the rest of the frames.

284
00:33:23,720 --> 00:33:25,990
vcell为空意味着当前frame没有找到变量
It means there was nothing found there.

285
00:33:25,990 --> 00:33:32,010
如果没有找到，assq就会返回空值
So that's a property of ASSQ is it returns emptiness if it doesn't find something.

286
00:33:32,010 --> 00:33:41,050
如果找到了，值就应该是vcell的CDR部分，因为vcell是一个变量和值的序对
but if it did find something, then I'm going to use the CDR of the value cell here, which is the thing that was the pair consisting of the variable and the value.

287
00:33:41,050 --> 00:33:45,000
因此CDR就取到了值
So the CDR of it is the value part.

288
00:33:45,000 --> 00:33:47,970
assq这个过程你们之前见过
Finally, ASSQ is something you've probably seen already.

289
00:33:47,970 --> 00:33:53,760
assq取一个符号和一系列序对的列表，如果列表为空，变返回'()
ASSQ takes a symbol and a list of pairs, and if the list is empty, it's empty.

290
00:33:53,760 --> 00:33:59,820
如果符号等于列表中第一个 -- 这里写错了
If the symbol is the first thing in the list-- That's an error.

291
00:33:59,820 --> 00:34:04,160
应该是CAAR，大家注意了
That should be CAAR, C-A-A-R. Everybody note that.

292
00:34:07,730 --> 00:34:08,980
就是这里，看见了吗？
Right there, OK?

293
00:34:13,121 --> 00:34:35,190
如果符号等于列表的CAAR，然后就取列表的第一个序对元素作为返回值，这就是我们要找的绑定；如果符号与之不相同，就在剩下的列表中继续查找。很抱歉刚才幻灯片上面写错了
And in any case, if the symbol is the CAAR of the A list, then I want the first, the first pair, in the A list. So, in other words, if this is the key matching the right entry, otherwise, I want to look up that symbol in the rest. Sorry for producing a bug, bugs appear.

294
00:34:35,190 --> 00:34:39,639
到现在为止，你们也已看到了全貌
Well, in any case, you're pretty much seeing the whole thing now.

295
00:34:41,880 --> 00:34:49,600
虽然用很难看的编程方式书写出来，但是仍然不能掩盖它的美丽与优雅，这正是语言的核心所在
It's a very beautiful thing, even though it's written in an ugly style, being the kernel of every language.

296
00:34:49,600 --> 00:34:51,460
这样优美的程序，我们可以多看一会儿[骗人啊，说好的只写一黑板呢，又刷出N张幻灯片啊]
I suggest that we just-- let's look at it for a while.

297
00:34:56,749 --> 00:35:49,750
[MUSIC PLAYING]
[MUSIC PLAYING]

298
00:35:49,750 --> 00:35:51,000
大家有什么问题吗？
Are there any questions?

299
00:36:01,180 --> 00:36:04,044
没有的话就休息一会儿吧
Alright, I suppose it's time to take a small break then.

300
00:36:04,044 --> 00:36:56,780
[MUSIC PLAYING]
[MUSIC PLAYING]

301
00:36:56,780 --> 00:37:03,470
这一节我们用一个实例来理解一下求值器的运作过程
OK, now we're just going to do a little bit of practice understanding what it is we've just shown you.

302
00:37:03,470 --> 00:37:11,500
我们根据求值器的工作过程，手写出解释器中的代换过程
What we're going to do is go through, in detail, an evaluation by informally substituting through the interpreter.

303
00:37:11,500 --> 00:37:25,330
因为这个求值器的并没有赋值与定义的实现，所以我们只管放心的代换，不用担心任何副作用
And since we have no assignments or definitions in this interpreter, we have no possible side effects, and so the we can do substitution with impunity and not worry about results.

304
00:37:25,330 --> 00:37:30,690
我举一个特别点儿的例子吧
So the particular problem I'd like to look at is it an interesting one.

305
00:37:30,690 --> 00:37:59,890
(eval '(((lambda(x) (lambda(y) (+ x y))) 3) 4) <e0>)
It's the evaluation of quote, open, open, open, lambda of x, lambda of y plus x y, lambda, lambda, applied to three, applied to four, in some global environment which I'll call e0.

306
00:38:04,930 --> 00:38:14,300
一个参数为x的过程，生成一个参数为y的过程，其中运算x + y
So what we have here is a procedure of one argument x, which produces as its value a procedure of one argument y, which adds x to y.

307
00:38:14,300 --> 00:38:17,960
外层的这个过程应用于数字3
We are applying the procedure of one argument x to three.

308
00:38:17,960 --> 00:38:21,400
所以x应该是3
So x should become three.

309
00:38:21,400 --> 00:38:26,167
生成的结果应该是一个参数为y的过程，应用于数字4
And the result of that should be procedure of one argument y, which will then apply to 4.

310
00:38:28,910 --> 00:38:34,790
然后要做的也很简单，得到x与y的和
And there is a very simple case, they will then add those results.

311
00:38:34,790 --> 00:38:37,660
具体做之前，先来构造环境
And now in order to do that, I want to make a very simple environment model.

312
00:38:37,660 --> 00:38:44,460
我相信你们对于环境已经了然于胸
And at this point, you should already have in your mind the environments that this produces.

313
00:38:44,460 --> 00:38:56,740
我们从全局环境开始，称之为e0
But we're going to start out with a global environment, which I'll call e0, which is that.

314
00:38:56,740 --> 00:39:31,270
里面应该有+、*的过程定义 -- 我这里用希腊字母来表示过程对象，有没有很好玩儿 -- 还有 - / CAR CDR CONS EQ?等等，所有你能想到的基本过程都在这里
And it's going to have in it things, definitions for plus, and times, and-- using Greek letters, isn't that interesting, for the objects-- and minus, and quotient, and CAR, and CDR, and CONS, and EQ, and everything else you might imagine in a global environment.

315
00:39:31,270 --> 00:39:39,220
每个符号都有一个过程对象，由机器底层实现的，这就是环境e0
It's got something there for each of those things, something the machine is born with, that's e0.

316
00:39:39,220 --> 00:39:42,940
这对求值意味着什么呢？
Now what does it mean to do this evaluation?

317
00:39:42,940 --> 00:39:48,670
现在我们开始求值这个例子，从特殊形式开始查找，第一，这不是一个数字
Well, we go through the set of special forms. First of all, this is not a number.

318
00:39:48,670 --> 00:39:50,380
也不是符号
This is not a symbol.

319
00:39:53,210 --> 00:39:56,520
这不是一个引用表达式
Gee, it's not a quoted expression.

320
00:39:56,520 --> 00:40:00,600
这其实是一个被引用的表达式，但不是我们所关注的那种 引用表达式
This is a quoted expression, but that's not what I interested in.

321
00:40:00,600 --> 00:40:05,890
问题在于，是否被引的就一定是引用表达式？
The question is, whether or not the thing which is quoted is quoted expression?

322
00:40:05,890 --> 00:40:07,960
现在求值这个表达式
I'm evaluating an expression.

323
00:40:07,960 --> 00:40:11,410
可以理解为 ' 说明这是一个特殊的表达式
This just says it's this particular expression.

324
00:40:11,410 --> 00:40:12,660
并非是引用表达式
This is not a quoted expression.

325
00:40:15,230 --> 00:40:19,120
继续我们对特殊形式的判断中来，表达式也不以lambda开头
It's not a thing that begins with lambda.

326
00:40:19,120 --> 00:40:22,030
也不以cond开头
It's not a thing that begins with COND.

327
00:40:22,030 --> 00:40:26,310
因此它不在特殊形式之列，它属于操作符应用于操作数之类
Therefore, it's an application of its of an operated operands.

328
00:40:26,310 --> 00:40:28,570
这是一个组合式
It's a combination.

329
00:40:28,570 --> 00:40:36,480
这一部分是它的操作符，这里是操作数
The combination thus has this as the operator and this is the operands.

330
00:40:40,130 --> 00:41:24,450
根据eval的规则，变换成为(apply (eval '((lambda(x) (lambda(y) (+ x y))) 3) <e0>) (evlist '(4) <e0>)
Well, that means that what I'm going to do is transform this into apply of eval, of quote, open, open lambda of x, lambda of y-- I'm evaluating the operator-- plus x y, in the environment, also e0, with the operands that I'm going to apply this to, the arguments being the result of EVLIST, the list containing four, fin e0.

331
00:41:29,010 --> 00:41:36,840
我把e0写的很特别是来强调它是环境的身份
I'm using this funny notation here for e0 because this should be that environment.

332
00:41:36,840 --> 00:41:39,890
我无法为它命名，因为命名需要其它环境
I haven't a name for it, because I have no environment to name it in.

333
00:41:41,960 --> 00:41:47,730
这些就是引用表达式的表示形式
So this is just a representation of what would be a quoted expression, if you will.

334
00:41:47,730 --> 00:41:53,040
环境是那样来表示的
The data structure, which is the environment, goes there.

335
00:41:53,040 --> 00:41:55,850
好的，经过变换就成了这样
Well, that's what we're seeing here.

336
00:41:55,850 --> 00:41:59,610
为了执行apply，我得先执行eval和evlist
Well in order to do this, I have to do this, and I have to do that.

337
00:41:59,610 --> 00:42:03,770
evlist简单点，我们先计算这个吧
Well this one's easy, so why don't we do that one first.

338
00:42:03,770 --> 00:42:09,520
上面的一行复制下来
This turns into apply of eval-- just copying something now.

339
00:42:09,520 --> 00:42:11,000
代换的过程中我们得重复不少笔墨
Most of the substitution rule is copying.

340
00:42:18,530 --> 00:42:23,350
抄写的时候我就不说什么了，这样快一点儿
So I'm going to not say the words when I copy, because it's faster.

341
00:42:26,100 --> 00:42:48,910
下面evlist的部分就代换成为 (cons (eval '4 <e0>) (evlist '() <e0>))
And then the EVLIST is going to turn into a cons, of eval, of four, in e0--  because it was not an empty list-- onto the result of EVLISTing, on the empty list, in e0.

342
00:42:52,580 --> 00:42:55,800
步骤开始有点乏味，我开始想略过一点了
And I'm going to start leaving out steps soon, because it's going to get boring.

343
00:42:59,870 --> 00:43:20,240
上面的再抄下来
But this is basically the same thing as apply, of eval--  I'm going to keep doing this-- the lambda of x, the lambda of y, plus xy, 3, close, e0.

344
00:43:20,240 --> 00:43:21,490
一字不差吧
I'm a pretty good machine.

345
00:43:24,690 --> 00:43:28,790
到下面的eval，4是一个数字
Well, eval of four, that's meets the question, is it a number.

346
00:43:28,790 --> 00:43:35,280
4求值出来还是4
So that's cons, cons of 4.

347
00:43:35,280 --> 00:43:39,240
evlist这里参数是空列表，结果相应也是空列表
And EVLIST of the empty list is the empty list, so that's this.

348
00:43:43,270 --> 00:43:48,710
一起代换过来，就是(cons 4 '())
And that's very simple to understand, because that means the list containing four itself.

349
00:43:48,710 --> 00:44:13,940
上面的再抄下来，下面的(cons 4 '())就是'(4)
So this is nothing more than apply of eval, quote, open, open, lambda of x, lambda of y, plus x y, three applied to, e0, applied to the list four-- bang.

350
00:44:13,940 --> 00:44:15,190
变换结果就是这样
So that's that step.

351
00:44:18,100 --> 00:44:20,360
我们来看下一个有趣的部分
Now let's look at the next, more interesting thing.

352
00:44:20,360 --> 00:44:23,070
这一行怎么来变换？
What do I do to evaluate that?

353
00:44:23,070 --> 00:44:29,460
变换这一行之前我得先变换eval这部分
Evaluating this means I have to evaluate-- Well, it's not.

354
00:44:29,460 --> 00:44:31,680
这一部分的表达式也属于操作符应用操作数的类型
It's nothing but an application.

355
00:44:31,680 --> 00:44:33,570
也不属于特殊形式
It's not one of the special things.

356
00:44:33,570 --> 00:44:46,570
操作符是这一大部分，应用于操作数，整体是一个组合式
If the application of this operator, which we see here-- here's the operator-- applied to this operands, that combination.

357
00:44:46,570 --> 00:44:52,370
我们很清楚变换的规则，它就在eval内部条件式的最后
But we know how to do that, because that's the last case of the conditional.

358
00:44:52,370 --> 00:45:01,160
变换这一部分，就大概像(apply (eval operator) (evlist operands))这样
So substituting in for this evaluation, it's apply of eval of the operator in the EVLIST of the operands.

359
00:45:01,160 --> 00:45:25,350
我们接着写，(apply (apply (eval '(lambda(x) (lambda(y) (+ x y))) <e0>)
Well, it's apply, of apply, of eval, of quote, open, lambda of x, lambda of y, plus x y, lambda, lambda, in environment e0.

360
00:45:30,520 --> 00:45:35,230
操作数这里的变换我就直接写结果了，因为和前面是一样的
I'm going to short circuit the evaluation of the operands , because they're the same as they were before.

361
00:45:35,230 --> 00:45:39,330
过程应用于列表'(3)，再应用于'(4)
I got a list containing three, apply that, and apply that to four.

362
00:45:42,780 --> 00:45:44,410
我们接着看
Well let's see.

363
00:45:44,410 --> 00:45:49,450
求值lambda表达式生成一个过程对象
Eval of a lambda expression produces a procedure object.

364
00:45:52,030 --> 00:46:12,130
继续变换，(apply (apply '(closure ((x) (lambda(y) (+ x y))))
So this is apply, of apply, of the procedure object closure, which contains the body of the procedure, x, which is lambda-- which binds x [UNINTELLIGIBLE]

365
00:46:12,130 --> 00:46:20,630
这个过程内部返回一个形参为y的过程，对x和y求和
the internals of the body, it returns the procedure of one argument y, which adds x to y.

366
00:46:23,210 --> 00:46:30,340
还要记得环境e0，因为在环境下求值才有意义
Environment e0 is now captured in it, because this was evaluated with respect to e0.

367
00:46:30,340 --> 00:46:33,040
e0现在也是closure对象的一部分了
e0 is part now of the closure object.

368
00:46:33,040 --> 00:46:41,300
应用予'(3)，再应用于'(4)
Apply that to open, three, close, apply, to open, 4, close, apply.

369
00:46:47,390 --> 00:46:57,150
这样一步步的变换过来，现在构造了一个过程对象，并且包含了环境e0
So going from this step to this step meant that I made up a procedure object which captured in it e0 as part of the procedure object.

370
00:46:57,150 --> 00:46:58,620
现在是过程应用参数求值的时候了
Now, we're going to pass those to apply.

371
00:46:58,620 --> 00:47:02,710
我们得把过程应用于实际参数
We have to apply this procedure to that set of arguments.

372
00:47:02,710 --> 00:47:07,380
这里的过程并不是基本过程
Well, but that procedure is not primitive.

373
00:47:07,380 --> 00:47:13,710
事实上看到标志'closure就已经知道这不是基本过程了，而且这里我们还需要进行参数绑定
It's, in fact, a thing which has got the tag closure, and, therefore, what we have to do is do a bind.

374
00:47:13,710 --> 00:47:15,830
必须要绑定
We have to bind.

375
00:47:15,830 --> 00:47:28,230
这里构造一个新环境，父环境是e0
A new environment is made at this point, which has as its parent environment the one over here, e0, that environment.

376
00:47:30,320 --> 00:47:31,570
命名这个环境为e1
And we'll call this one, e1.

377
00:47:34,620 --> 00:47:36,040
这里要绑定些什么呢？
Now what's bound in there?

378
00:47:36,040 --> 00:47:38,620
变量x绑定为值3
x is bound to three.

379
00:47:38,620 --> 00:47:41,480
这里写x=3
So I have x equal three.

380
00:47:41,480 --> 00:47:42,730
这样就行
That's what's in there.

381
00:47:44,940 --> 00:47:46,240
新环境叫e1
And we'll call that e1.

382
00:47:46,240 --> 00:48:00,290
这样的话，里面的过程，即(lambda(y) (+ x y))就应该在e1的环境下来求值了
So what this transforms into is an eval of the body of this, which is this, the body of that procedure, in the environment that you just saw.

383
00:48:00,290 --> 00:48:16,520
即 (apply (eval '(lambda(y) (+ x y)) <e1>)
So that's an apply, of eval, quote, open, lambda of y, plus x y-- the body--  in e1.

384
00:48:20,660 --> 00:48:28,680
应用于参数列表'(4)
And apply the result of that to four, open, close, 4-- list of arguments.

385
00:48:28,680 --> 00:48:33,110
到了这里，变换过程就变得很清晰了，我知道该做什么
Well, that's sensible enough because evaluating a lambda, I know what to do.

386
00:48:33,110 --> 00:48:52,150
这和上面的很类似，继续变换(apply '(closure ((y) (+ x y)) <e1>)
That means I apply, the procedure which is closure, binds one argument y, adds x to y, with e1 captured in it.

387
00:48:55,790 --> 00:48:57,800
你应该已经知道了
And you should really see this.

388
00:48:57,800 --> 00:49:00,140
我构造了一个closure对象
I somehow manufactured a closure.

389
00:49:00,140 --> 00:49:01,790
放在这里
I should've put this here.

390
00:49:01,790 --> 00:49:03,040
这里也有一个，是前面lambda (x)的那个
There was one over here too.

391
00:49:06,230 --> 00:49:08,080
这是现在的这个
Well, there's one here now.

392
00:49:08,080 --> 00:49:17,880
closure内部是有参数为y的过程体和环境e1
I've captured e1, and this is the procedure of one argument y, whatever this is.

393
00:49:17,880 --> 00:49:20,435
这就是这里的closure
That's what that is there, that closure.

394
00:49:23,040 --> 00:49:26,230
将这个过程应用于'(4)
I'm going to apply that to four.

395
00:49:30,690 --> 00:49:31,940
很简单
Well, that's easy enough.

396
00:49:36,830 --> 00:49:49,540
这就意味着我还得构造一个新环境，绑定变量y为数字4
That means I have to make a new environment by copying this pointer, which was the pointer of the procedure, which binds y equal 4 with that environment.

397
00:49:49,540 --> 00:49:52,460
这个是新环境，称为e2
And here's my new environment, which I'll call e2.

398
00:49:55,870 --> 00:50:01,910
接着就是在环境e2中求值过程体(+ x y)
And, of course, this application then is evaluate the body in e2.

399
00:50:01,910 --> 00:50:13,710
然后变换为，(eval '(+ x y) <e2>)
So this is eval, the body, which is plus x y, in the environment e2.

400
00:50:13,710 --> 00:50:37,340
继续变换，(apply (eval '+ <e2>) (evlist '(x y) <e2>))
But this is an application, so this is the apply, of eval, plus in e2, an EVLIST, quote, open, x y, in e2.

401
00:50:44,880 --> 00:50:45,590
我们来看
Well, but let's see.

402
00:50:45,590 --> 00:50:54,190
接着写，(apply ，eval这部分在环境中寻找符号'+
That is apply, the object which is a result of that and plus.

403
00:50:54,190 --> 00:51:01,780
所以我们从e2开始找，它不在这里，也不在e1，哦，它是一个基本操作符
So here we are in e2, plus is not here, it's not here, oh, yes, but's here as some primitive operator.

404
00:51:01,780 --> 00:51:04,745
用于做加法
So it's the primitive operator for addition.

405
00:51:08,490 --> 00:51:14,370
把它应用于x y在e2中解析到的结果
Apply that to the result of evaluating x and y in e2.

406
00:51:14,370 --> 00:51:18,340
我们知道x是3 y是4
But we can see that x is three and y is four.

407
00:51:18,340 --> 00:51:23,936
所以这里写'(3 4)
So that's a three and four, here.

408
00:51:23,936 --> 00:51:26,280
然后就神奇的得到结果7
And that magically produces for me a seven.

409
00:51:30,520 --> 00:51:40,470
我把这个例子具体的演示一遍是想让你们清楚的看到，求值过程中实际传递的是什么，每一部分的职能又是什么
I wanted to go through this so you would see, essentially, one important ingredient, which is what's being passed around, and who owns what, and what his job is.

410
00:51:40,470 --> 00:51:41,700
所以这里是一些什么呢？
So what do we have here?

411
00:51:41,700 --> 00:51:46,520
一个eval，一个apply，两个主角
We have eval, and we have apply, the two main players.

412
00:51:49,370 --> 00:51:52,320
在它们之间是一个大循环
And there is a big loop the goes around like this.

413
00:51:52,320 --> 00:52:06,270
eval将过程与参数传递予apply
Which is eval produces a procedure and arguments for apply.

414
00:52:06,270 --> 00:52:09,710
也有些事情eval可以自己做
Now some things eval could do by itself.

415
00:52:09,710 --> 00:52:10,860
一些内部的事情吧
Those are little self things here.

416
00:52:10,860 --> 00:52:12,700
没多大意思
They're not interesting.

417
00:52:12,700 --> 00:52:16,240
eval也逐个解析每个形参
Also eval evaluates all of the arguments, one after another.

418
00:52:16,240 --> 00:52:17,650
也没什么意思
That's not very interesting.

419
00:52:17,650 --> 00:52:22,300
apply实际执行一些过程比如+
Apply can apply some procedures like plus, not very interesting.

420
00:52:22,300 --> 00:52:32,880
然而如果不是基本过程不能直接执行，它就再度将表达式与环境传递予eval
However, if apply can't apply a procedure like plus, it produces an expression and environment for eval.

421
00:52:35,470 --> 00:52:43,740
参数和过程记录了计算的状态和环境下的表达式
The procedural arguments wrap up essentially the state of a computation and, certainly, the expression of environment.

422
00:52:43,740 --> 00:52:48,820
我们接下来并不是对全局状态一下得出结果，因为它并不知道全局状态是什么
And so what we're actually going to do next is not the complete state, because it doesn't say who wants the answers.

423
00:52:51,280 --> 00:52:58,970
我们要做的只是得到环境和表达式或者过程与参数，一直不断的反复循环
But what we're going to do-- it's always got something like an expression of environment or procedure and arguments as the main loop that we're going around.

424
00:52:58,970 --> 00:53:12,280
这里也有一些副循环比如eval中的evlist、evcond和apply中的apply
There are minor little sub loops like eval through EVLIST, or eval through evcond, or apply through a primitive apply.

425
00:53:16,140 --> 00:53:18,500
但是它们并不是最主要的
But they're not the essential things.

426
00:53:18,500 --> 00:53:21,860
这整个就是我想让你们看到的
So that's what I wanted you to see.

427
00:53:21,860 --> 00:53:23,110
有什么问题吗？
Are there any questions?

428
00:53:25,930 --> 00:53:28,690
你说
Yes.

429
00:53:28,690 --> 00:53:37,070
我不明白为什么x是3而不是4
AUDIENCE: I'm trying to understand how x got down to three instead of four.

430
00:53:37,070 --> 00:53:41,310
在那个部分 教授：这里
At the early part of the-- PROFESSOR: Here.

431
00:53:41,310 --> 00:53:43,310
x为什么是3？
You want to know how x got down to three?

432
00:53:43,310 --> 00:53:51,040
x是外层过程的参数，y是内层过程的参数
AUDIENCE: Because x is the outer procedure, and x and y are the inner procedure.

433
00:53:51,040 --> 00:53:52,570
哦，明白了
PROFESSOR: Fine.

434
00:53:52,570 --> 00:53:55,280
变换的过程中我已经非常注意了
Well, I was very careful and mechanical.

435
00:53:55,280 --> 00:54:00,610
现在我把这个示例的过程按照美观的排版方式给你再写一遍
First of all, I should write those procedures again for you, pretty printed.

436
00:54:00,610 --> 00:54:03,830
这样做的原因是因为你可以读错了这个程序
First order of business, because you're probably not reading them well.

437
00:54:03,830 --> 00:54:26,140
所以我本着美观打印的原则把这个例子再写一遍
So I have here that procedure of-- was it x over there-- which is-- value of that procedure of y, which adds x to y, lambda, lambda, applied that to three, takes the result of that, and applied that to four.

438
00:54:26,140 --> 00:54:28,810
这个和刚才写的那个是一样的
Is that not what I wrote?

439
00:54:28,810 --> 00:54:40,735
然后你会发现最外层是一个过程调用 -- 我换根白粉笔 -- 这一部分是一个过程调用
Now, you should immediately see that here is an application-- let me get a white piece of chalk-- here is an application, a combination.

440
00:54:44,300 --> 00:54:51,040
这一部分是操作符，下面的3是操作数
That combination has this as the operator and this as the operand.

441
00:54:51,040 --> 00:54:54,900
所以x应该是3
The three is going in for the x here.

442
00:54:54,900 --> 00:55:01,530
这个过程执行后的结果是一个参数为y的过程，再应用于4
The result of this is a procedure of one argument y, which gets applied to four.

443
00:55:01,530 --> 00:55:04,190
所以你可能刚刚看错了
So you just weren't reading the expression right.

444
00:55:04,190 --> 00:55:13,340
刚才你所指的那里，过程对象和x
The way you see that over here is that here I have the actual procedure object, x.

445
00:55:13,340 --> 00:55:18,980
这个过程应用于下面的列表 '(3)
It's getting applied to three, the list containing three.

446
00:55:18,980 --> 00:55:24,080
应用后得到的结果再应用于'(4)
What I'm left over with is something which gets applied to four.

447
00:55:24,080 --> 00:55:25,330
还有疑问吗？
Are there any other questions?

448
00:55:28,600 --> 00:55:30,900
那就休息一下吧
Time for our next small break then.

449
00:55:30,900 --> 00:55:33,735
嗯
Thank you.

450
00:55:33,735 --> 00:56:08,410
[MUSIC PLAYING]
[MUSIC PLAYING]

451
00:56:08,410 --> 00:56:17,960
现在大家可能开始嘀咕了，GJS说了这么多没用的有什么意义？
Let's see, at this point, you should be getting the feeling, what's this nonsense this Sussman character is feeding me?

452
00:56:20,740 --> 00:56:24,800
很多话没多大意义，而且还不好理解
There's an awful lot of strange nonsense here.

453
00:56:24,800 --> 00:56:30,892
毕竟他还是给我详细解释了Lisp，并且还在黑板上写了程序
After all, he purported to explain to me Lisp, and he wrote me a Lisp program on the blackboard.

454
00:56:30,892 --> 00:56:38,370
这个程序是用Lisp所写的Lisp的解释器，但是要运行它你必须得先有一个Lisp解释器啊
The Lisp program was intended to be interpreted for Lisp, but you need a Lisp interpreter in order to understand that program.

455
00:56:38,370 --> 00:56:44,150
理解了这个程序就算是完全了解Lisp了吗？
How could that program have told me anything there is to be known about Lisp?

456
00:56:44,150 --> 00:56:45,795
这不是很空洞吗？
How is that not completely vacuous?

457
00:56:48,490 --> 00:56:50,990
而且非常诡异
It's a very strange thing.

458
00:56:50,990 --> 00:56:52,430
它是不是还隐藏了什么？
Does it tell me anything at all?

459
00:56:56,070 --> 00:57:03,105
我们想想看，这整件事是否很像幻灯片上这幅埃舍尔所画的手
Well, you see, the whole thing is sort of like these Escher's hands that we see on this slide.

460
00:57:06,180 --> 00:57:17,110
eval和apply彼此画出彼此，组成了整个程序，它完全是自己画出了自己
Yes, eval and apply each sort of draw each other and construct the real thing, which can sit out and draw itself.

461
00:57:17,110 --> 00:57:20,550
埃舍尔聪明绝顶，他看透了其中的玄机不过却没有为其命名
Escher was a very brilliant man, he just didn't know the names of these spirits.

462
00:57:23,910 --> 00:57:36,090
我现在要做的就是，使你们相信，这一切都是有意义的，顺便地提到，我们甚至连定义都不需要
Well, I'm going to do now, is I'm going to try to convince you that both this mean something, and, as a aside, I'm going to show you why you don't need definitions.

463
00:57:36,090 --> 00:57:44,890
这可能有点打破常规了，我们要做实际计算却不需要定义，这有点违反数学直觉
Just turns out that that sort of falls out, why definitions are not essential in a mathematical sense for doing all the things we need to do for computing.

464
00:57:49,070 --> 00:57:50,690
我们来实际的看一下
Well, let's see here.

465
00:57:50,690 --> 00:57:54,870
考虑下面的这一小段程序，它有什么作用？
Consider the following small program, what does it mean?

466
00:57:54,870 --> 00:57:57,035
一个计算指数的程序
This is a program for computing exponentials.

467
00:58:07,270 --> 00:58:22,070
(define expt (lambda (x n) (cond ((= n 0) 1) 
The exponential of x to the nth power is if--  and is zero, then the result is one.

468
00:58:22,070 --> 00:58:33,930
(else (* x (expt x (- n 1))))
Otherwise, I want the product of x and the result of exponentiating x to the n minus one power.

469
00:58:42,858 --> 00:58:46,630
应该没错
I think I got it right.

470
00:58:46,630 --> 00:58:49,470
一个递归定义
Now this is a recursive definition.

471
00:58:49,470 --> 00:58:56,410
用expt自身来定义expt
It's a definition of the exponentiation procedure in terms of itself.

472
00:58:56,410 --> 00:59:05,650
之前提到过，你的高中几何老师教这里的时候一定费了不少功夫
And, as it has been mentioned before, your high school geometry teacher probably gave you a hard time about things like that.

473
00:59:05,650 --> 00:59:07,910
这样定义合理吗？
Was that justified?

474
00:59:07,910 --> 00:59:13,430
为什么这种自己定义自己的无赖方式会说得过去呢？
Why does this self referential definition make any sense?

475
00:59:13,430 --> 00:59:17,600
首先我要说的是，高中老师教的那一套确实说不过去
Well, first of all, I'm going to convince you that your high school geometry teacher was I telling you nonsense.

476
00:59:20,370 --> 00:59:24,490
比如来看几组方程
Consider the following set of definitions here.

477
00:59:24,490 --> 00:59:33,070
x + y = 3    x - y = 1
x plus y equals three, and x minus y equal one.

478
00:59:33,070 --> 00:59:37,490
看，这个用y来告诉你x是什么，下面这个用x来告诉你y是什么
Well, gee, this tells you x in terms of y, and this one tells you y in terms of x, presumably.

479
00:59:40,150 --> 00:59:42,950
碰巧这组方程有唯一的解
And yet this happens to have a unique solution in x and y.

480
00:59:55,910 --> 01:00:06,600
然而，如果我写 2x + 2y = 6
However, I could also write two x plus two y is six.

481
01:00:06,600 --> 01:00:09,610
上面这两个联立，就有无穷个解了
These two equations have an infinite number solutions.

482
01:00:15,730 --> 01:00:24,070
我再写 x - y = 2，下面的这两个联立完全没有解
And I could write you, for example, x minus y equal 2, and these two equations have no solutions.

483
01:00:29,820 --> 01:00:39,510
这里三组方程式，这组，这组和这组
Well, I have here three sets of simultaneous linear equations, this set, this set, and this set.

484
01:00:39,510 --> 01:00:42,900
它们的解的数目完全不同
But they have different numbers of solutions.

485
01:00:42,900 --> 01:00:45,760
解的数目通过方程的形式是看不出来的
The number of solutions is not in the form of the equations.

486
01:00:45,760 --> 01:00:48,350
三组方程看起来形式一样
They all three sets have the same form.

487
01:00:48,350 --> 01:00:50,205
判断解的数目需要具体的来看方程的内容
The number of solutions is in the content.

488
01:00:53,000 --> 01:00:59,660
我不能看一眼方程的外貌就判断出解的数目来，必须要仔细辨别方程的内容
I can't tell by looking at the form of a definition whether it makes sense, only by its detailed content.

489
01:00:59,660 --> 01:01:05,100
比如，这个线性方程，我们具体看方程的系数是什么？
What are the coefficients, for example, in the case of linear equations?

490
01:01:05,100 --> 01:01:16,030
所以我不能仅仅依照方程形式就来判断解是什么样子，就比如这个，你说，expt是这个递归方程的解
So I shouldn't expect to be able to tell looking at something like this, from some simple things like, oh yes, EXPT is the solution of this recursion equation.

491
01:01:16,030 --> 01:01:26,040
你还说，expt这个过程，你在这里调用，它就真的计算返回相应的指数
Expt is the procedure which if substituted in here, gives me EXPT back.

492
01:01:26,040 --> 01:01:37,200
我也不清楚，简单看看这个方程的形式，我也不知道expt是有一个解，无限个解还是根本没有解
I can't tell, looking at this form, whether or not there's a single, unique solution for EXPT, an infinite number of solutions, or no solutions.

493
01:01:37,200 --> 01:01:40,490
要做具体的判断必须明白 它是如何计算的 类似的具体的细节
It's got to be how it counts and things like that, the details.

494
01:01:40,490 --> 01:01:42,900
在编程中弄清楚可不像在线性代数中那么简单了
And it's harder in programming than linear algebra.

495
01:01:42,900 --> 01:01:45,210
在编程中定理并不多
There aren't too many theorems about it in programming.

496
01:01:48,450 --> 01:01:53,970
现在我先把这些个方程重写一遍
Well, I want to rewrite these equations a little bit, these over here.

497
01:01:53,970 --> 01:01:56,770
因为我们要讨论的是这种形式的方程
Because what we're investigating is equations like this.

498
01:01:56,770 --> 01:02:04,730
我只是想在这几个方程上做一些变换，以便于我们理解那边的方程
But I want to play a little with equations like this that we understand, just so we get some insight into this kind of question.

499
01:02:04,730 --> 01:02:19,380
我们把中间这个方程组重写为 x = 3 - y   y = x - 1 
We could rewrite our equations here, say these two, the ones that are interesting, as x equals three minus y, and y equals x minus one.

500
01:02:22,010 --> 01:02:24,050
这种变换叫什么来着？
What do we call this transformation?

501
01:02:24,050 --> 01:02:26,095
一个线性变换，记为t
This is a linear transformation, t.

502
01:02:29,430 --> 01:02:37,370
所以这组方程也可以写作 <x y> = T<x y>
Then what we're getting here is an equation x y equals t of x y.

503
01:02:42,990 --> 01:02:44,560
我在找什么？
What am I looking for?

504
01:02:44,560 --> 01:02:47,040
我在找T的不动点
I'm looking for a fixed point of t.

505
01:02:47,040 --> 01:02:59,350
不动点也就是方程的解
The solution is a fixed point of t.

506
01:03:01,910 --> 01:03:10,880
所以我们已知的求不动点的方法也可以用在这里
So the methods we should have for looking for solutions to equations, if I can do it by fixed points, might be applicable.

507
01:03:10,880 --> 01:03:22,410
假如我有一个根据不动点来求得方程不动点的方法 -- 可能不管用 -- 可能也适用于这种情况的方程
If I have a means of finding a solution to an equations by fixed points-- just, might not work-- but it might be applicable to investigating solutions of equations like this.

508
01:03:27,240 --> 01:03:30,260
我们来把这个想像为方程，感受一下
But what I want you to feel is that this is an equation.

509
01:03:30,260 --> 01:03:45,010
这个表达式，其中有一些名字，上面对应着值的约束，不仅仅只用机械的代换来看它
It's an expression with several instances of various names which puts a constraint on the name, saying what that name could have as its value, rather than some sort of mechanical process of substitution right now.

510
01:03:47,740 --> 01:03:51,220
这个方程就是我要求解的方程
This is an equation which I'm going to try to solve.

511
01:03:51,220 --> 01:03:53,960
我们来试试看
Well, let's play around and solve it.

512
01:03:53,960 --> 01:04:00,320
首先，类比T的形式我先写一个函数
First of all, I want to write down the function which corresponds to t.

513
01:04:00,320 --> 01:04:06,960
这个函数的不动点就是我们想要的答案
First I want to write down the function which corresponds to t whose fixed point is the answer to this question.

514
01:04:11,950 --> 01:04:14,240
来看这个过程  F
Well, let's consider the following procedure f.

515
01:04:16,870 --> 01:04:19,340
用F来计算函数
I claim it computes that function.

516
01:04:19,340 --> 01:04:33,430
F有一个参数g，g是一个过程，有两个参数x和n
f is that procedure of one argument g, which is that procedure of two arguments x and n.

517
01:04:33,430 --> 01:05:00,690
g的过程体是 (cond ((= n 0) 1) (else (* x (g (x (- n 1))))))
Which have the property that if n is zero, then the result is one, otherwise, the result is the product of x and g, applied to x, and minus n1.

518
01:05:03,370 --> 01:05:30,930
f是一个过程，如果这个方程有解，如果我有一个计算指数的过程，我用f来调用这个过程，结果也应该是一个计算指数的过程
g, times, else, COND, lambda, lambda--  Here f is a procedure, which if I had a solution to that equation, if I had a good exponentiation procedure, and I applied f to that procedure, then the result would be a good exponentiation procedure.

519
01:05:37,460 --> 01:05:39,420
它是怎么做的呢？
Because, what does it do?

520
01:05:39,420 --> 01:05:54,670
假设g是一个指数计算过程，代入这里，生成一个有两个参数x和n的过程，其中如果n=0，结果就是1，这一点符合指数的定义
Well, all it is is exposing g were a good exponentiation procedure, well then this would produce, as its value, a procedure to arguments x and n, such that if n were 0, the result would be one, which is certainly true of exponentiation.

521
01:05:54,670 --> 01:06:03,470
否则，就返回指数过程g计算得到的x^n-1与x的乘积
Otherwise, it will be the result of multiplying x by the exponentiation procedure given to me with x and n minus one as arguments.

522
01:06:03,470 --> 01:06:14,620
如果对x^n-1的计算没有问题，那么返回的这个过程计算x^n也一定没有问题，这就是正确的指数计算过程
So if this computed the correct exponentiation for n minus one, then this would be the correct exponentiation for exponent n, so this would have been the right exponentiation procedure.

523
01:06:17,500 --> 01:06:32,320
所以，expt是F方程的不动点
So what I really want to say here is E-X-P-T is a fixed point of f.

524
01:06:37,550 --> 01:06:40,060
现在我们的问题在于，万一不止一个不动点
Now our problem is there might be more than one fixed point.

525
01:06:40,060 --> 01:06:43,270
万一根本没有不动点
There might be no fixed points.

526
01:06:43,270 --> 01:06:44,810
所以我们必须求出不动点
I have to go hunting for the fixed points.

527
01:06:48,290 --> 01:06:49,540
解出方程
Got to solve this equation.

528
01:06:52,160 --> 01:06:55,580
求不动点有很多种方式
Well there are various ways to hunt for fixed points.

529
01:06:55,580 --> 01:07:00,815
我们一开始的时候举过cos的例子
Of course, the one we played with at the beginning of this term worked for cosine.

530
01:07:06,080 --> 01:07:16,090
计算器调成弧度制，然后一直按cosine，最后数字会稳定在0.73 0.74左右
Go into radians mode on your calculator and push cosine, and just keep doing it, and you get to some number which is about 0.73 or 0.74.

531
01:07:16,090 --> 01:07:17,340
记不清是哪个了
I can't remember which.

532
01:07:22,900 --> 01:07:33,770
类似的，不断进行迭代，说不定就可以找出方程的不动点
By iterating a function, whose fixed point I'm searching for, it is sometimes the case that that function will converge in producing the fixed point.

533
01:07:33,770 --> 01:07:39,910
碰碰运气，来试试这种方法 
I think we luck out in this case, so let's look for it.

534
01:07:39,910 --> 01:07:48,030
来看这张幻灯片
Let's look at this slide.

535
01:07:48,030 --> 01:07:51,390
这有一连串的过程
Consider the following sequence of procedures.

536
01:07:56,400 --> 01:08:02,940
e0什么也不做
e0 over here is the procedure which does nothing at all.

537
01:08:02,940 --> 01:08:07,780
如果将它应用于参数肯定会报错
It's the procedure which produces an error for any arguments you give it.

538
01:08:07,780 --> 01:08:09,030
没什么用
It's basically useless.

539
01:08:14,480 --> 01:08:20,080
然而，我可以应用F逐渐逼近
Well, however, I can make an approximation.

540
01:08:20,080 --> 01:08:26,990
e0应该是最差的近似了，因为它什么也做不了
Let's consider it the worst possible approximation to exponentiation, because it does nothing.

541
01:08:26,990 --> 01:08:37,380
假设我用调用过程F应用于e0
Well, supposing I substituted e0 for g by calling f, as you see over here on e0.

542
01:08:37,380 --> 01:08:40,729
e0代换了g，就在这里
So you see over here, have e0 there.

543
01:08:40,729 --> 01:08:43,859
我们来看看，e1是什么？
Then gee, what's e1?

544
01:08:43,859 --> 01:08:49,325
e1是一个可以计算x的0次方的过程，没什么问题
e1 is a procedure which exponentiate things to the 0th power, with no trouble.

545
01:08:49,325 --> 01:08:54,250
如果n=0值就是1，n!=0的话就会报错
It gets the right answer, anything to the zero is one, and it makes an error on anything else.

546
01:08:57,390 --> 01:09:07,310
如果我对e1再次调用F会发生什么？
Well, now what if I take e1 and I substitute if for g by calling f on e1?

547
01:09:10,500 --> 01:09:15,670
哦，还是得到了一个有两个参数的过程
Oh gosh, I have here a procedure of two arguments.

548
01:09:15,670 --> 01:09:24,200
记住，e1是F应用e0得到的近似，原本什么都做不了，现在可以计算0次方
Now remember e1 was appropriate for taking exponentiations of 0, for raising to the 0 exponent.

549
01:09:24,200 --> 01:09:29,520
来看e2，如果n=0，结果就是1，也是符合指数计算原则的
So here, is n is 0, the result is one, so this guy is good for that too.

550
01:09:29,520 --> 01:09:35,979
然而，这里的乘法使得原本只能计算0次方的过程现在可以计算1次方
However, I can use something for raising to the 0th power to multiply it by x to raise something to the first power.

551
01:09:35,979 --> 01:09:39,670
所以e2可以计算0和1次方
So e2 is good for both power 0 and one.

552
01:09:43,800 --> 01:09:47,899
e3的推导过程和e2是类似的
And e3 is constructed from e2 in the same way.

553
01:09:47,899 --> 01:09:55,120
即E3可以用来计算0、1、2次方
And e3, of course, by the same argument is good for powers 0, one, and two.

554
01:09:55,120 --> 01:10:02,520
因此我就不加证明的断言，不动点就是一个指数计算过程，这个证明十分的困难
And so I will assert for you, without proof, because the proof is horribly difficult.

555
01:10:02,520 --> 01:10:07,710
这也就是人们所谓的指称语义学家所做的事
And that's the sort of thing that people called denotational semanticists do.

556
01:10:07,710 --> 01:10:10,265
这个伟大的想法最先是从Scott和Strachey开始的
This great idea was invented by Scott and Strachey.

557
01:10:14,240 --> 01:10:24,240
他们是非常出色的数学家，也就是他们发明了那些程序的解释方式，就是我刚才讲的
They're very famous mathematician types who invented the interpretation for these programs that we have that I'm talking to you about right now.

558
01:10:24,240 --> 01:10:32,220
他们用拓扑学的知识证明了，刚才我们的那个例子是存在固定点的
And they proved, by topology that there is such a fixed point in the cases that we want.

559
01:10:32,220 --> 01:10:43,680
但是结论是，expt是 n趋于无穷时Em的极限值
But the assertion is E-X-P-T is limit as n goes to infinity of em.

560
01:10:43,680 --> 01:10:47,900
我们也可以这样写
and And that we've constructed this by the following way.

561
01:10:50,520 --> 01:11:01,120
expt = (f (f (f (f .... (f 丄)....)
--is Well, it's f of, f of, f of, f of, f of-- f applied to anything at all.

562
01:11:01,120 --> 01:11:05,320
不用管丄是什么，因为它总会生成一个错误
It didn't matter what that was, because, in fact, this always produces an error.

563
01:11:07,540 --> 01:11:16,380
无穷的调用F
Applied to this--  That's by infinite nesting of f's.

564
01:11:16,380 --> 01:11:19,760
现在我们的问题又变成了如何构造出无穷调用
So now my problem is to make some infinite things.

565
01:11:22,590 --> 01:11:24,920
我们需要这些
We need some infinite things.

566
01:11:24,920 --> 01:11:28,980
我怎么来无穷次的执行F呢？
How am I going to nest up an f an infinite number of times?

567
01:11:28,980 --> 01:11:32,380
我得把它构造出来
I'd better construct this.

568
01:11:32,380 --> 01:11:32,930
好吧我不知道
Well, I don't know.

569
01:11:32,930 --> 01:11:34,810
到底怎么样构建一个无穷循环呢？
How would I make an infinite loop at all?

570
01:11:34,810 --> 01:11:38,340
我们先来看一个非常简单的无穷循环，我能想到的最简单的
Let's take a very simple infinite loop, the simplest infinite loop imaginable.

571
01:11:43,550 --> 01:12:07,440
比如这样  ((lambda(x) (x x)) (lambda(x) (x x)))，这样就是一个无限的循环了
If I were to take that procedure of one argument x which applies x to x and apply that to the procedure of one argument x which applies x to x, then this is an infinite loop.

572
01:12:07,440 --> 01:12:09,980
现在来解释它是无限循环的原因
The reason why this is an infinite loop is as follows.

573
01:12:09,980 --> 01:12:18,850
只需要参数代换入过程体即可
The way I understand this is I substitute the argument for the formal parameter in the body.

574
01:12:18,850 --> 01:12:29,660
其中的每个x都要代换为(lambda(x) (x x))，这也就又回到了这个表达式上来，我们就从这里开始，一个最简单的循环
But if I do that, I take for each of these x's, I substitute one of these, making a copy of the original expression I just started with, the simplest infinite loop.

575
01:12:35,440 --> 01:12:43,090
我想要讲的是一个特别的操作符，只需对这个无穷循环做一点点小的改动
Now I want to tell you about a particular operator which is constructed by a perturbation from this infinite loop.

576
01:12:47,040 --> 01:12:48,290
我称其为Y
I'll call it y.

577
01:12:52,290 --> 01:13:04,480
这被称为Curry Y不动点组合子，是由20世纪30年代的逻辑学家Curry发明的
This is called Curry's Paradoxical Combinator of y after a fellow by the name of Curry, who was a logician of the 1930s also.

578
01:13:04,480 --> 01:13:09,330
Y是一个接受一个参数的过程，具体怎么写呢？
And if I have a procedure of one argument f, what's it going to have in it?

579
01:13:09,330 --> 01:13:27,899
内部需要构建出无限循环，((lambda(x) (f (x x))) (lambda(x) (f (x x))))
It's going to have a kind of infinite loop in it, which is that procedure of one argument x which applies f to x of x, applied to that procedure of one argument x, which applies f to f of x.

580
01:13:32,300 --> 01:13:34,590
这个是怎么运作的？
Now what's this do?

581
01:13:34,590 --> 01:13:42,950
假设执行(Y F)
Suppose we apply y to F. Well, that's easy enough.

582
01:13:42,950 --> 01:13:46,910
就是那边那个大写的F
That's this capital F over here.

583
01:13:46,910 --> 01:13:49,920
很简单，把F代换进来
Well, the easiest thing to say there is, I substitute F for here.

584
01:13:55,320 --> 01:14:02,800
里面的lambda代换进去
So that's going to give me, basically-- because then I'm going to substitute this for x in here.

585
01:14:08,970 --> 01:14:11,730
我逐步的代换一次，你就可以明白是怎么回事了
Let me actually do it in steps, so you can see it completely.

586
01:14:11,730 --> 01:14:15,020
我会非常谨慎
I'm going to be very careful.

587
01:14:15,020 --> 01:14:37,910
也就是 ((lambda(x) (F (x x))) (lambda(x) (F (x x))))
This is open, open, lambda of x , capital F, x, x, applied to itself, F of x of x.

588
01:14:37,910 --> 01:15:11,510
lambda代换进来，也就是 (F (lambda(x) (F (x x))) (lambda(x) (F (x x))))
Substituting this for this in here, this is F applied to-- what is it-- substituting this in here, open, open, lambda of x, F, of x and x, applied to lambda of x, F of x of x, F, lambda, pair, F.

589
01:15:11,510 --> 01:15:13,420
哇，这一部分是什么？
Oh, but what is this?

590
01:15:13,420 --> 01:15:20,030
也就是我们上面要计算的这部分
This thing over here that I just computed, is this thing over here.

591
01:15:20,030 --> 01:15:23,370
不同的是在外层应用了过程F
But I just wrapped another F around it.

592
01:15:23,370 --> 01:15:27,850
以此类推，就构造出了无穷个F迭代应用的过程
So by applying y to F, I make an infinite series of F's.

593
01:15:27,850 --> 01:15:33,170
我们一直这样代换下去，就会在外层得到越来越多的F
If I just let this run forever, I'll just keep making more and more F's outside.

594
01:15:33,170 --> 01:15:36,855
运行一个无穷循环看似无用，但是我们还要注意到循环过程中内部的变化
I ran an infinite loop which is useless, but it doesn't matter that the inside is useless.

595
01:15:40,220 --> 01:16:04,450
(Y F) => (F (Y F))，Y这个过程很神奇，应用于一个过程，就可以求出这个过程的不动点，当然是在不动点存在的前提下
So y of F is F applied to y of F. So y is a magical thing which, when applied to some function, produces the object which is the fixed point of that function, if it exists, and if this all works.

596
01:16:07,910 --> 01:16:11,630
因为，这里把(Y F)作为一个整体，F应用于(Y F)结果还是(Y F)
Because, indeed, if I take y of F and put it into F, I get y of F out.

597
01:16:16,240 --> 01:16:23,860
我们用这种方式来理解我们的eval-apply解释器
Now I want you to think this in terms of the eval-apply interpreter for a bit.

598
01:16:23,860 --> 01:16:28,540
这里我已经写了一整串的递归方程
I wrote down a whole bunch of recursion equations out there.

599
01:16:28,540 --> 01:16:31,470
它们都是联立方程
They're simultaneous in the same way these are simultaneous equations.

600
01:16:31,470 --> 01:16:33,310
expt不是联立方程
Exponentiation was not a simultaneous equation.

601
01:16:33,310 --> 01:16:38,150
我们只用关心一个变量的解
It was only one variable I was looking for a meaning for.

602
01:16:38,150 --> 01:16:58,220
我们这样来理解，Lisp是一个过程的不动点，在这个过程里，假定我们知道Lisp是什么，就像刚才的递归方程一样，对它反复应用eval apply，如果这真是Lisp，变换一次依然应该是Lisp
But what Lisp is is the fixed point of the process which says, if I knew what Lisp was and substituted it in for eval, and apply, and so on, on the right hand sides of all those recursion equations, then if it was a real good Lisp, is a real one, then the left hand side would also be Lisp.

603
01:16:58,220 --> 01:16:59,565
这样，我们之前所讲的就说的通了
So I made sense of that definition.

604
01:17:02,420 --> 01:17:05,410
不过是否有解却不太明显
Now whether or not there's an answer isn't so obvious.

605
01:17:05,410 --> 01:17:07,740
我也说不清
I can't attack that.

606
01:17:07,740 --> 01:17:10,660
现在我们来看点别的例子，这里我给出的论据有点陷阱
Now these arguments that I'm giving you now are quite dangerous.

607
01:17:10,660 --> 01:17:13,570
具体看这里
Let's look over here.

608
01:17:13,570 --> 01:17:14,610
这些都是关于极限的论据
These are limit arguments.

609
01:17:14,610 --> 01:17:21,255
我们要讨论极限，就需要一些微积分或者拓扑学那之类的一些知识来分析
We're talking about limits, and it's really calculus, or topology, or something like that, a kind of analysis.

610
01:17:21,255 --> 01:17:23,380
这里摆着的论据相信大家都会认同
Now here's an argument that you all believe.

611
01:17:23,380 --> 01:17:29,660
我只是确认一下你们是否会意识到我蒙骗到了你们
And I want to make sure you realize that I could be bullshitting you.

612
01:17:29,660 --> 01:17:30,910
这个是？
What is this?

613
01:17:34,250 --> 01:17:42,820
u = 1 + 1/2 + 1/4 + .......
u is the sum of 1/2, 1/4, and 1/8, and so on, the sum of a geometric series.

614
01:17:42,820 --> 01:17:44,820
下面，做一点变换
And, of course, I could play a game here.

615
01:17:44,820 --> 01:17:47,570
u - 1 = 1/2 + 1/4 + ......
u minus one is 1/2, plus 1/4, plus 1/8, and so on.

616
01:17:53,590 --> 01:17:56,680
然后继续
What I could do here-- oops.

617
01:17:56,680 --> 01:17:58,920
哦，这里少写了括号
There is a parentheses error here.

618
01:17:58,920 --> 01:18:03,990
2(u - 1) = 1 + 1/2 + 1/4 + ........
But I can put here two times u minus one is one plus 1/2, plus 1/4, plus 1/8.

619
01:18:07,570 --> 01:18:08,820
这里能修改一下吗？
Can I fix that?

620
01:18:14,010 --> 01:18:16,125
哦，可以
Yes, well.

621
01:18:19,520 --> 01:18:30,300
这样，2(u - 1) = u，结果得出u = 2
But that gives me back two times u minus one is u, therefore, we conclude that u is two.

622
01:18:30,300 --> 01:18:31,830
有理有据
And this actually is true.

623
01:18:31,830 --> 01:18:33,910
没有任何问题
There's no problem like that.

624
01:18:33,910 --> 01:18:38,540
但是假设这样的情况
But supposing I did something different.

625
01:18:38,540 --> 01:18:41,470
假设我开始计算一些明显没有固定结果的求和
Supposing I start up with something which manifestly has no sum.

626
01:18:41,470 --> 01:18:47,390
v = 1 + 2 + 4 + ........
v is one, plus two, plus four, plus 8, plus dot, dot, dot.

627
01:18:47,390 --> 01:18:52,010
v - 1 = 2 + 4 + 8 + ......
Well, v minus one is surely two, plus four, plus eight, plus dot, dot, dot.

628
01:18:52,010 --> 01:18:57,410
(v - 1)/2 = v
v minus one over two, gee, that looks like v again.

629
01:18:57,410 --> 01:19:03,070
所以我就可以算出v是多少 -- 哦这里又写错了
From that I should be able to conclude that-- that's also wrong, apparently.

630
01:19:03,070 --> 01:19:04,510
v = -1
v equals minus one.

631
01:19:12,455 --> 01:19:15,280
这里应该是-1
That should be a minus one.

632
01:19:15,280 --> 01:19:16,735
结论明显是错误的
And that's certainly a false conclusion.

633
01:19:22,000 --> 01:19:30,750
当你计算极限的时候，这种方式可能是对的，但是应用于别的就不对了
So when you play with limits, arguments that may work in one case they may not work in some other case.

634
01:19:30,750 --> 01:19:32,240
要多加注意 
You have to be very careful.

635
01:19:32,240 --> 01:19:35,752
论据必须符合一定的形式
The arguments have to be well formed.

636
01:19:35,752 --> 01:19:43,270
关于刚才那个我也很难用理论说明到底是为什么
And I don't know, in general, what the story is about arguments like this.

637
01:19:43,270 --> 01:19:46,060
你可以了解一些拓扑学找到答案
We can read a pile of topology and find out.

638
01:19:46,060 --> 01:19:53,260
但是至少你现在理解了，这个例子对于黑板上我们写的这些有很大意义
But, surely, at least you understand now, why it might be some meaning to the things we've been writing on the blackboard.

639
01:19:53,260 --> 01:19:56,480
并且你也理解了(Y F) = (F (Y F))
And you understand what that might mean.

640
01:19:56,480 --> 01:20:09,320
我想，应该庆祝你们，成为递归lambda演算黑客的一员
So, I suppose, it's almost about time for you to merit being made a member of the grand recursive order of lambda calculus hackers.

641
01:20:09,320 --> 01:20:10,820
这是我们的徽章
This is the badge.

642
01:20:10,820 --> 01:20:21,890
因为你已经理解了 (Y F) = (F (Y F))
Because you now understand, for example, what it says at the very top, y F equals F y F. Thank you.

643
01:20:21,890 --> 01:20:24,710
有什么问题吗？
Are there any questions?

644
01:20:24,710 --> 01:20:25,150
你说
Yes, Lev.

645
01:20:25,150 --> 01:20:34,090
目前的状况来看，正如你之前提到过的，我们已经不需要define去预先定义一个过程之后再应用它
AUDIENCE: With this, it seems that then there's no need to define, as you imply, to just remember a value, to apply it later.

646
01:20:34,090 --> 01:20:36,490
define在语言中好像有一些副作用
Defines were kind of a side-effect it seemed in the language.

647
01:20:36,490 --> 01:20:39,300
就会存在秩序依赖[猜的，不确定]
[INTERPOSING] are order dependent.

648
01:20:39,300 --> 01:20:43,150
我们现在是否已经排除了副作用  教授：是这样
Does this eliminate the side-effect from the. Well

649
01:20:43,150 --> 01:20:49,180
答案在于，define并不是按你所提的那样运行的
PROFESSOR: The answer is, this is not the way these things were implemented.

650
01:20:49,180 --> 01:21:03,690
define这个操作，确实修改了环境，修改了当前环境的frame
Define, indeed is implemented as an operation that actually modifies an environment structure, changes the frame that the define is executed in.

651
01:21:03,690 --> 01:21:11,340
这样是出于很多目的，其中之一就是方便交互式系统
And there are many reasons for that, but a lot of this has to do with making an interactive system.

652
01:21:11,340 --> 01:21:24,090
就是说，如果你造了一个系统，你不打算调试而且你也知道所要计算的全部内容，你就可以直接要求系统来求解
What this is saying is that if you've made a system, and you know you're not going to do any debugging or anything like that, and you know everything there is all at once, and you want to say, what is the meaning of a final set of equations?

653
01:21:24,090 --> 01:21:25,790
然后系统返回你相应的值
This gives you a meaning for it.

654
01:21:25,790 --> 01:21:35,000
但是为了构建一个交互式的系统，你就得做到改变一个东西的含义但是又不改变剩下的其它部分，增量的变化，没有define就不易做到了
But in order to make an interactive system, where you can change the meaning of one thing without changing everything else, incrementally, you can't do that by implementing it this way.

655
01:21:40,990 --> 01:21:41,860
你说
Yes.

656
01:21:41,860 --> 01:21:44,650
关于刚才你那个“有陷阱”的幻灯片有点疑问
AUDIENCE: Another question on your danger slide.

657
01:21:44,650 --> 01:21:50,300
好像你举的两个例子和收敛与不收敛有点关系？
It seemed that the two examples that you gave had to do with convergence and non-convergence?

658
01:21:50,300 --> 01:22:05,430
可能这个函数理论也会让你想到线性系统非线性系统的一些东西，所以收敛性和变换F所必须的一些性质之间到底有什么关系呢？
And that may or may not have something to do with function theory in a way which would lead you to think of it in terms of linear systems, or non-linear systems. How does this convergence relate to being able to see a priori what properties of that might be violated?

659
01:22:05,430 --> 01:22:07,680
我不知道
PROFESSOR: I don't know.

660
01:22:07,680 --> 01:22:10,610
问题在于我不知道在什么样的环境下
The answer is, I don't know under what circumstances.

661
01:22:10,610 --> 01:22:16,910
不下一个小时肯定是说不完的
I don't know how to translate that into less than an hour of talk more.

662
01:22:16,910 --> 01:22:22,720
我们判断收敛的条件是什么？
What are the conditions under which, for which we know that these things converge?

663
01:22:22,720 --> 01:22:32,810
就v来看，如果你不了解收敛性，我告诉你说根据收敛性这个没有解，你肯定也是云里雾里的
And v, all that was telling you that arguments that are based on convergence are flaky if you don't know the convergence beforehand.

664
01:22:32,810 --> 01:22:34,440
你能构造错误的论据
You can make wrong arguments.

665
01:22:34,440 --> 01:22:40,690
你也可以演绎，就像是你知道答案，并且没有被什么明显的矛盾所阻碍
You can make deductions, as if you know the answer, and not be stopped somewhere by some obvious contradiction.

666
01:22:40,690 --> 01:23:03,020
我们可以说 如果F是一个收敛的数学变换，然后递归的性质就 教授：我想是有这样的一种F，针对F有具体的技术性的描述，如果F具有某些性质，你迭代的时候就会收敛
AUDIENCE: So can we say then that if F is a convergent mathematical expression, then the recursion property can be-- PROFESSOR: Well, I think there's a technical kind of F, there is a technical description of those F's that have the property that when you iteratively apply them like this, you converge.

667
01:23:03,020 --> 01:23:09,370
比如单调的，连续的，我忘了还有些什么
Things that are monotonic, and continuous, and I forgot what else.

668
01:23:09,370 --> 01:23:13,430
有很多这样的条件可以作为性质
There is a whole bunch of little conditions like that which have this property.

669
01:23:13,430 --> 01:23:22,010
困难的地方在于，对于一个F，我来判断它是否有我们所提到的这些性质，这有点难
Now the real problem is deducing from looking at the F, its definition here, whether not it has those properties, and that's very hard.

670
01:23:22,010 --> 01:23:23,280
提到那些性质当然简单
The properties are easy.

671
01:23:23,280 --> 01:23:24,580
你都可以把它们写下来
You can write them down.

672
01:23:24,580 --> 01:23:26,930
你可以看一本Joe Stoy写的书
You can look in a book by Joe Stoy.

673
01:23:26,930 --> 01:23:29,910
非常不错
It's a great book-- Stoy.

674
01:23:31,780 --> 01:23:41,800
叫做The Scott-Strachey Method of Denotational Semantics，作者Joe Stoy，MIT出版
It's called, The Scott-Strachey Method of Denotational Semantics, and it's by Joe Stoy, MIT Press.

675
01:23:47,960 --> 01:23:51,880
他对这一方面研究的非常透彻
And he works out all this in great detail, enough to horrify you.

676
01:23:55,080 --> 01:23:56,330
而且还很有可读性
But it really is readable.

677
01:24:09,150 --> 01:24:11,490
好的，没问题了
OK, well, thank you.

678
01:24:11,490 --> 01:24:13,780
这节课到此为止
Time for the bigger break, I suppose.





