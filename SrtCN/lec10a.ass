[Script Info]
; Script generated by Aegisub 3.2.1
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 712
PlayResY: 360

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: /Users/windfarer/Downloads/Lec10a.mp4
Video File: /Users/windfarer/Downloads/Lec10a.mp4
Video AR Mode: 1
Video AR Value: 1.333333
Video Zoom Percent: 1.000000
Scroll Position: 4
Active Line: 20
Video Position: 3786

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,.PingFang SC,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:19.36,0:00:22.26,Default,,0,0,0,,教授: 上节课 我们学习了\NPROFESSOR: Last time, we took a look at
Dialogue: 0,0:00:22.26,0:00:25.54,Default,,0,0,0,,一个Lisp 显式控制求值器\Nan explicit control evaluator for Lisp,
Dialogue: 0,0:00:25.54,0:00:32.32,Default,,0,0,0,,它在如Lisp或查询语言等高级语言\Nand that bridged the gap between all these high-level languages
Dialogue: 0,0:00:32.32,0:00:36.40,Default,,0,0,0,,与传统的寄存器机器之间架起了桥梁\Nbridged the gap between that and a conventional register machine.
Dialogue: 0,0:00:36.40,0:00:42.46,Default,,0,0,0,,事实上 你可以将显式控制求值器\NAnd in fact, you can think of the explicit control evaluator either as, say,
Dialogue: 0,0:00:42.46,0:00:55.20,Default,,0,0,0,,#TBD \Nthe code for a Lisp interpreter if you wanted to implement it in the assembly language of some conventional register transfer machine, or, if you like, you can think of it as the microcode of some machine that's going to be specially designed to run Lisp.
Dialogue: 0,0:00:55.20,0:01:00.92,Default,,0,0,0,,在任何一种情况下 我们得到一种能够处理低级语言的机器\NIn either case, what we're doing is we're taking a machine that speaks some low-level language,
Dialogue: 0,0:01:00.92,0:01:07.26,Default,,0,0,0,,通过写一个解释器来让它能够执行像Lisp之类的高级语言\Nand we're raising the machine to a high-level language like Lisp by writing an interpreter.
Dialogue: 0,0:01:07.26,0:01:11.00,Default,,0,0,0,,来看个例子\NSo for instance,
Dialogue: 0,0:01:11.00,0:01:23.84,Default,,0,0,0,,这是一个概念上的 用于计算阶乘的专用机器\N here, conceptually, is a special purpose machine for computing factorials.
Dialogue: 0,0:01:23.84,0:01:28.26,Default,,0,0,0,,输入5 输出120 \NIt takes in five and puts out 120.
Dialogue: 0,0:01:28.26,0:01:33.16,Default,,0,0,0,,这个专用机器实际上是一个Lisp解释器\NAnd what this special purpose machine is actually a Lisp interpreter
Dialogue: 0,0:01:33.16,0:01:37.48,Default,,0,0,0,,它将自己设置为运行阶乘\Nthat's configured itself to run factorials,
Dialogue: 0,0:01:37.48,0:01:41.66,Default,,0,0,0,,因为你喂给它了阶乘机器的描述\Nbecause you feed into it a description of the factorial machine.
Dialogue: 0,0:01:41.66,0:01:43.70,Default,,0,0,0,,这就是解释器\NSo that's what an interpreter is.
Dialogue: 0,0:01:43.70,0:01:49.68,Default,,0,0,0,,它将自己设置为 模拟你所输入描述的机器\NIt configures itself to emulate a machine whose description you read in.
Dialogue: 0,0:01:49.68,0:01:52.04,Default,,0,0,0,,在Lisp解释器里是什么? \NNow, inside the Lisp interpreter, what's that?
Dialogue: 0,0:01:52.04,0:01:56.42,Default,,0,0,0,,里面可能是通用的寄存器语言解释器\NWell, that might be your general register language interpreter
Dialogue: 0,0:01:56.42,0:02:00.18,Default,,0,0,0,,它将自己设置为像Lisp解释器一样工作\Nthat configures itself to behave like a Lisp interpreter,
Dialogue: 0,0:02:00.18,0:02:03.24,Default,,0,0,0,,因为你输入了一系列寄存器语言编写的指令\Nbecause you put in a whole bunch of instructions in register language.
Dialogue: 0,0:02:03.24,0:02:06.10,Default,,0,0,0,,这就是显式控制求值器\NThis is the explicit control evaluator.
