[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: EN Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 640
PlayResY: 480

[Aegisub Project Garbage]
Scroll Position: 1252
Active Line: 1262
Video Position: 134759

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: EN,Calisto MT,21,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,0,2,10,10,30,1
Style: Declare,微软雅黑,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,0,8,10,10,10,1
Style: staff,微软雅黑,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0,2,5,10,10,10,1
Style: title,微软雅黑,35,&H001D64D9,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0,1,5,10,10,10,1
Style: Default,雅黑宋体,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,0,2,10,10,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:09.92,0:00:13.63,EN,,0,0,0,,Assignment, State, and Side-effects
Dialogue: 0,0:00:18.31,0:00:22.00,EN,,0,0,0,,PROFESSOR: Well, so far we've invented enough programming
Dialogue: 0,0:00:22.25,0:00:24.06,EN,,0,0,0,,to do some very complicated things.
Dialogue: 0,0:00:24.76,0:00:29.66,EN,,0,0,0,,And you surely learned a lot about programming at this point.
Dialogue: 0,0:00:29.66,0:00:31.48,EN,,0,0,0,,You've learned almost all the most important tricks
Dialogue: 0,0:00:31.86,0:00:35.87,EN,,0,0,0,,that usually don't get taught to people until they have had a lot of experience.
Dialogue: 0,0:00:36.41,0:00:40.08,EN,,0,0,0,,For example, data directed programming is a major trick,
Dialogue: 0,0:00:40.75,0:00:43.15,EN,,0,0,0,,and yesterday you also saw an interpreted language.
Dialogue: 0,0:00:45.02,0:00:48.46,EN,,0,0,0,,We did this all in a computer language,
Dialogue: 0,0:00:48.54,0:00:49.63,EN,,0,0,0,,at this point,
Dialogue: 0,0:00:49.88,0:00:51.95,EN,,0,0,0,,where there was no assignment statement.
Dialogue: 0,0:00:53.77,0:00:58.17,EN,,0,0,0,,And presumably, for those of you who've seen your Basic or Pascal or whatever,
Dialogue: 0,0:00:58.68,0:01:01.23,EN,,0,0,0,,that's usually considered the most important thing.
Dialogue: 0,0:01:01.79,0:01:03.82,EN,,0,0,0,,Well today, we're going to do something horrible.
Dialogue: 0,0:01:03.82,0:01:05.45,EN,,0,0,0,,We're going to add an assignment statement.
Dialogue: 0,0:01:07.21,0:01:09.14,EN,,0,0,0,,And since we can do all these wonderful things without it,
Dialogue: 0,0:01:09.14,0:01:10.17,EN,,0,0,0,,why should we add it?
Dialogue: 0,0:01:10.99,0:01:12.43,EN,,0,0,0,,An important thing to understand it
Dialogue: 0,0:01:12.46,0:01:15.71,EN,,0,0,0,,is that today we're going to first of all, have a rule,
Dialogue: 0,0:01:16.48,0:01:17.93,EN,,0,0,0,,which is going to always be obeyed,
Dialogue: 0,0:01:17.93,0:01:20.80,EN,,0,0,0,,which is the only reason we ever add a feature to our language
Dialogue: 0,0:01:21.53,0:01:23.14,EN,,0,0,0,,is because there is a good reason.
Dialogue: 0,0:01:23.93,0:01:27.28,EN,,0,0,0,,And the good reason is going to boil down to the ability,
Dialogue: 0,0:01:27.42,0:01:31.51,EN,,0,0,0,,you now get an ability to break a problem into pieces that are different sets of pieces
Dialogue: 0,0:01:31.51,0:01:33.44,EN,,0,0,0,,then you could have broken it down without that,
Dialogue: 0,0:01:34.38,0:01:36.16,EN,,0,0,0,,give you another means of decomposition.
Dialogue: 0,0:01:38.30,0:01:39.45,EN,,0,0,0,,However, let's just start.
Dialogue: 0,0:01:39.45,0:01:41.88,EN,,0,0,0,,Let me quick begin by reviewing
Dialogue: 0,0:01:41.88,0:01:47.37,EN,,0,0,0,,the kind of language that we have now.
Dialogue: 0,0:01:48.16,0:01:50.44,EN,,0,0,0,,We've been writing what's called functional programs.
Dialogue: 0,0:01:51.21,0:01:52.52,EN,,0,0,0,,And functional programs
Dialogue: 0,0:01:53.04,0:01:57.95,EN,,0,0,0,,are a kind of encoding of mathematical truths.
Dialogue: 0,0:01:58.88,0:02:00.51,EN,,0,0,0,,For example, when we look at
Dialogue: 0,0:02:00.51,0:02:04.09,EN,,0,0,0,,the factorial procedure that you see on the slide here,
Dialogue: 0,0:02:05.07,0:02:06.62,EN,,0,0,0,,it's basically two clauses.
Dialogue: 0,0:02:06.99,0:02:08.64,EN,,0,0,0,,If n is one, the result is one,
Dialogue: 0,0:02:08.64,0:02:11.20,EN,,0,0,0,,otherwise n times factorial n minus one.
Dialogue: 0,0:02:11.20,0:02:12.33,EN,,0,0,0,,That's factorial of n.
Dialogue: 0,0:02:12.89,0:02:14.27,EN,,0,0,0,,Well, that is factorial of n.
Dialogue: 0,0:02:14.83,0:02:16.87,EN,,0,0,0,,And written down in some other obscure notation
Dialogue: 0,0:02:16.87,0:02:19.32,EN,,0,0,0,,that you might have learned in calculus classes,
Dialogue: 0,0:02:20.30,0:02:22.11,EN,,0,0,0,,Ahh.. mathematical logic,
Dialogue: 0,0:02:22.11,0:02:26.36,EN,,0,0,0,,what you see there is if n equals one,
Dialogue: 0,0:02:27.13,0:02:29.90,EN,,0,0,0,,for the result of n factorial is one, otherwise,
Dialogue: 0,0:02:29.90,0:02:32.56,EN,,0,0,0,,greater than one, n factorial is n times n minus one factorial.
Dialogue: 0,0:02:32.56,0:02:33.55,EN,,0,0,0,,True statements,
Dialogue: 0,0:02:34.92,0:02:36.70,EN,,0,0,0,,that's the kind of language we've been using.
Dialogue: 0,0:02:37.00,0:02:39.23,EN,,0,0,0,,And whenever we have true statements of that sort,
Dialogue: 0,0:02:39.53,0:02:46.65,EN,,0,0,0,,there is a kind of, a way of understanding how they work
Dialogue: 0,0:02:47.40,0:02:51.12,EN,,0,0,0,,which is that such processes can be evolved by substitution.
Dialogue: 0,0:02:51.29,0:02:53.71,EN,,0,0,0,,And so we see on the second slide here,
Dialogue: 0,0:02:54.99,0:02:58.81,EN,,0,0,0,,that the way we understand the execution
Dialogue: 0,0:02:58.83,0:03:03.50,EN,,0,0,0,,implied by those statements in arranged in that order,
Dialogue: 0,0:03:04.04,0:03:07.76,EN,,0,0,0,,is that you do successive substitutions of arguments
Dialogue: 0,0:03:07.87,0:03:10.88,EN,,0,0,0,,for formal parameters in the body of a procedure.
Dialogue: 0,0:03:12.00,0:03:14.51,EN,,0,0,0,,This is basically a sequence of equalities.
Dialogue: 0,0:03:14.61,0:03:17.25,EN,,0,0,0,,Factorial four is four times factorial three.
Dialogue: 0,0:03:17.25,0:03:20.05,EN,,0,0,0,,That is four times three times factorial of two
Dialogue: 0,0:03:20.05,0:03:21.01,EN,,0,0,0,,and so on.
Dialogue: 0,0:03:21.23,0:03:23.87,EN,,0,0,0,,We're always preserving truth.
Dialogue: 0,0:03:25.23,0:03:28.84,EN,,0,0,0,,Even though we're talking about true statements,
Dialogue: 0,0:03:28.84,0:03:31.96,EN,,0,0,0,,there might be more than one organization of these true statements
Dialogue: 0,0:03:31.96,0:03:35.12,EN,,0,0,0,,to describe the computation of a particular function,
Dialogue: 0,0:03:36.32,0:03:38.42,EN,,0,0,0,,the computation of the value of a particular function.
Dialogue: 0,0:03:38.42,0:03:40.92,EN,,0,0,0,,So, for example, looking at the next one here.
Dialogue: 0,0:03:41.48,0:03:49.02,EN,,0,0,0,,Here is a way of looking at the sum of n and m.
Dialogue: 0,0:03:49.53,0:03:52.04,EN,,0,0,0,,And we did this one by a recursive process.
Dialogue: 0,0:03:52.89,0:03:58.16,EN,,0,0,0,,It's the increment of the sum of the decrement of n and m.
Dialogue: 0,0:04:00.08,0:04:05.62,EN,,0,0,0,,And, of course, there is some piece of mathematical logic here that describes that.
Dialogue: 0,0:04:06.17,0:04:10.49,EN,,0,0,0,,It's the increment of the sum of the decrement of n and m,
Dialogue: 0,0:04:11.40,0:04:12.22,EN,,0,0,0,,just like that.
Dialogue: 0,0:04:13.10,0:04:16.40,EN,,0,0,0,,So there's nothing particularly magic about that.
Dialogue: 0,0:04:16.41,0:04:20.01,EN,,0,0,0,,And, of course, if we can also look at an iterative process for the same,
Dialogue: 0,0:04:20.19,0:04:24.92,EN,,0,0,0,,a program that evolves an iterative process, for the same function.
Dialogue: 0,0:04:25.26,0:04:27.56,EN,,0,0,0,,These are two things that compute the same answer.
Dialogue: 0,0:04:30.08,0:04:34.83,EN,,0,0,0,,And we have equivalent mathematical truths that are arranged there.
Dialogue: 0,0:04:36.65,0:04:39.93,EN,,0,0,0,,And just the way you arrange those truths determine the particular process.
Dialogue: 0,0:04:40.30,0:04:43.42,EN,,0,0,0,,In the way choose and arrange them determines the process that's evolved.
Dialogue: 0,0:04:44.33,0:04:48.60,EN,,0,0,0,,So we have the flexibility of talking about both the function to be computed,
Dialogue: 0,0:04:48.60,0:04:50.19,EN,,0,0,0,,and the method by which it's computed.
Dialogue: 0,0:04:50.60,0:04:52.60,EN,,0,0,0,,So it's not clear we need more.
Dialogue: 0,0:04:53.61,0:04:55.50,EN,,0,0,0,,However, today I'm going to this awful thing.
Dialogue: 0,0:04:55.50,0:04:58.43,EN,,0,0,0,,I'm going to introduce this assignment operation.
Dialogue: 0,0:04:58.89,0:05:00.41,EN,,0,0,0,,Now, what is this?
Dialogue: 0,0:05:02.89,0:05:09.22,EN,,0,0,0,,Well, first of all, there is going to be another kind of kind of statement, if you will,
Dialogue: 0,0:05:09.22,0:05:10.84,EN,,0,0,0,,in a programming language called Set!
Dialogue: 0,0:05:12.41,0:05:15.96,EN,,0,0,0,,And SET! -- Things that do things like assignment,
Dialogue: 0,0:05:15.96,0:05:15.98,EN,,0,0,0,,
Dialogue: 0,0:05:15.98,0:05:17.85,EN,,0,0,0,,I'm going to put exclamation points after.
Dialogue: 0,0:05:18.51,0:05:20.96,EN,,0,0,0,,We'll talk about what that means in a second.
Dialogue: 0,0:05:20.96,0:05:23.01,EN,,0,0,0,,The exclamation point, again like question mark,
Dialogue: 0,0:05:23.01,0:05:25.88,EN,,0,0,0,,is an arbitrary thing we attach to the symbol which is the name,
Dialogue: 0,0:05:25.88,0:05:27.88,EN,,0,0,0,,has no significance to the system.
Dialogue: 0,0:05:28.08,0:05:30.21,EN,,0,0,0,,The only significance is to me and you
Dialogue: 0,0:05:30.40,0:05:34.41,EN,,0,0,0,,to alert you that this is an assignment of some sort.
Dialogue: 0,0:05:35.88,0:05:40.06,EN,,0,0,0,,But we're going to set a variable to a value.
Dialogue: 0,0:05:43.74,0:05:45.13,EN,,0,0,0,,And what that's going to mean
Dialogue: 0,0:05:45.13,0:05:48.28,EN,,0,0,0,,is that there is a time at which something happens.
Dialogue: 0,0:05:48.65,0:05:49.61,EN,,0,0,0,,Here's a time.
Dialogue: 0,0:05:49.86,0:05:52.14,EN,,0,0,0,,If I have time going this way,
Dialogue: 0,0:05:53.50,0:05:54.82,EN,,0,0,0,,it's a time axis.
Dialogue: 0,0:05:55.00,0:05:57.82,EN,,0,0,0,,Time progresses by walking down the page.
Dialogue: 0,0:05:58.70,0:06:00.92,EN,,0,0,0,,Then an assignment is the first thing we have
Dialogue: 0,0:06:00.92,0:06:04.30,EN,,0,0,0,,that produces the difference between a before and an after.
Dialogue: 0,0:06:06.59,0:06:08.72,EN,,0,0,0,,All the other programs that we've written,
Dialogue: 0,0:06:09.18,0:06:10.68,EN,,0,0,0,,that have no assignments in them,
Dialogue: 0,0:06:10.68,0:06:13.12,EN,,0,0,0,,the order in which they were evaluated didn't matter.
Dialogue: 0,0:06:14.70,0:06:15.96,EN,,0,0,0,,But assignment is special,
Dialogue: 0,0:06:15.96,0:06:17.69,EN,,0,0,0,,it produces a moment in time.
Dialogue: 0,0:06:17.96,0:06:24.73,EN,,0,0,0,,So there is a moment before the set occurs and after,
Dialogue: 0,0:06:27.61,0:06:32.70,EN,,0,0,0,,such that after this moment in time,
Dialogue: 0,0:06:33.60,0:06:43.76,EN,,0,0,0,,the variable has the value, value.
Dialogue: 0,0:06:49.23,0:06:51.50,EN,,0,0,0,,Independent of what value it had before,
Dialogue: 0,0:06:52.80,0:06:55.79,EN,,0,0,0,,set! changes the value of the variable.
Dialogue: 0,0:06:57.69,0:06:58.75,EN,,0,0,0,,Until this moment,
Dialogue: 0,0:06:58.75,0:07:01.50,EN,,0,0,0,,we had nothing that changed.
Dialogue: 0,0:07:03.21,0:07:04.11,EN,,0,0,0,,So, for example,
Dialogue: 0,0:07:04.84,0:07:06.23,EN,,0,0,0,,one of the things we can think of
Dialogue: 0,0:07:06.23,0:07:09.42,EN,,0,0,0,,is that the procedures we write for something like factorial
Dialogue: 0,0:07:09.64,0:07:12.75,EN,,0,0,0,,are in fact pretty much identical to the function factorial.
Dialogue: 0,0:07:13.77,0:07:16.44,EN,,0,0,0,,Factorial of four, if I write fact4,
Dialogue: 0,0:07:17.23,0:07:19.15,EN,,0,0,0,,independent of what context it's in,
Dialogue: 0,0:07:19.69,0:07:21.29,EN,,0,0,0,,and independent of how many times I write it,
Dialogue: 0,0:07:21.29,0:07:22.35,EN,,0,0,0,,I always get the same answer.
Dialogue: 0,0:07:23.29,0:07:24.12,EN,,0,0,0,,It's always 24.
Dialogue: 0,0:07:25.37,0:07:28.92,EN,,0,0,0,,It's a unique map from the argument to the answer.
Dialogue: 0,0:07:30.30,0:07:32.65,EN,,0,0,0,,And all the programs we've written so far are like that.
Dialogue: 0,0:07:33.52,0:07:36.03,EN,,0,0,0,,However, once I have assignment, that isn't true.
Dialogue: 0,0:07:36.96,0:07:38.16,EN,,0,0,0,,So, for example,
Dialogue: 0,0:07:39.18,0:07:48.52,EN,,0,0,0,,if I were to define count to be one.
Dialogue: 0,0:07:50.00,0:07:52.41,EN,,0,0,0,,And then I'm going to define also a procedure,
Dialogue: 0,0:07:55.16,0:07:56.83,EN,,0,0,0,,a simple procedure called demo,
Dialogue: 0,0:07:59.52,0:08:03.84,EN,,0,0,0,,which takes argument x and does the following operations.
Dialogue: 0,0:08:03.84,0:08:09.62,EN,,0,0,0,,It first sets x to x plus one.
Dialogue: 0,0:08:09.62,0:08:11.77,EN,,0,0,0,,My gosh, this looksjust like FORTRAN, right--
Dialogue: 0,0:08:13.16,0:08:14.17,EN,,0,0,0,,in a funny syntax.
Dialogue: 0,0:08:16.80,0:08:21.37,EN,,0,0,0,,And then add to x count,
Dialogue: 0,0:08:22.14,0:08:24.14,EN,,0,0,0,,Oh, I just made a mistake.
Dialogue: 0,0:08:24.38,0:08:25.23,EN,,0,0,0,,I want to say,
Dialogue: 0,0:08:25.47,0:08:27.12,EN,,0,0,0,,set! count to one plus count.
Dialogue: 0,0:08:30.37,0:08:31.79,EN,,0,0,0,,It's this thing defined here.
Dialogue: 0,0:08:34.41,0:08:36.51,EN,,0,0,0,,And then add and said plus x count.
Dialogue: 0,0:08:40.35,0:08:42.06,EN,,0,0,0,,Then I can try this procedure.
Dialogue: 0,0:08:42.48,0:08:43.20,EN,,0,0,0,,Let's run it.
Dialogue: 0,0:08:43.92,0:08:47.22,EN,,0,0,0,,So, suppose I get a prompt and I say,
Dialogue: 0,0:08:47.48,0:08:48.68,EN,,0,0,0,,demo 3
Dialogue: 0,0:08:52.19,0:08:53.20,EN,,0,0,0,,Well, what happens here?
Dialogue: 0,0:08:53.74,0:08:55.28,EN,,0,0,0,,The first thing that happens
Dialogue: 0,0:08:55.53,0:08:56.89,EN,,0,0,0,,is count is currently one.
Dialogue: 0,0:08:56.89,0:08:58.40,EN,,0,0,0,,Currently, there is a time.
Dialogue: 0,0:08:59.12,0:09:00.29,EN,,0,0,0,,We're talking about time.
Dialogue: 0,0:09:00.62,0:09:01.74,EN,,0,0,0,,x gets three.
Dialogue: 0,0:09:02.92,0:09:04.03,EN,,0,0,0,,At this moment,
Dialogue: 0,0:09:04.67,0:09:07.53,EN,,0,0,0,,I say, oh yes, count is incremented, so count is two.
Dialogue: 0,0:09:09.02,0:09:10.44,EN,,0,0,0,,two plus three is five.
Dialogue: 0,0:09:10.80,0:09:12.43,EN,,0,0,0,,So the answer I get out is five.
Dialogue: 0,0:09:14.48,0:09:21.58,EN,,0,0,0,,Then I say, demo of say, three again.
Dialogue: 0,0:09:23.60,0:09:24.56,EN,,0,0,0,,Okay, What do I get?
Dialogue: 0,0:09:24.83,0:09:27.40,EN,,0,0,0,,Well, now count is two, it's not one anymore,
Dialogue: 0,0:09:28.91,0:09:30.35,EN,,0,0,0,,because I have incremented it.
Dialogue: 0,0:09:30.92,0:09:32.64,EN,,0,0,0,,But now I go through this process,
Dialogue: 0,0:09:32.72,0:09:33.66,EN,,0,0,0,,three goes into x,
Dialogue: 0,0:09:34.17,0:09:37.40,EN,,0,0,0,,count becomes one plus count, so that's three now.
Dialogue: 0,0:09:38.08,0:09:39.62,EN,,0,0,0,,The sum of those two is six,
Dialogue: 0,0:09:39.62,0:09:40.94,EN,,0,0,0,,so the answer is six.
Dialogue: 0,0:09:41.92,0:09:43.03,EN,,0,0,0,,And what we see
Dialogue: 0,0:09:43.03,0:09:44.72,EN,,0,0,0,,is the same expression
Dialogue: 0,0:09:45.08,0:09:46.64,EN,,0,0,0,,leads to two different answers,
Dialogue: 0,0:09:48.75,0:09:49.96,EN,,0,0,0,,depending upon time.
Dialogue: 0,0:09:52.08,0:09:53.74,EN,,0,0,0,,So demo is not a function,
Dialogue: 0,0:09:54.17,0:09:56.12,EN,,0,0,0,,does not compute a mathematical function.
Dialogue: 0,0:09:59.88,0:10:02.09,EN,,0,0,0,,In fact, you could also see why now, of course,
Dialogue: 0,0:10:02.84,0:10:06.41,EN,,0,0,0,,this is the first place where the substitution model isn't going to work.
Dialogue: 0,0:10:07.72,0:10:09.55,EN,,0,0,0,,This kills the substitution model dead.
Dialogue: 0,0:10:11.28,0:10:13.82,EN,,0,0,0,,You know, with quotation there were some little problems
Dialogue: 0,0:10:13.85,0:10:17.18,EN,,0,0,0,,that a philosopher might notice with substitutions,
Dialogue: 0,0:10:17.18,0:10:19.87,EN,,0,0,0,,because you have to worry about what deductions you can make
Dialogue: 0,0:10:20.91,0:10:22.12,EN,,0,0,0,,when you substitute into quotes,
Dialogue: 0,0:10:22.34,0:10:23.92,EN,,0,0,0,,if you're allowed to do that at all.
Dialogue: 0,0:10:25.08,0:10:25.60,EN,,0,0,0,,But
Dialogue: 0,0:10:26.06,0:10:28.00,EN,,0,0,0,,here the substitution model is dead,
Dialogue: 0,0:10:28.11,0:10:29.40,EN,,0,0,0,,can't do anything at all.
Dialogue: 0,0:10:29.64,0:10:30.57,EN,,0,0,0,,Because,
Dialogue: 0,0:10:30.57,0:10:35.85,EN,,0,0,0,,Supposing I wanted to use a substitution model to consider substituting for count?
Dialogue: 0,0:10:37.10,0:10:41.16,EN,,0,0,0,,Well, my gosh, if I substitute for here and here,
Dialogue: 0,0:10:41.69,0:10:42.96,EN,,0,0,0,,they're different ones.
Dialogue: 0,0:10:44.44,0:10:45.96,EN,,0,0,0,,It's not the same count any more.
Dialogue: 0,0:10:46.48,0:10:47.64,EN,,0,0,0,,I get the wrong answer.
Dialogue: 0,0:10:47.97,0:10:50.14,EN,,0,0,0,,The substitution model is a static phenomenon
Dialogue: 0,0:10:51.18,0:10:52.56,EN,,0,0,0,,describes things that are true
Dialogue: 0,0:10:53.93,0:10:55.29,EN,,0,0,0,,and not things that change.
Dialogue: 0,0:10:55.50,0:10:57.04,EN,,0,0,0,,Here, we have truths that change.
Dialogue: 0,0:11:00.60,0:11:06.74,EN,,0,0,0,,OK, Well, before I give you any understanding of this,
Dialogue: 0,0:11:06.74,0:11:07.79,EN,,0,0,0,,this is very bad.
Dialogue: 0,0:11:07.79,0:11:09.72,EN,,0,0,0,,Now, we've lost our model of computation.
Dialogue: 0,0:11:10.28,0:11:10.80,EN,,0,0,0,,And,
Dialogue: 0,0:11:11.48,0:11:13.69,EN,,0,0,0,,pretty soon, I'm going to have to build you a new model of computation.
Dialogue: 0,0:11:14.66,0:11:17.87,EN,,0,0,0,,But ours plays with this, just now, in an informal sense.
Dialogue: 0,0:11:18.56,0:11:20.16,EN,,0,0,0,,Of course, what you already see
Dialogue: 0,0:11:20.51,0:11:22.70,EN,,0,0,0,,is that when I have something like assignment,
Dialogue: 0,0:11:23.12,0:11:24.51,EN,,0,0,0,,the model that we're going to need
Dialogue: 0,0:11:24.51,0:11:26.89,EN,,0,0,0,,is different from the model that we had before
Dialogue: 0,0:11:26.89,0:11:30.93,EN,,0,0,0,,in that, the variables, those symbols like count, or x
Dialogue: 0,0:11:30.93,0:11:34.07,EN,,0,0,0,,are no longer going to refer to the values they have,
Dialogue: 0,0:11:34.07,0:11:37.31,EN,,0,0,0,,but rather to some sort of place where the value restored.
Dialogue: 0,0:11:37.68,0:11:39.47,EN,,0,0,0,,We're going to have to think that way for a while.
Dialogue: 0,0:11:40.20,0:11:42.11,EN,,0,0,0,,And it's going to be a very bad thing
Dialogue: 0,0:11:42.11,0:11:43.47,EN,,0,0,0,,and cause a lot of trouble.
Dialogue: 0,0:11:44.49,0:11:48.25,EN,,0,0,0,,And so, as I said, the very fact that we're inventing this bad thing,
Dialogue: 0,0:11:48.25,0:11:50.09,EN,,0,0,0,,means that there had better be a good reason for it,
Dialogue: 0,0:11:50.37,0:11:52.86,EN,,0,0,0,,otherwise, just a waste of time and a lot of effort.
Dialogue: 0,0:11:53.39,0:11:55.55,EN,,0,0,0,,Let's just look at some of it just to play.
Dialogue: 0,0:11:55.88,0:11:58.59,EN,,0,0,0,,Supposing we write down the functional version,
Dialogue: 0,0:11:58.59,0:12:00.48,EN,,0,0,0,,functional meaning in the old style,
Dialogue: 0,0:12:01.37,0:12:04.60,EN,,0,0,0,,of factorial by an iterative process.
Dialogue: 0,0:12:09.59,0:12:13.28,EN,,0,0,0,,Factorial of n.
Dialogue: 0,0:12:18.38,0:12:24.35,EN,,0,0,0,,we're going to iterate of m and i,
Dialogue: 0,0:12:26.12,0:12:33.13,EN,,0,0,0,,which says if i is greater than n,
Dialogue: 0,0:12:33.77,0:12:35.51,EN,,0,0,0,,then the result is m,
Dialogue: 0,0:12:36.30,0:12:37.39,EN,,0,0,0,,otherwise,
Dialogue: 0,0:12:39.79,0:12:46.82,EN,,0,0,0,,the result of iterating the product of i and m.
Dialogue: 0,0:12:46.82,0:12:49.95,EN,,0,0,0,,So m is going to be the product that I'm accumulating.
Dialogue: 0,0:12:51.58,0:12:52.62,EN,,0,0,0,,m is the product.
Dialogue: 0,0:12:57.97,0:13:00.17,EN,,0,0,0,,And the count I'm going to increase by one.
Dialogue: 0,0:13:04.62,0:13:10.97,EN,,0,0,0,,Plus, ITER, ELSE, COND, define.
Dialogue: 0,0:13:11.95,0:13:13.04,EN,,0,0,0,,I'm going to start this up.
Dialogue: 0,0:13:17.16,0:13:19.79,EN,,0,0,0,,And these days, you should have no trouble reading something like this.
Dialogue: 0,0:13:20.86,0:13:25.15,EN,,0,0,0,,What I have here is a product there being accumulated and a counter.
Dialogue: 0,0:13:26.48,0:13:28.46,EN,,0,0,0,,I start them up both at one.
Dialogue: 0,0:13:28.89,0:13:30.92,EN,,0,0,0,,I'm going to buzz the counter up,
Dialogue: 0,0:13:30.92,0:13:33.12,EN,,0,0,0,,i goes to i plus one every time around.
Dialogue: 0,0:13:34.56,0:13:37.47,EN,,0,0,0,,But that's only way our putting a time on the process,
Dialogue: 0,0:13:38.48,0:13:40.04,EN,,0,0,0,,each of this is just a set of truths,
Dialogue: 0,0:13:40.49,0:13:41.34,EN,,0,0,0,,true rules.
Dialogue: 0,0:13:42.81,0:13:46.13,EN,,0,0,0,,And m is going to get a new values of i and m,
Dialogue: 0,0:13:46.13,0:13:47.82,EN,,0,0,0,,i times m each time around,
Dialogue: 0,0:13:48.68,0:13:50.48,EN,,0,0,0,,and eventually i is going to be bigger than n,
Dialogue: 0,0:13:50.49,0:13:52.06,EN,,0,0,0,,in which case, the answer's going to be m.
Dialogue: 0,0:13:52.67,0:13:54.80,EN,,0,0,0,,Now, I'm speaking to you, use time in this.
Dialogue: 0,0:13:55.68,0:13:57.45,EN,,0,0,0,,That's just because I know how the computer works.
Dialogue: 0,0:13:58.25,0:13:59.24,EN,,0,0,0,,But I didn't have to.
Dialogue: 0,0:13:59.26,0:14:02.30,EN,,0,0,0,,This could be a purely mathematical description at this point,
Dialogue: 0,0:14:02.30,0:14:03.74,EN,,0,0,0,,because substitution will work for this.
Dialogue: 0,0:14:05.10,0:14:08.14,EN,,0,0,0,,But let's set right down a similar sort of program,
Dialogue: 0,0:14:08.30,0:14:09.95,EN,,0,0,0,,using the same algorithm,
Dialogue: 0,0:14:10.73,0:14:12.11,EN,,0,0,0,,but with assignments.
Dialogue: 0,0:14:15.69,0:14:17.16,EN,,0,0,0,,So this is called the functional version.
Dialogue: 0,0:14:23.72,0:14:25.56,EN,,0,0,0,,I want to write down an imperative version.
Dialogue: 0,0:14:34.48,0:14:35.39,EN,,0,0,0,,Factorial of n.
Dialogue: 0,0:14:35.92,0:14:37.74,EN,,0,0,0,,I'm going to create my two variables.
Dialogue: 0,0:14:40.16,0:14:45.53,EN,,0,0,0,,Let i initialize itself to one,
Dialogue: 0,0:14:46.32,0:14:49.77,EN,,0,0,0,,and m be initialized to one, similar.
Dialogue: 0,0:14:51.15,0:14:52.19,EN,,0,0,0,,We'll create a loop
Dialogue: 0,0:14:59.31,0:15:07.27,EN,,0,0,0,,which has COND greater than i, and if i is greater than n, we're done.
Dialogue: 0,0:15:07.27,0:15:08.87,EN,,0,0,0,,And the result is m,
Dialogue: 0,0:15:08.87,0:15:10.38,EN,,0,0,0,,the product I'm accumulating.
Dialogue: 0,0:15:10.87,0:15:11.77,EN,,0,0,0,,Otherwise,
Dialogue: 0,0:15:15.52,0:15:17.40,EN,,0,0,0,,I'm going to write down three things to do.
Dialogue: 0,0:15:19.26,0:15:27.05,EN,,0,0,0,,I'm going to set! m to the product of i and m,
Dialogue: 0,0:15:29.36,0:15:35.20,EN,,0,0,0,,set! i to the sum of i and one,
Dialogue: 0,0:15:37.85,0:15:39.31,EN,,0,0,0,,and go around the loop again.
Dialogue: 0,0:15:40.41,0:15:43.02,EN,,0,0,0,,Looks very familiar to you FORTRAN programmers.
Dialogue: 0,0:15:44.73,0:15:46.64,EN,,0,0,0,,ELSE, COND, define,
Dialogue: 0,0:15:46.64,0:15:47.88,EN,,0,0,0,,funny syntax though.
Dialogue: 0,0:15:51.13,0:15:52.27,EN,,0,0,0,,Start the loop up,
Dialogue: 0,0:15:56.10,0:15:57.56,EN,,0,0,0,,and that's the program.
Dialogue: 0,0:15:59.15,0:16:00.52,EN,,0,0,0,,Now, this program,
Dialogue: 0,0:16:01.31,0:16:02.49,EN,,0,0,0,,how do we think about it?
Dialogue: 0,0:16:02.71,0:16:04.25,EN,,0,0,0,,Well, let's just say what we're seeing here.
Dialogue: 0,0:16:04.84,0:16:07.47,EN,,0,0,0,,There are two local variables, i and m,
Dialogue: 0,0:16:07.47,0:16:09.02,EN,,0,0,0,,that have been initialized to one.
Dialogue: 0,0:16:10.72,0:16:13.89,EN,,0,0,0,,Every time around the loop, I test to see if i is greater than n,
Dialogue: 0,0:16:13.89,0:16:15.08,EN,,0,0,0,,which is the input argument,
Dialogue: 0,0:16:15.30,0:16:18.14,EN,,0,0,0,,and if so, the result is the product being accumulated in m.
Dialogue: 0,0:16:19.16,0:16:21.21,EN,,0,0,0,,However, if it's not the end of the loop,
Dialogue: 0,0:16:21.21,0:16:22.89,EN,,0,0,0,,if I'm not done,
Dialogue: 0,0:16:23.64,0:16:25.55,EN,,0,0,0,,then what I'm going to do is change the product
Dialogue: 0,0:16:25.84,0:16:28.38,EN,,0,0,0,,to be the result of multiplying i times the current product.
Dialogue: 0,0:16:29.04,0:16:30.68,EN,,0,0,0,,Which is sort of what we were doing here.
Dialogue: 0,0:16:31.42,0:16:32.68,EN,,0,0,0,,Except here I wasn't changing.
Dialogue: 0,0:16:33.63,0:16:35.77,EN,,0,0,0,,I was making another copy,
Dialogue: 0,0:16:36.81,0:16:42.04,EN,,0,0,0,,because the substitution model says, you copy the body of the procedure
Dialogue: 0,0:16:43.08,0:16:45.88,EN,,0,0,0,,with the arguments substituted for the formal parameters.
Dialogue: 0,0:16:46.72,0:16:48.42,EN,,0,0,0,,Here I'm not worried about copying,
Dialogue: 0,0:16:48.42,0:16:50.52,EN,,0,0,0,,here I've changed the value of m.
Dialogue: 0,0:16:51.80,0:16:55.12,EN,,0,0,0,,I also then change the value of i to i plus one,
Dialogue: 0,0:16:55.61,0:16:56.96,EN,,0,0,0,,and go buzzing around.
Dialogue: 0,0:16:58.22,0:17:00.08,EN,,0,0,0,,Seems like essentially the same program,
Dialogue: 0,0:17:00.96,0:17:02.84,EN,,0,0,0,,but there are some ways of making errors here
Dialogue: 0,0:17:02.84,0:17:05.50,EN,,0,0,0,,that didn't exist until today.
Dialogue: 0,0:17:06.14,0:17:07.02,EN,,0,0,0,,For example,
Dialogue: 0,0:17:07.45,0:17:09.40,EN,,0,0,0,,if I were to do the horrible thing
Dialogue: 0,0:17:10.04,0:17:12.14,EN,,0,0,0,,of not being careful in writing my program
Dialogue: 0,0:17:12.64,0:17:16.08,EN,,0,0,0,,and interchange those two assignments,
Dialogue: 0,0:17:17.10,0:17:18.91,EN,,0,0,0,,the program wouldn't compute the same function.
Dialogue: 0,0:17:20.33,0:17:22.87,EN,,0,0,0,,I get a timing error because there's a dependency
Dialogue: 0,0:17:22.87,0:17:27.22,EN,,0,0,0,,that m depends upon having the last value of i.
Dialogue: 0,0:17:27.34,0:17:28.92,EN,,0,0,0,,If I try change i first,
Dialogue: 0,0:17:31.31,0:17:33.77,EN,,0,0,0,,then I've got the wrong value of i when I multiply by m.
Dialogue: 0,0:17:35.96,0:17:38.38,EN,,0,0,0,,It's a bug that wasn't available until this moment,
Dialogue: 0,0:17:38.38,0:17:40.59,EN,,0,0,0,,until we introduced something that had time in it.
Dialogue: 0,0:17:43.44,0:17:44.30,EN,,0,0,0,,So, as I said,
Dialogue: 0,0:17:45.53,0:17:47.39,EN,,0,0,0,,first we need a new model of computation,
Dialogue: 0,0:17:47.39,0:17:50.86,EN,,0,0,0,,and second, we have to be damn good reason for doing this kind of ugly thing.
Dialogue: 0,0:17:52.72,0:17:53.74,EN,,0,0,0,,Are there any questions?
Dialogue: 0,0:17:58.83,0:18:00.22,EN,,0,0,0,,Speak loudly, David
Dialogue: 0,0:18:00.40,0:18:03.47,EN,,0,0,0,,AUDIENCE: I'm confused about, we've introduced set now,
Dialogue: 0,0:18:03.90,0:18:06.36,EN,,0,0,0,,but we had let before and define before.
Dialogue: 0,0:18:06.89,0:18:09.70,EN,,0,0,0,,I'm confused about the difference between the three.
Dialogue: 0,0:18:09.70,0:18:13.25,EN,,0,0,0,,Wouldn't define work in the same situation as set!
Dialogue: 0,0:18:13.98,0:18:14.83,EN,,0,0,0,,if you introduced it a bit?
Dialogue: 0,0:18:14.83,0:18:19.31,EN,,0,0,0,,PROFESSOR: No, define is intended for setting something once the first time,
Dialogue: 0,0:18:19.31,0:18:21.36,EN,,0,0,0,,for making it, OK?
Dialogue: 0,0:18:22.08,0:18:24.70,EN,,0,0,0,,You've never seen me write on a blackboard
Dialogue: 0,0:18:25.60,0:18:26.94,EN,,0,0,0,,two defines in a row
Dialogue: 0,0:18:27.08,0:18:32.08,EN,,0,0,0,,whose intention was to change the old value of some variable to a new one.
Dialogue: 0,0:18:32.08,0:18:34.51,EN,,0,0,0,,AUDIENCE: Is that by convention or--
Dialogue: 0,0:18:34.51,0:18:36.35,EN,,0,0,0,,PROFESSOR: No, it's intention.
Dialogue: 0,0:18:36.35,0:18:38.92,EN,,0,0,0,,Okay? The answer is,
Dialogue: 0,0:18:39.69,0:18:40.84,EN,,0,0,0,,that, for example,
Dialogue: 0,0:18:40.84,0:18:42.27,EN,,0,0,0,,internal to a procedure,
Dialogue: 0,0:18:43.20,0:18:45.92,EN,,0,0,0,,two defines in a row are illegal,
Dialogue: 0,0:18:46.68,0:18:48.57,EN,,0,0,0,,two defines in a row of the same variable.
Dialogue: 0,0:18:50.24,0:18:51.74,EN,,0,0,0,,x can't be defined twice.
Dialogue: 0,0:18:51.74,0:18:55.20,EN,,0,0,0,,Whether or not a system catches that error is a different question,
Dialogue: 0,0:18:55.93,0:18:57.88,EN,,0,0,0,,but I legislate to you
Dialogue: 0,0:18:58.12,0:19:00.64,EN,,0,0,0,,that define happens once on anything.
Dialogue: 0,0:19:00.73,0:19:02.64,EN,,0,0,0,,Now, indeed, in interactive debugging,
Dialogue: 0,0:19:03.37,0:19:07.48,EN,,0,0,0,,we intend that you interacting with your computer will redefine things,
Dialogue: 0,0:19:08.19,0:19:11.21,EN,,0,0,0,,and so there's a special exception made for interactive debugging.
Dialogue: 0,0:19:11.82,0:19:16.48,EN,,0,0,0,,But define is intended to mean to set up something
Dialogue: 0,0:19:18.14,0:19:20.96,EN,,0,0,0,,which will be forever that value after that point.
Dialogue: 0,0:19:22.05,0:19:24.54,EN,,0,0,0,,It's as if all the defines were done at the beginning.
Dialogue: 0,0:19:26.09,0:19:30.92,EN,,0,0,0,,In fact, the only legal place to put a define in Scheme internal to a procedure
Dialogue: 0,0:19:31.02,0:19:33.36,EN,,0,0,0,,is just at the beginning of a lambda expression,
Dialogue: 0,0:19:34.47,0:19:37.66,EN,,0,0,0,,which is the beginning of the body of a procedure.
Dialogue: 0,0:19:40.40,0:19:45.80,EN,,0,0,0,,Now, let of course does nothing like either of that.
Dialogue: 0,0:19:48.09,0:19:49.55,EN,,0,0,0,,I mean, if you look at what's happening with a let,
Dialogue: 0,0:19:50.17,0:19:52.13,EN,,0,0,0,,this happens again exactly once.
Dialogue: 0,0:19:52.13,0:19:55.82,EN,,0,0,0,,It sets up a context where i and m are values one and one.
Dialogue: 0,0:19:56.83,0:20:00.57,EN,,0,0,0,,That context exists throughout this scope,
Dialogue: 0,0:20:01.31,0:20:02.80,EN,,0,0,0,,this region of the program.
Dialogue: 0,0:20:04.99,0:20:10.12,EN,,0,0,0,,However, you don't think of that let as setting i again.
Dialogue: 0,0:20:11.04,0:20:12.16,EN,,0,0,0,,It doesn't change it.
Dialogue: 0,0:20:12.16,0:20:14.01,EN,,0,0,0,,i never changes because of the let.
Dialogue: 0,0:20:15.28,0:20:16.81,EN,,0,0,0,,i gets created because of let.
Dialogue: 0,0:20:18.51,0:20:19.29,EN,,0,0,0,,In fact,
Dialogue: 0,0:20:19.73,0:20:21.42,EN,,0,0,0,,the let is a very simple idea.
Dialogue: 0,0:20:22.24,0:20:23.59,EN,,0,0,0,,Let does nothing more,
Dialogue: 0,0:20:23.59,0:20:31.62,EN,,0,0,0,,Let a variable one to have value one
Dialogue: 0,0:20:31.62,0:20:33.50,EN,,0,0,0,,I'll write this down a little bit more neatly;
Dialogue: 0,0:20:37.16,0:20:43.73,EN,,0,0,0,,Let's write, var one have value, the value of expression e1,
Dialogue: 0,0:20:43.73,0:20:47.36,EN,,0,0,0,,and variable two, have this value of the expression e2,
Dialogue: 0,0:20:48.14,0:20:49.74,EN,,0,0,0,,in an expression e3,
Dialogue: 0,0:20:51.60,0:21:05.80,EN,,0,0,0,,is the same thing as a procedure of var one and var two, the formal parameters,
Dialogue: 0,0:21:06.94,0:21:08.96,EN,,0,0,0,,and e3 being the body,
Dialogue: 0,0:21:10.91,0:21:14.00,EN,,0,0,0,,where var one is bound to the value of e1,
Dialogue: 0,0:21:14.27,0:21:16.91,EN,,0,0,0,,and var two gets the value of e2.
Dialogue: 0,0:21:19.53,0:21:23.26,EN,,0,0,0,,So this is, in fact, a perfectly understandable thing from a substitution point of view.
Dialogue: 0,0:21:24.89,0:21:27.95,EN,,0,0,0,,This is really the same expression written in two different ways.
Dialogue: 0,0:21:31.69,0:21:33.50,EN,,0,0,0,,In fact, the way the actual system works
Dialogue: 0,0:21:33.63,0:21:35.82,EN,,0,0,0,,is this gets translated into this before anything happens.
Dialogue: 0,0:21:37.64,0:21:41.77,EN,,0,0,0,,AUDIENCE: OK, I'm still unclear as then what makes the difference between a let and a define. They could--
Dialogue: 0,0:21:41.77,0:21:44.30,EN,,0,0,0,,PROFESSOR: A define is a syntactic sugar,
Dialogue: 0,0:21:44.62,0:21:49.10,EN,,0,0,0,,whereby, essentially a bunch of variables get created by lets and then set up once.
Dialogue: 0,0:21:57.10,0:21:59.74,EN,,0,0,0,,OK, time for the first break, I think. Thank you.
Dialogue: 0,0:22:02.52,0:22:12.84,EN,,0,0,0,,[JESU, JOY OF MAN'S DESIRING]
Dialogue: 0,0:22:12.84,0:22:17.84,EN,,0,0,0,,The Structure And Interpretation of Computer Programs
Dialogue: 0,0:22:48.81,0:22:52.67,EN,,0,0,0,,By: Prof. Harold Abelson && Gerald Jay Sussman
Dialogue: 0,0:22:52.67,0:22:56.52,EN,,0,0,0,,The Structure And Interpretation of Computer Programs
Dialogue: 0,0:22:56.52,0:23:00.59,EN,,0,0,0,,Assignment, State, and Side-effects
Dialogue: 0,0:23:04.28,0:23:06.11,EN,,0,0,0,,Well let's see.
Dialogue: 0,0:23:06.44,0:23:09.08,EN,,0,0,0,,I now have to rebuild the model of computation,
Dialogue: 0,0:23:09.77,0:23:14.16,EN,,0,0,0,,so you understand how some such mechanical mechanism could work
Dialogue: 0,0:23:14.91,0:23:16.46,EN,,0,0,0,,that can do what we've just talked about.
Dialogue: 0,0:23:17.53,0:23:21.39,EN,,0,0,0,,I just recently destroyed your substitution model.
Dialogue: 0,0:23:22.62,0:23:26.03,EN,,0,0,0,,Unfortunately, this model is significantly more complicated than the substitution model.
Dialogue: 0,0:23:26.62,0:23:27.93,EN,,0,0,0,,It's called the environment model.
Dialogue: 0,0:23:29.02,0:23:31.20,EN,,0,0,0,,And I'm going to have to introduce some terminology,
Dialogue: 0,0:23:32.03,0:23:34.51,EN,,0,0,0,,which is very good terminology for you to know anyway.
Dialogue: 0,0:23:34.51,0:23:35.74,EN,,0,0,0,,It's about names.
Dialogue: 0,0:23:36.51,0:23:39.63,EN,,0,0,0,,And we're going to give names to the kinds of names things have
Dialogue: 0,0:23:40.00,0:23:41.31,EN,,0,0,0,,and the way those names are used.
Dialogue: 0,0:23:42.48,0:23:47.94,EN,,0,0,0,,So this is a meta-description, if you will.
Dialogue: 0,0:23:48.56,0:23:50.85,EN,,0,0,0,,Anyway, there is a pile of an unfortunate terminology here,
Dialogue: 0,0:23:50.85,0:23:53.76,EN,,0,0,0,,but we're going to need this to understand what's called the environment model.
Dialogue: 0,0:23:54.70,0:23:57.53,EN,,0,0,0,,We're about to do a little bit of boring, dog-work here.
Dialogue: 0,0:23:58.04,0:24:01.58,EN,,0,0,0,,Let's look at the first transparency.
Dialogue: 0,0:24:02.25,0:24:06.97,EN,,0,0,0,,And we see a description of a word called bound.
Dialogue: 0,0:24:08.80,0:24:11.00,EN,,0,0,0,,And we're going to say that a variable, v,
Dialogue: 0,0:24:11.00,0:24:12.91,EN,,0,0,0,,is bound in an expression, e,
Dialogue: 0,0:24:13.41,0:24:21.52,EN,,0,0,0,,if the meaning of e is unchanged by the uniform replacement of a variable w,
Dialogue: 0,0:24:21.56,0:24:24.28,EN,,0,0,0,,not occurrent if for every occurrence of v in e.
Dialogue: 0,0:24:25.69,0:24:27.00,EN,,0,0,0,,Now that's a long sentence,
Dialogue: 0,0:24:27.37,0:24:29.96,EN,,0,0,0,,so, I think, I'm going to have to say a little bit about that
Dialogue: 0,0:24:29.98,0:24:32.62,EN,,0,0,0,,before we even fool around at all here.
Dialogue: 0,0:24:33.42,0:24:35.28,EN,,0,0,0,,Bound variables we're talking about here.
Dialogue: 0,0:24:44.16,0:24:45.56,EN,,0,0,0,,And you've seen lots of them.
Dialogue: 0,0:24:46.07,0:24:48.17,EN,,0,0,0,,You may not know that you've seen lots of them.
Dialogue: 0,0:24:48.24,0:24:52.24,EN,,0,0,0,,Well, I suppose in your logic, you saw a logical variables like,
Dialogue: 0,0:24:53.27,0:25:00.11,EN,,0,0,0,,for every x there exists a y such that p is true of x and y from your calculus class.
Dialogue: 0,0:25:02.88,0:25:05.82,EN,,0,0,0,,This variable, x, and this variable, y, are bound,
Dialogue: 0,0:25:07.08,0:25:07.92,EN,,0,0,0,,because,
Dialogue: 0,0:25:08.33,0:25:09.98,EN,,0,0,0,,the meaning of this expression
Dialogue: 0,0:25:09.98,0:25:15.61,EN,,0,0,0,,does not depend upon the particular letters I used to describe x and y.
Dialogue: 0,0:25:16.49,0:25:19.18,EN,,0,0,0,,If I were to change the w for x,
Dialogue: 0,0:25:19.84,0:25:25.68,EN,,0,0,0,,then said for every w there exists a y such that p is true of w and y,
Dialogue: 0,0:25:25.98,0:25:27.08,EN,,0,0,0,,it would be the same sentence.
Dialogue: 0,0:25:29.44,0:25:30.34,EN,,0,0,0,,That's what it means.
Dialogue: 0,0:25:30.34,0:25:34.89,EN,,0,0,0,,Or another case of this that you've seen is integral say,
Dialogue: 0,0:25:35.40,0:25:42.65,EN,,0,0,0,,from 0 to one of dx over one plus x square.
Dialogue: 0,0:25:46.03,0:25:47.92,EN,,0,0,0,,Well that's something you see all the time.
Dialogue: 0,0:25:47.92,0:25:50.92,EN,,0,0,0,,And this x is a bound variable.
Dialogue: 0,0:25:52.06,0:25:53.79,EN,,0,0,0,,If I change that to a t,
Dialogue: 0,0:25:54.15,0:25:56.25,EN,,0,0,0,,the expression is still the same thing.
Dialogue: 0,0:25:58.06,0:26:02.76,EN,,0,0,0,,This is a 1/4 of the arctan of one or something here, something like that.
Dialogue: 0,0:26:04.70,0:26:06.01,EN,,0,0,0,,Yes, that's the arctan of one.
Dialogue: 0,0:26:06.62,0:26:08.76,EN,,0,0,0,,So bound variables are actually fairly common,
Dialogue: 0,0:26:09.08,0:26:12.36,EN,,0,0,0,,for those of you who have played a bit with mathematics.
Dialogue: 0,0:26:13.26,0:26:17.47,EN,,0,0,0,,Well, let's go into the programming world.
Dialogue: 0,0:26:19.02,0:26:21.36,EN,,0,0,0,,Instead of the quantifier being something like,
Dialogue: 0,0:26:22.03,0:26:24.06,EN,,0,0,0,,for every, or there exists, or integral,
Dialogue: 0,0:26:24.06,0:26:26.43,EN,,0,0,0,,a quantifier is a symbol that binds a variable.
Dialogue: 0,0:26:27.47,0:26:28.99,EN,,0,0,0,,And we are going to use the quantifier lambda
Dialogue: 0,0:26:29.79,0:26:31.80,EN,,0,0,0,,as being the essential thing that binds variables.
Dialogue: 0,0:26:33.80,0:26:36.12,EN,,0,0,0,,And so we have some nice examples here
Dialogue: 0,0:26:36.59,0:26:44.14,EN,,0,0,0,,like that procedure of one argument y which does the following thing.
Dialogue: 0,0:26:44.14,0:26:46.96,EN,,0,0,0,,It calls the procedure of one argument x,
Dialogue: 0,0:26:47.87,0:26:51.13,EN,,0,0,0,,which multiplies x by y,
Dialogue: 0,0:26:52.88,0:26:54.52,EN,,0,0,0,,and applies that to three.
Dialogue: 0,0:26:58.76,0:27:01.66,EN,,0,0,0,,That procedure has the property there of two bound variables in it,
Dialogue: 0,0:27:02.01,0:27:02.92,EN,,0,0,0,,x and y
Dialogue: 0,0:27:04.83,0:27:07.47,EN,,0,0,0,,This quantifier, lambda here, binds this y,
Dialogue: 0,0:27:07.91,0:27:10.78,EN,,0,0,0,,and this quantifier, lambda, binds that x.
Dialogue: 0,0:27:12.11,0:27:17.05,EN,,0,0,0,,Because, if I were to take an arbitrary symbol does not occur in this expression like w
Dialogue: 0,0:27:17.98,0:27:21.04,EN,,0,0,0,,and replace all y's with w's in this expression,
Dialogue: 0,0:27:21.36,0:27:22.75,EN,,0,0,0,,the expression is still the same,
Dialogue: 0,0:27:23.66,0:27:24.80,EN,,0,0,0,,the same procedure.
Dialogue: 0,0:27:26.22,0:27:27.41,EN,,0,0,0,,And this is an important idea.
Dialogue: 0,0:27:27.41,0:27:29.64,EN,,0,0,0,,The reason why we had such things like that
Dialogue: 0,0:27:30.20,0:27:31.41,EN,,0,0,0,,is a kind of modularity.
Dialogue: 0,0:27:31.41,0:27:32.86,EN,,0,0,0,,If two people are writing programs,
Dialogue: 0,0:27:34.03,0:27:35.26,EN,,0,0,0,,and they work together,
Dialogue: 0,0:27:35.26,0:27:40.56,EN,,0,0,0,,it shouldn't matter what names they use internal to their own little machines that they're building.
Dialogue: 0,0:27:42.83,0:27:44.67,EN,,0,0,0,,And so, what I'm really telling you there,
Dialogue: 0,0:27:45.44,0:27:46.75,EN,,0,0,0,,is that, for example,
Dialogue: 0,0:27:46.84,0:27:51.26,EN,,0,0,0,,this is equivalent to that procedure of one argument y which
Dialogue: 0,0:27:52.35,0:27:59.23,EN,,0,0,0,,uses that procedure of one argument z which multiplies z by y.
Dialogue: 0,0:28:01.64,0:28:03.53,EN,,0,0,0,,Because nobody cares what I used in here.
Dialogue: 0,0:28:06.36,0:28:07.24,EN,,0,0,0,,It's a nice example.
Dialogue: 0,0:28:08.84,0:28:09.85,EN,,0,0,0,,On the other hand,
Dialogue: 0,0:28:11.07,0:28:14.33,EN,,0,0,0,,I have some variables that are not bound.
Dialogue: 0,0:28:15.23,0:28:15.96,EN,,0,0,0,,And example,
Dialogue: 0,0:28:20.27,0:28:21.76,EN,,0,0,0,,that procedure of one argument x
Dialogue: 0,0:28:22.09,0:28:25.04,EN,,0,0,0,,which multiplies x by y
Dialogue: 0,0:28:27.28,0:28:28.16,EN,,0,0,0,,In this case,
Dialogue: 0,0:28:29.45,0:28:30.75,EN,,0,0,0,,y is not bound.
Dialogue: 0,0:28:32.46,0:28:34.27,EN,,0,0,0,,Supposing y had the value three,
Dialogue: 0,0:28:35.26,0:28:36.80,EN,,0,0,0,,and z had the value four,
Dialogue: 0,0:28:38.83,0:28:44.27,EN,,0,0,0,,then this procedure would be the thing that multiplies its argument by three.
Dialogue: 0,0:28:44.86,0:28:47.39,EN,,0,0,0,,If I were to replace every instance of y with z,
Dialogue: 0,0:28:47.52,0:28:51.96,EN,,0,0,0,,I would have a different procedure which multiplies every argument that's given by four.
Dialogue: 0,0:28:53.87,0:28:56.40,EN,,0,0,0,,And, in fact, we have a name for such a variable.
Dialogue: 0,0:28:57.76,0:29:04.01,EN,,0,0,0,,Here, we say that a variable, v, is free in the expression, e,
Dialogue: 0,0:29:04.01,0:29:09.42,EN,,0,0,0,,if the meaning of the expression, e, is changed by the uniform replacement of a variable, w, not occurring in e,
Dialogue: 0,0:29:09.58,0:29:11.15,EN,,0,0,0,,for every occurrence of v and e.
Dialogue: 0,0:29:13.26,0:29:13.71,EN,,0,0,0,,So,
Dialogue: 0,0:29:14.49,0:29:22.76,EN,,0,0,0,,So that's why this variable over here, y, is a free variable.
Dialogue: 0,0:29:29.16,0:29:32.27,EN,,0,0,0,,And so free variables in this expression--
Dialogue: 0,0:29:33.76,0:29:35.18,EN,,0,0,0,,And other examples of that is that
Dialogue: 0,0:29:36.17,0:29:39.32,EN,,0,0,0,,is that procedure of one argument y,
Dialogue: 0,0:29:40.43,0:29:42.00,EN,,0,0,0,,which is just what we had before,
Dialogue: 0,0:29:42.27,0:29:44.60,EN,,0,0,0,,which uses that procedure of one argument x
Dialogue: 0,0:29:45.08,0:29:48.54,EN,,0,0,0,,that multiplies x by y--
Dialogue: 0,0:29:51.40,0:29:52.65,EN,,0,0,0,,use that on three.
Dialogue: 0,0:29:57.24,0:30:00.35,EN,,0,0,0,,This procedure has a free variable in it
Dialogue: 0,0:30:00.92,0:30:01.98,EN,,0,0,0,,which is asterisk.
Dialogue: 0,0:30:05.00,0:30:05.89,EN,,0,0,0,,See, because,
Dialogue: 0,0:30:05.89,0:30:08.08,EN,,0,0,0,,if that has a normal meaning of multiplication,
Dialogue: 0,0:30:09.44,0:30:12.78,EN,,0,0,0,,then if I were to replace uniformly all asterisks with pluses,
Dialogue: 0,0:30:14.25,0:30:16.38,EN,,0,0,0,,then the meaning of this expression would change.
Dialogue: 0,0:30:19.34,0:30:20.76,EN,,0,0,0,,That's what you mean by a free variable.
Dialogue: 0,0:30:22.68,0:30:24.81,EN,,0,0,0,,So, so far you've learned some logician words
Dialogue: 0,0:30:25.64,0:30:27.58,EN,,0,0,0,,which describe the way names are used.
Dialogue: 0,0:30:28.94,0:30:31.26,EN,,0,0,0,,Now, we have to do a little bit more playing around here,
Dialogue: 0,0:30:32.96,0:30:33.72,EN,,0,0,0,,a little bit more.
Dialogue: 0,0:30:35.13,0:30:36.22,EN,,0,0,0,,I want to tell you about
Dialogue: 0,0:30:36.81,0:30:39.76,EN,,0,0,0,,about the regions are over which variables are defined.
Dialogue: 0,0:30:42.17,0:30:42.88,EN,,0,0,0,,You see,
Dialogue: 0,0:30:43.37,0:30:45.69,EN,,0,0,0,,we've been very informal about this up till now,
Dialogue: 0,0:30:46.33,0:30:50.16,EN,,0,0,0,,and, of course, many of you have probably understood very clearly or most of you,
Dialogue: 0,0:30:50.36,0:30:52.84,EN,,0,0,0,,that the x that's being declared here
Dialogue: 0,0:30:53.64,0:30:55.18,EN,,0,0,0,,is defined only in here.
Dialogue: 0,0:30:58.28,0:31:00.91,EN,,0,0,0,,This x is the defined only in here,
Dialogue: 0,0:31:01.61,0:31:04.33,EN,,0,0,0,,and this y is defined only in here.
Dialogue: 0,0:31:07.10,0:31:09.16,EN,,0,0,0,,We have a name for such an idea. It's called a scope.
Dialogue: 0,0:31:11.61,0:31:13.58,EN,,0,0,0,,And let me give you another piece of terminology.
Dialogue: 0,0:31:14.70,0:31:15.77,EN,,0,0,0,,It's a long story.
Dialogue: 0,0:31:15.96,0:31:17.64,EN,,0,0,0,,If x is a bound variable in e,
Dialogue: 0,0:31:18.16,0:31:20.24,EN,,0,0,0,,then there is a lambda expression where it is bound.
Dialogue: 0,0:31:20.89,0:31:24.91,EN,,0,0,0,,So the only way you can get a bound variable ultimately is by lambda expression.
Dialogue: 0,0:31:24.91,0:31:25.96,EN,,0,0,0,,Then you may worry,
Dialogue: 0,0:31:26.22,0:31:29.05,EN,,0,0,0,,does define quite an exception to this?
Dialogue: 0,0:31:29.64,0:31:32.92,EN,,0,0,0,,And it turns out, we could always arrange things so you don't need any defines.
Dialogue: 0,0:31:32.92,0:31:33.96,EN,,0,0,0,,And we'll see that in a while.
Dialogue: 0,0:31:34.24,0:31:35.72,EN,,0,0,0,,It's a very magical thing.
Dialogue: 0,0:31:36.54,0:31:38.40,EN,,0,0,0,,So define really can go away.
Dialogue: 0,0:31:38.68,0:31:41.55,EN,,0,0,0,,The really, only thing that makes names is lambda .
Dialogue: 0,0:31:42.64,0:31:43.40,EN,,0,0,0,,That's its job.
Dialogue: 0,0:31:44.30,0:31:46.23,EN,,0,0,0,,And what's so amazing about a lot of things
Dialogue: 0,0:31:46.23,0:31:47.87,EN,,0,0,0,,is you can compute with only lambda.
Dialogue: 0,0:31:48.73,0:31:49.58,EN,,0,0,0,,But, in any case,
Dialogue: 0,0:31:51.74,0:31:55.76,EN,,0,0,0,,a lambda expression has a place where it declares a variable.
Dialogue: 0,0:31:55.76,0:31:57.10,EN,,0,0,0,,We call it the formal parameter list
Dialogue: 0,0:31:58.94,0:32:00.56,EN,,0,0,0,,and we say or the bound variable list.
Dialogue: 0,0:32:01.26,0:32:04.51,EN,,0,0,0,,We say that the lambda expression binds -- so it's a verb
Dialogue: 0,0:32:05.02,0:32:07.34,EN,,0,0,0,,--binds the variables declared in it's bound variable list.
Dialogue: 0,0:32:08.59,0:32:12.48,EN,,0,0,0,,In addition, those parts of the expression where the variable is defined,
Dialogue: 0,0:32:13.23,0:32:15.23,EN,,0,0,0,,which was declared by some declaration
Dialogue: 0,0:32:15.56,0:32:19.26,EN,,0,0,0,,is called the scope of that variable.
Dialogue: 0,0:32:20.44,0:32:21.92,EN,,0,0,0,,So these are scopes.
Dialogue: 0,0:32:22.25,0:32:23.68,EN,,0,0,0,,This is the scope of y.
Dialogue: 0,0:32:27.16,0:32:28.54,EN,,0,0,0,,And this is the scope of x--
Dialogue: 0,0:32:33.10,0:32:34.03,EN,,0,0,0,,that sort of thing.
Dialogue: 0,0:32:41.32,0:32:42.08,EN,,0,0,0,,OK,
Dialogue: 0,0:32:43.93,0:32:45.63,EN,,0,0,0,,well, now we have enough terminology
Dialogue: 0,0:32:46.60,0:32:51.76,EN,,0,0,0,,to begin to understand how to make a new model for computation
Dialogue: 0,0:32:51.96,0:32:53.77,EN,,0,0,0,,because the key thing going on here
Dialogue: 0,0:32:54.94,0:32:57.00,EN,,0,0,0,,is that we destroyed the substitution model,
Dialogue: 0,0:32:57.18,0:32:58.38,EN,,0,0,0,,and we now have to have a model
Dialogue: 0,0:32:58.62,0:33:02.32,EN,,0,0,0,,that represents the names as referring to places.
Dialogue: 0,0:33:03.93,0:33:05.34,EN,,0,0,0,,Because if we are going to change something,
Dialogue: 0,0:33:05.98,0:33:07.47,EN,,0,0,0,,then we have a place where it's stored.
Dialogue: 0,0:33:09.56,0:33:10.35,EN,,0,0,0,,You see,
Dialogue: 0,0:33:10.83,0:33:13.31,EN,,0,0,0,,if a name only refers to a value,
Dialogue: 0,0:33:14.04,0:33:16.36,EN,,0,0,0,,and if I tried to change the name's meaning,
Dialogue: 0,0:33:16.73,0:33:20.32,EN,,0,0,0,,well, that's not clear.
Dialogue: 0,0:33:20.32,0:33:24.68,EN,,0,0,0,,There's nothing that is the place that that name referred to.
Dialogue: 0,0:33:24.99,0:33:25.80,EN,,0,0,0,,How am I really saying it?
Dialogue: 0,0:33:25.92,0:33:29.54,EN,,0,0,0,,There're nothing shared among all of the instances of that name.
Dialogue: 0,0:33:29.87,0:33:31.68,EN,,0,0,0,,And what we really mean, by a name,
Dialogue: 0,0:33:31.68,0:33:32.97,EN,,0,0,0,,is that we find something out.
Dialogue: 0,0:33:34.33,0:33:36.36,EN,,0,0,0,,We've given something a name, and you have it,
Dialogue: 0,0:33:36.73,0:33:39.06,EN,,0,0,0,,and you have it, because I'm given you a reference to it,
Dialogue: 0,0:33:39.06,0:33:40.44,EN,,0,0,0,,and I've given you a reference to it.
Dialogue: 0,0:33:41.02,0:33:42.30,EN,,0,0,0,,And we'll see a lot about that.
Dialogue: 0,0:33:43.61,0:33:45.21,EN,,0,0,0,,So let me tell you about environments.
Dialogue: 0,0:33:46.19,0:33:48.76,EN,,0,0,0,,I need the overhead projection machine,
Dialogue: 0,0:33:49.31,0:33:49.98,EN,,0,0,0,,thank you.
Dialogue: 0,0:33:52.19,0:33:53.02,EN,,0,0,0,,And so here
Dialogue: 0,0:33:55.48,0:34:00.40,EN,,0,0,0,,is a bunch of environment structures.
Dialogue: 0,0:34:01.53,0:34:05.76,EN,,0,0,0,,An environment is a way of doing substitutions virtually.
Dialogue: 0,0:34:06.38,0:34:07.89,EN,,0,0,0,,It represents a place
Dialogue: 0,0:34:07.89,0:34:11.39,EN,,0,0,0,,where something is stored which is the substitutions that you haven't done.
Dialogue: 0,0:34:13.34,0:34:16.50,EN,,0,0,0,,It's a place where everything accumulates,
Dialogue: 0,0:34:16.50,0:34:21.13,EN,,0,0,0,,where the names of the variables are associated with the values they have
Dialogue: 0,0:34:21.79,0:34:22.56,EN,,0,0,0,,such that,
Dialogue: 0,0:34:22.75,0:34:25.90,EN,,0,0,0,,when you say, what dose this name mean,
Dialogue: 0,0:34:25.90,0:34:27.40,EN,,0,0,0,,you look it up in an environment.
Dialogue: 0,0:34:28.08,0:34:29.48,EN,,0,0,0,,So an environment is a function,
Dialogue: 0,0:34:30.80,0:34:31.48,EN,,0,0,0,,or a table,
Dialogue: 0,0:34:32.22,0:34:33.24,EN,,0,0,0,,or something like that.
Dialogue: 0,0:34:33.24,0:34:34.89,EN,,0,0,0,,But it's a structured sort of table.
Dialogue: 0,0:34:35.76,0:34:37.39,EN,,0,0,0,,It's made out of things called frames.
Dialogue: 0,0:34:41.13,0:34:44.46,EN,,0,0,0,,Frames are pieces of environment,
Dialogue: 0,0:34:44.89,0:34:46.01,EN,,0,0,0,,and they are chained together,
Dialogue: 0,0:34:47.07,0:34:48.19,EN,,0,0,0,,in some nice ways,
Dialogue: 0,0:34:49.00,0:34:52.09,EN,,0,0,0,,by what's called parent links or something like that.
Dialogue: 0,0:34:54.03,0:34:55.02,EN,,0,0,0,,So here,
Dialogue: 0,0:34:55.64,0:34:57.62,EN,,0,0,0,,we have an environment structure
Dialogue: 0,0:34:57.62,0:35:04.22,EN,,0,0,0,,consisting of three environments, basically, A, B, and C.
Dialogue: 0,0:35:05.10,0:35:07.63,EN,,0,0,0,,d is also an environment, but it's the same one,
Dialogue: 0,0:35:08.88,0:35:10.17,EN,,0,0,0,,they share.
Dialogue: 0,0:35:11.45,0:35:13.96,EN,,0,0,0,,And that's the essence of assignment.
Dialogue: 0,0:35:14.40,0:35:16.10,EN,,0,0,0,,If I change a variable,
Dialogue: 0,0:35:16.10,0:35:19.80,EN,,0,0,0,,a value of a valuable that lives here, like that one,
Dialogue: 0,0:35:19.80,0:35:23.50,EN,,0,0,0,,it should be visible from all places that you're looking at it from.
Dialogue: 0,0:35:23.50,0:35:24.84,EN,,0,0,0,,Take this one, x.
Dialogue: 0,0:35:24.84,0:35:28.19,EN,,0,0,0,,If I change the x to four,
Dialogue: 0,0:35:28.19,0:35:30.19,EN,,0,0,0,,it's visible from other places.
Dialogue: 0,0:35:30.19,0:35:32.19,EN,,0,0,0,,But I'm not going to worry about that right now.
Dialogue: 0,0:35:32.19,0:35:33.84,EN,,0,0,0,,We're going to talk a lot about that in a little while.
Dialogue: 0,0:35:34.56,0:35:35.53,EN,,0,0,0,,What do we have here?
Dialogue: 0,0:35:36.76,0:35:38.84,EN,,0,0,0,,Well, these are called frames. Here is a frame,
Dialogue: 0,0:35:39.40,0:35:40.38,EN,,0,0,0,,here's a frame
Dialogue: 0,0:35:40.76,0:35:41.84,EN,,0,0,0,,and here's a frame.
Dialogue: 0,0:35:43.18,0:35:45.20,EN,,0,0,0,,A is an environment which consists of
Dialogue: 0,0:35:45.20,0:35:47.82,EN,,0,0,0,,the table label which is frame two,
Dialogue: 0,0:35:48.36,0:35:51.05,EN,,0,0,0,,followed by the table labeled frame one.
Dialogue: 0,0:35:52.52,0:35:54.60,EN,,0,0,0,,And, in this environment,
Dialogue: 0,0:35:54.99,0:35:59.68,EN,,0,0,0,,in C, this environment, frame two,
Dialogue: 0,0:36:00.48,0:36:03.26,EN,,0,0,0,,uh....x and y are bound.
Dialogue: 0,0:36:04.06,0:36:04.78,EN,,0,0,0,,They have values.
Dialogue: 0,0:36:05.26,0:36:07.18,EN,,0,0,0,,Sorry, in frame one
Dialogue: 0,0:36:07.18,0:36:08.28,EN,,0,0,0,,In frame two,
Dialogue: 0,0:36:09.72,0:36:10.83,EN,,0,0,0,,z is bound,
Dialogue: 0,0:36:10.99,0:36:12.17,EN,,0,0,0,,and x is bound,
Dialogue: 0,0:36:12.44,0:36:13.69,EN,,0,0,0,,and y is bound,
Dialogue: 0,0:36:15.24,0:36:17.40,EN,,0,0,0,,but the value of x that we see,
Dialogue: 0,0:36:17.42,0:36:19.04,EN,,0,0,0,,looking from this point of view,
Dialogue: 0,0:36:20.01,0:36:21.74,EN,,0,0,0,,is this x. It's x is seven,
Dialogue: 0,0:36:22.36,0:36:24.84,EN,,0,0,0,,rather than this one which is three.
Dialogue: 0,0:36:24.84,0:36:27.61,EN,,0,0,0,,We say that this x shadows this x.
Dialogue: 0,0:36:31.05,0:36:32.49,EN,,0,0,0,,From environment three--
Dialogue: 0,0:36:33.44,0:36:34.45,EN,,0,0,0,,from frame three,
Dialogue: 0,0:36:34.45,0:36:35.73,EN,,0,0,0,,from environment b,
Dialogue: 0,0:36:35.73,0:36:37.18,EN,,0,0,0,,which refers to frame three,
Dialogue: 0,0:36:37.45,0:36:42.12,EN,,0,0,0,,we have variables m and y bound and also x.
Dialogue: 0,0:36:44.84,0:36:46.97,EN,,0,0,0,,This y shadow this one.
Dialogue: 0,0:36:48.65,0:36:51.00,EN,,0,0,0,,So the value, looking from this point of view,
Dialogue: 0,0:36:51.10,0:36:52.65,EN,,0,0,0,,of y is two.
Dialogue: 0,0:36:53.45,0:36:55.28,EN,,0,0,0,,The value for looking from this point of view
Dialogue: 0,0:36:55.28,0:36:58.64,EN,,0,0,0,,and m is one. And the value, looking from this point of view, of x is three.
Dialogue: 0,0:37:02.22,0:37:03.15,EN,,0,0,0,,So there we have
Dialogue: 0,0:37:03.15,0:37:05.52,EN,,0,0,0,,a very simple environment structure made out of frames.
Dialogue: 0,0:37:06.38,0:37:09.80,EN,,0,0,0,,These correspond to the applications of procedures.
Dialogue: 0,0:37:10.94,0:37:12.17,EN,,0,0,0,,And we'll see that in a second.
Dialogue: 0,0:37:14.41,0:37:17.60,EN,,0,0,0,,So now I have to make you some other nice little structure that we build.
Dialogue: 0,0:37:20.75,0:37:21.71,EN,,0,0,0,,Next slide,
Dialogue: 0,0:37:22.14,0:37:24.36,EN,,0,0,0,,we see an object,
Dialogue: 0,0:37:24.84,0:37:26.54,EN,,0,0,0,,which I'm going to draw procedures.
Dialogue: 0,0:37:27.93,0:37:28.94,EN,,0,0,0,,This is a procedure.
Dialogue: 0,0:37:30.11,0:37:31.90,EN,,0,0,0,,A procedure is made out of two parts.
Dialogue: 0,0:37:33.10,0:37:34.80,EN,,0,0,0,,It's sort of like a cons.
Dialogue: 0,0:37:37.21,0:37:38.38,EN,,0,0,0,,However, it's the two parts.
Dialogue: 0,0:37:40.84,0:37:44.72,EN,,0,0,0,,The first part refers to some code,
Dialogue: 0,0:37:45.69,0:37:46.94,EN,,0,0,0,,something that can be executed,
Dialogue: 0,0:37:47.42,0:37:50.00,EN,,0,0,0,,a set of instructions, if you will. You can think of it that way.
Dialogue: 0,0:37:50.68,0:37:52.83,EN,,0,0,0,,And the second part is the environment.
Dialogue: 0,0:37:53.88,0:37:55.50,EN,,0,0,0,,The procedure is the whole thing.
Dialogue: 0,0:37:57.16,0:37:58.40,EN,,0,0,0,,And we're going to have to use this
Dialogue: 0,0:37:58.71,0:38:05.16,EN,,0,0,0,,to capture the values of the free variables that occur in the procedure.
Dialogue: 0,0:38:06.17,0:38:08.09,EN,,0,0,0,,If a variable occurs in the procedure
Dialogue: 0,0:38:08.11,0:38:09.92,EN,,0,0,0,,it's either bound in that procedure or free.
Dialogue: 0,0:38:11.10,0:38:11.96,EN,,0,0,0,,If it's bound,
Dialogue: 0,0:38:12.57,0:38:14.56,EN,,0,0,0,,then the value will somehow be easy to find.
Dialogue: 0,0:38:16.11,0:38:18.64,EN,,0,0,0,,It will be in some easy environment to get at.
Dialogue: 0,0:38:18.91,0:38:19.87,EN,,0,0,0,,If it's free,
Dialogue: 0,0:38:20.86,0:38:23.02,EN,,0,0,0,,we're going to have to have something that goes with the procedure
Dialogue: 0,0:38:23.02,0:38:24.81,EN,,0,0,0,,that says where we'll go look for its value.
Dialogue: 0,0:38:27.05,0:38:29.21,EN,,0,0,0,,And the reasons why are not obvious yet,
Dialogue: 0,0:38:29.21,0:38:30.60,EN,,0,0,0,,but will be soon.
Dialogue: 0,0:38:32.32,0:38:34.97,EN,,0,0,0,,So here's a procedure object. It's a composite object
Dialogue: 0,0:38:35.34,0:38:41.64,EN,,0,0,0,,consisting of a piece of code and a environment structure.
Dialogue: 0,0:38:42.72,0:38:45.50,EN,,0,0,0,,Now I will tell you the new rules, the complete new rules,
Dialogue: 0,0:38:46.41,0:38:47.47,EN,,0,0,0,,for evaluation.
Dialogue: 0,0:38:50.54,0:38:52.20,EN,,0,0,0,,The first rule is-- there's only two of them.
Dialogue: 0,0:38:53.20,0:38:55.39,EN,,0,0,0,,These correspond to the substitution model rules.
Dialogue: 0,0:38:57.26,0:38:59.32,EN,,0,0,0,,And the first one has to do with
Dialogue: 0,0:38:59.66,0:39:02.78,EN,,0,0,0,,how do you apply a procedure to its arguments?
Dialogue: 0,0:39:05.28,0:39:08.54,EN,,0,0,0,,Okay, And a procedural object is applied to a set of arguments
Dialogue: 0,0:39:08.96,0:39:10.43,EN,,0,0,0,,by constructing a new frame.
Dialogue: 0,0:39:11.31,0:39:15.76,EN,,0,0,0,,That frame will contain the mapping of the former parameters to the actual parameters
Dialogue: 0,0:39:15.83,0:39:19.48,EN,,0,0,0,,of the arguments that were supplied in the call.
Dialogue: 0,0:39:21.42,0:39:22.20,EN,,0,0,0,,As you know,
Dialogue: 0,0:39:22.31,0:39:26.94,EN,,0,0,0,,when we make up a call to a procedure like lambda x times x y,
Dialogue: 0,0:39:26.94,0:39:29.13,EN,,0,0,0,,and we call that with the argument three,
Dialogue: 0,0:39:30.19,0:39:32.75,EN,,0,0,0,,then we're going to need some mapping of x to three.
Dialogue: 0,0:39:34.19,0:39:37.39,EN,,0,0,0,,It's the same thing as later substituting, if you will
Dialogue: 0,0:39:38.27,0:39:40.30,EN,,0,0,0,,the three for the x in the old model.
Dialogue: 0,0:39:42.00,0:39:44.80,EN,,0,0,0,,So I'm going to build a frame which contains x equals three
Dialogue: 0,0:39:45.15,0:39:46.60,EN,,0,0,0,,as the information in that frame.
Dialogue: 0,0:39:49.12,0:39:49.71,EN,,0,0,0,,Now,
Dialogue: 0,0:39:50.33,0:39:53.31,EN,,0,0,0,,the body of the procedure will then have to be evaluated which is this,
Dialogue: 0,0:39:54.16,0:39:56.44,EN,,0,0,0,,and will be evaluated in an environment
Dialogue: 0,0:39:57.80,0:40:08.03,EN,,0,0,0,,which is constructed by adjoining the new frame that we just made
Dialogue: 0,0:40:08.54,0:40:11.69,EN,,0,0,0,,to the environment which was part of the procedure that we applied.
Dialogue: 0,0:40:13.15,0:40:15.77,EN,,0,0,0,,So I'm going to make a little example of that here.
Dialogue: 0,0:40:19.20,0:40:24.12,EN,,0,0,0,,Supposing I have some environment.
Dialogue: 0,0:40:25.15,0:40:27.23,EN,,0,0,0,,Here's a frame which represents it.
Dialogue: 0,0:40:27.96,0:40:32.19,EN,,0,0,0,,And some procedure-- which I'm going to draw with circles here because it's easier than little triangles--
Dialogue: 0,0:40:33.04,0:40:36.36,EN,,0,0,0,,Ummm.. sorry, those are rhombuses,
Dialogue: 0,0:40:37.66,0:40:40.78,EN,,0,0,0,,rhomboidal little pieces of fruit jelly or something.
Dialogue: 0,0:40:42.68,0:40:45.32,EN,,0,0,0,,So here's a procedure which takes this environment.
Dialogue: 0,0:40:45.95,0:40:48.16,EN,,0,0,0,,And the procedure has a piece of code,
Dialogue: 0,0:40:48.16,0:40:49.68,EN,,0,0,0,,which is a lambda expression,
Dialogue: 0,0:40:50.12,0:40:51.69,EN,,0,0,0,,which binds x and y
Dialogue: 0,0:40:53.15,0:40:56.43,EN,,0,0,0,,and then executes an expression, e.
Dialogue: 0,0:40:57.93,0:40:58.99,EN,,0,0,0,,And this is the procedure.
Dialogue: 0,0:40:59.56,0:41:00.57,EN,,0,0,0,,We'll call it p.
Dialogue: 0,0:41:01.44,0:41:05.79,EN,,0,0,0,,I wish to apply that procedure to three and four.
Dialogue: 0,0:41:06.38,0:41:08.36,EN,,0,0,0,,So I want to do p of three and four.
Dialogue: 0,0:41:09.76,0:41:12.17,EN,,0,0,0,,What I'm going to do, of course, is make a new frame.
Dialogue: 0,0:41:13.15,0:41:14.12,EN,,0,0,0,,I build a frame
Dialogue: 0,0:41:15.24,0:41:18.28,EN,,0,0,0,,which contains x equals three,
Dialogue: 0,0:41:18.84,0:41:20.51,EN,,0,0,0,,and y equals four.
Dialogue: 0,0:41:21.69,0:41:23.48,EN,,0,0,0,,I'm going to connect that frame
Dialogue: 0,0:41:24.27,0:41:25.37,EN,,0,0,0,,to this frame over here.
Dialogue: 0,0:41:27.63,0:41:28.99,EN,,0,0,0,,And then this environment,
Dialogue: 0,0:41:29.68,0:41:30.97,EN,,0,0,0,,with I will call b,
Dialogue: 0,0:41:31.55,0:41:35.02,EN,,0,0,0,,is the environment in which I will evaluate the body of e.
Dialogue: 0,0:41:39.88,0:41:40.33,EN,,0,0,0,,Now,
Dialogue: 0,0:41:41.95,0:41:45.04,EN,,0,0,0,,e may contain references to x and y and other things.
Dialogue: 0,0:41:46.84,0:41:49.95,EN,,0,0,0,,x and y will have values right here.
Dialogue: 0,0:41:50.70,0:41:52.52,EN,,0,0,0,,Other things will have their values here.
Dialogue: 0,0:41:55.05,0:41:56.25,EN,,0,0,0,,How do we get this frame?
Dialogue: 0,0:41:57.26,0:41:59.26,EN,,0,0,0,,That we do by the construction of procedures
Dialogue: 0,0:41:59.61,0:42:00.60,EN,,0,0,0,,which is the other rule.
Dialogue: 0,0:42:02.03,0:42:04.40,EN,,0,0,0,,And I think that's the next slide.
Dialogue: 0,0:42:05.34,0:42:06.12,EN,,0,0,0,,Rule two,
Dialogue: 0,0:42:07.80,0:42:09.90,EN,,0,0,0,,when a lambda expression is evaluated,
Dialogue: 0,0:42:09.90,0:42:11.76,EN,,0,0,0,,relative to a particular environment--
Dialogue: 0,0:42:14.19,0:42:14.40,EN,,0,0,0,,See,
Dialogue: 0,0:42:15.04,0:42:18.12,EN,,0,0,0,,the way I get a procedure is by evaluating the lambda expression.
Dialogue: 0,0:42:18.19,0:42:19.36,EN,,0,0,0,,Here's a lambda expression.
Dialogue: 0,0:42:20.04,0:42:21.12,EN,,0,0,0,,By evaluating it,
Dialogue: 0,0:42:21.90,0:42:23.96,EN,,0,0,0,,I get a procedure which I can apply to three.
Dialogue: 0,0:42:25.08,0:42:26.65,EN,,0,0,0,,Now this lambda expression
Dialogue: 0,0:42:26.65,0:42:30.38,EN,,0,0,0,,is evaluated in an environment where y is defined.
Dialogue: 0,0:42:31.84,0:42:35.84,EN,,0,0,0,,And I want the body of this which contains a free version of y.
Dialogue: 0,0:42:36.39,0:42:38.36,EN,,0,0,0,,y is free in here,
Dialogue: 0,0:42:38.72,0:42:40.38,EN,,0,0,0,,it's bound over the whole thing,
Dialogue: 0,0:42:41.36,0:42:42.75,EN,,0,0,0,,but it's free over here.
Dialogue: 0,0:42:43.32,0:42:46.24,EN,,0,0,0,,I want that y to be this one.
Dialogue: 0,0:42:47.44,0:42:55.13,EN,,0,0,0,,I evaluate this body of this procedure in the environment where y was created.
Dialogue: 0,0:42:55.32,0:42:58.40,EN,,0,0,0,,That's this kind of thing, because that was done by application.
Dialogue: 0,0:42:59.00,0:42:59.63,EN,,0,0,0,,Now,
Dialogue: 0,0:43:00.24,0:43:02.60,EN,,0,0,0,,if I ever want to look up the value of y,
Dialogue: 0,0:43:03.10,0:43:04.09,EN,,0,0,0,,I have to know where it is.
Dialogue: 0,0:43:04.54,0:43:06.42,EN,,0,0,0,,Therefore, this procedural was created,
Dialogue: 0,0:43:06.42,0:43:10.06,EN,,0,0,0,,the creation of the procedure which is the result of evaluating that lambda expression
Dialogue: 0,0:43:10.06,0:43:16.33,EN,,0,0,0,,had better capture a pointer or remember the frame in which y was bound.
Dialogue: 0,0:43:17.92,0:43:19.76,EN,,0,0,0,,So that's what this rule is telling us.
Dialogue: 0,0:43:22.11,0:43:23.13,EN,,0,0,0,,So, for example,
Dialogue: 0,0:43:24.44,0:43:29.32,EN,,0,0,0,,if I happen to be evaluating a lambda expression,
Dialogue: 0,0:43:30.89,0:43:33.32,EN,,0,0,0,,lambda expression in e,
Dialogue: 0,0:43:34.04,0:43:40.46,EN,,0,0,0,,lambda of say, x and y, let's call it g in e,
Dialogue: 0,0:43:41.08,0:43:42.36,EN,,0,0,0,,evaluating that.
Dialogue: 0,0:43:42.97,0:43:46.17,EN,,0,0,0,,all that means is I now construct a procedure object.
Dialogue: 0,0:43:47.10,0:43:48.28,EN,,0,0,0,,e is some environment.
Dialogue: 0,0:43:48.84,0:43:50.94,EN,,0,0,0,,e is something which has a pointer to it.
Dialogue: 0,0:43:51.79,0:43:56.68,EN,,0,0,0,,I construct a procedure object that points up to that environment,
Dialogue: 0,0:43:58.56,0:44:00.11,EN,,0,0,0,,where the code of that
Dialogue: 0,0:44:00.54,0:44:03.24,EN,,0,0,0,,is a lambda expression or whatever that translates into.
Dialogue: 0,0:44:06.24,0:44:07.56,EN,,0,0,0,,And this is the procedure.
Dialogue: 0,0:44:12.38,0:44:14.70,EN,,0,0,0,,So this produces for me-- this -- this
Dialogue: 0,0:44:14.94,0:44:16.37,EN,,0,0,0,,this object here,
Dialogue: 0,0:44:16.37,0:44:18.12,EN,,0,0,0,,this environment pointer,
Dialogue: 0,0:44:18.37,0:44:22.52,EN,,0,0,0,,captures the place where this lambda expression was evaluated,
Dialogue: 0,0:44:22.62,0:44:24.59,EN,,0,0,0,,where the definition was used,
Dialogue: 0,0:44:25.58,0:44:27.40,EN,,0,0,0,,where the definition was used to make a procedure,
Dialogue: 0,0:44:30.32,0:44:31.47,EN,,0,0,0,,to make the procedure.
Dialogue: 0,0:44:32.89,0:44:36.30,EN,,0,0,0,,So it picks up the environment from the place where that procedure was defined,
Dialogue: 0,0:44:37.42,0:44:38.92,EN,,0,0,0,,stores it in the procedure itself,
Dialogue: 0,0:44:39.60,0:44:40.97,EN,,0,0,0,,and then when the procedure is used,
Dialogue: 0,0:44:41.32,0:44:43.47,EN,,0,0,0,,the environment where it was defined is extended
Dialogue: 0,0:44:43.98,0:44:45.07,EN,,0,0,0,,with the new frame.
Dialogue: 0,0:44:48.72,0:44:52.33,EN,,0,0,0,,So this gives us a locus for putting where a variable has a value.
Dialogue: 0,0:44:53.04,0:44:53.96,EN,,0,0,0,,And, for example,
Dialogue: 0,0:44:53.96,0:44:56.81,EN,,0,0,0,,if there are lots of guys pointing in at that environment,
Dialogue: 0,0:44:57.74,0:45:00.33,EN,,0,0,0,,then they share that place.
Dialogue: 0,0:45:01.20,0:45:02.52,EN,,0,0,0,,And we'll see more of that shortly.
Dialogue: 0,0:45:04.01,0:45:05.34,EN,,0,0,0,,Well, now you have a new model
Dialogue: 0,0:45:06.38,0:45:09.92,EN,,0,0,0,,for understanding the execution of programs.
Dialogue: 0,0:45:11.36,0:45:12.78,EN,,0,0,0,,I suppose I'll take questions now,
Dialogue: 0,0:45:13.10,0:45:14.96,EN,,0,0,0,,and then we'll go on and use that for something.
Dialogue: 0,0:45:18.19,0:45:19.52,EN,,0,0,0,,AUDIENCE: Is it right to say then,
Dialogue: 0,0:45:19.52,0:45:23.96,EN,,0,0,0,,the environment is that linked chain of frames starting with--
Dialogue: 0,0:45:23.96,0:45:25.10,EN,,0,0,0,,PROFESSOR: That's right.
Dialogue: 0,0:45:25.48,0:45:26.64,EN,,0,0,0,,AUDIENCE:  working all the way back?
Dialogue: 0,0:45:27.71,0:45:31.45,EN,,0,0,0,,PROFESSOR: Yes, the environment is a sequence of frames linked together.
Dialogue: 0,0:45:32.43,0:45:35.47,EN,,0,0,0,,And the way I like to think about it, it's the pointer to the first one,
Dialogue: 0,0:45:36.88,0:45:38.72,EN,,0,0,0,,because once you've got that you've got them all.
Dialogue: 0,0:45:43.96,0:45:44.65,EN,,0,0,0,,Anybody else?
Dialogue: 0,0:45:45.20,0:45:49.36,EN,,0,0,0,,AUDIENCE: Is it possible to evaluate a procedure or to define a procedure in two different environments
Dialogue: 0,0:45:49.36,0:45:53.20,EN,,0,0,0,,such that it will behave differently, and have pointers to both--
Dialogue: 0,0:45:53.20,0:45:55.77,EN,,0,0,0,,PROFESSOR: Oh, yes. The same procedure is not going to have two different environments.
Dialogue: 0,0:45:56.90,0:45:59.02,EN,,0,0,0,,The same code,
Dialogue: 0,0:45:59.02,0:46:00.82,EN,,0,0,0,,the same lambda expression
Dialogue: 0,0:46:00.82,0:46:03.72,EN,,0,0,0,,can be evaluated in two environments producing two different procedures.
Dialogue: 0,0:46:06.03,0:46:07.18,EN,,0,0,0,,Each procedure--
Dialogue: 0,0:46:07.18,0:46:09.95,EN,,0,0,0,,AUDIENCE: Their definition has the same name. Their operation--
Dialogue: 0,0:46:09.95,0:46:11.92,EN,,0,0,0,,PROFESSOR: The definition is written the same, with the same characters.
Dialogue: 0,0:46:12.56,0:46:14.62,EN,,0,0,0,,I can evaluate that set of characters,
Dialogue: 0,0:46:14.93,0:46:18.14,EN,,0,0,0,,whatever, that list structure that defines,
Dialogue: 0,0:46:18.22,0:46:20.41,EN,,0,0,0,,that is the textual representation.
Dialogue: 0,0:46:20.91,0:46:24.86,EN,,0,0,0,,I can evaluate that in two different environments producing two different procedures.
Dialogue: 0,0:46:25.55,0:46:26.84,EN,,0,0,0,,Each of those procedures
Dialogue: 0,0:46:27.56,0:46:32.19,EN,,0,0,0,,has its own local sets of variables,
Dialogue: 0,0:46:32.34,0:46:33.45,EN,,0,0,0,,and we'll see that right now.
Dialogue: 0,0:46:36.70,0:46:37.36,EN,,0,0,0,,Anybody else?
Dialogue: 0,0:46:42.60,0:46:44.03,EN,,0,0,0,,OK, thank you. Let's take a break.
Dialogue: 0,0:46:47.98,0:46:57.61,EN,,0,0,0,,[JESU, JOY OF MAN'S DESIRING]
Dialogue: 0,0:46:57.61,0:47:02.03,EN,,0,0,0,,The Structure And Interpretation of Computer Programs
Dialogue: 0,0:47:05.98,0:47:09.69,EN,,0,0,0,,By: Prof. Harold Abelson && Gerald Jay Sussman
Dialogue: 0,0:47:09.69,0:47:13.44,EN,,0,0,0,,The Structure And Interpretation of Computer Programs
Dialogue: 0,0:47:13.47,0:47:18.84,EN,,0,0,0,,Assignment, State, and Side-effects
Dialogue: 0,0:47:22.67,0:47:25.69,EN,,0,0,0,,Well, now I've done this terrible thing to you.
Dialogue: 0,0:47:26.56,0:47:30.54,EN,,0,0,0,,I've introduced a very complicated thing,
Dialogue: 0,0:47:32.76,0:47:33.42,EN,,0,0,0,,assignment,
Dialogue: 0,0:47:34.51,0:47:38.08,EN,,0,0,0,,which destroys most of the interesting mathematical properties of our programs.
Dialogue: 0,0:47:41.07,0:47:42.46,EN,,0,0,0,,Why should I have done this?
Dialogue: 0,0:47:43.18,0:47:45.02,EN,,0,0,0,,What possible good could this do?
Dialogue: 0,0:47:46.51,0:47:48.86,EN,,0,0,0,,Clearly not a nice thing,
Dialogue: 0,0:47:49.60,0:47:51.23,EN,,0,0,0,,so I better have a good excuse.
Dialogue: 0,0:47:52.83,0:47:54.80,EN,,0,0,0,,Well, let's do a little bit of playing,
Dialogue: 0,0:47:54.80,0:47:58.35,EN,,0,0,0,,first of all, with some very interesting programs that have assignment.
Dialogue: 0,0:47:58.81,0:48:00.88,EN,,0,0,0,,Understand something special about them
Dialogue: 0,0:48:01.42,0:48:02.83,EN,,0,0,0,,that makes them somewhat valuable.
Dialogue: 0,0:48:04.96,0:48:06.70,EN,,0,0,0,,Start with a very simple program
Dialogue: 0,0:48:07.69,0:48:09.28,EN,,0,0,0,,I'm going to call make-counter.
Dialogue: 0,0:48:10.48,0:48:18.19,EN,,0,0,0,,I'm going to define make-counter
Dialogue: 0,0:48:24.17,0:48:28.12,EN,,0,0,0,,to be a procedure of one argument n
Dialogue: 0,0:48:29.23,0:48:32.94,EN,,0,0,0,,which returns as its value a procedure of no arguments--
Dialogue: 0,0:48:34.36,0:48:36.03,EN,,0,0,0,,a procedure that produces a procedure--
Dialogue: 0,0:48:36.84,0:48:44.35,EN,,0,0,0,,which sets n to the increment of n
Dialogue: 0,0:48:47.88,0:48:49.77,EN,,0,0,0,,and returns that value of n.
Dialogue: 0,0:48:55.37,0:48:57.54,EN,,0,0,0,,Now we're going to investigate the behavior of this.
Dialogue: 0,0:48:57.54,0:48:59.02,EN,,0,0,0,,It's a sort of interesting thing.
Dialogue: 0,0:48:59.82,0:49:01.45,EN,,0,0,0,,In order to investigate the behavior,
Dialogue: 0,0:49:01.45,0:49:03.08,EN,,0,0,0,,I have to make an environment model,
Dialogue: 0,0:49:04.11,0:49:05.98,EN,,0,0,0,,because we can't understand this any other way.
Dialogue: 0,0:49:08.65,0:49:09.63,EN,,0,0,0,,So let's just do that.
Dialogue: 0,0:49:10.00,0:49:12.86,EN,,0,0,0,,We start out with some sort of--
Dialogue: 0,0:49:13.24,0:49:15.90,EN,,0,0,0,,let's say there is a global environment that the machine is born with.
Dialogue: 0,0:49:16.13,0:49:17.12,EN,,0,0,0,,Global we'll call it.
Dialogue: 0,0:49:20.03,0:49:24.25,EN,,0,0,0,,And it's going to have in it a bunch of initial things.
Dialogue: 0,0:49:24.44,0:49:25.60,EN,,0,0,0,,We all know what it's got.
Dialogue: 0,0:49:25.72,0:49:30.88,EN,,0,0,0,,It's got things in it like say, plus, and times,
Dialogue: 0,0:49:32.24,0:49:37.26,EN,,0,0,0,,and quotient, and difference, and CAR,
Dialogue: 0,0:49:38.70,0:49:39.74,EN,,0,0,0,,and etcetera,
Dialogue: 0,0:49:41.45,0:49:42.48,EN,,0,0,0,,lots of things.
Dialogue: 0,0:49:42.88,0:49:43.98,EN,,0,0,0,,I don't know what they are,
Dialogue: 0,0:49:44.42,0:49:45.55,EN,,0,0,0,,some various squiggles
Dialogue: 0,0:49:46.08,0:49:48.88,EN,,0,0,0,,that are the things the machine is born with.
Dialogue: 0,0:49:51.21,0:49:53.23,EN,,0,0,0,,And by doing the definition here,
Dialogue: 0,0:49:54.68,0:49:55.76,EN,,0,0,0,,what I plan to do--
Dialogue: 0,0:49:56.32,0:49:57.31,EN,,0,0,0,,Well, what am I doing?
Dialogue: 0,0:49:57.31,0:49:59.58,EN,,0,0,0,,I'm doing this relative to the global environment.
Dialogue: 0,0:49:59.72,0:50:01.29,EN,,0,0,0,,So here's my environment pointer.
Dialogue: 0,0:50:03.72,0:50:06.70,EN,,0,0,0,,In order to do that I have to evaluate this lambda expression.
Dialogue: 0,0:50:08.35,0:50:10.01,EN,,0,0,0,,That means I make a procedure object.
Dialogue: 0,0:50:11.50,0:50:13.26,EN,,0,0,0,,So I'm going to make a procedure object here.
Dialogue: 0,0:50:17.36,0:50:18.68,EN,,0,0,0,,And the procedure object has,
Dialogue: 0,0:50:18.72,0:50:20.49,EN,,0,0,0,,as the place it's defined,
Dialogue: 0,0:50:21.16,0:50:22.35,EN,,0,0,0,,the global environment.
Dialogue: 0,0:50:24.06,0:50:25.79,EN,,0,0,0,,The procedure object contains
Dialogue: 0,0:50:28.16,0:50:31.47,EN,,0,0,0,,some code that represents a procedure of one argument n
Dialogue: 0,0:50:31.96,0:50:35.34,EN,,0,0,0,,which returns a procedure of no arguments which does something.
Dialogue: 0,0:50:38.24,0:50:43.28,EN,,0,0,0,,And the define is a way of changing this environment,
Dialogue: 0,0:50:44.32,0:50:46.73,EN,,0,0,0,,so that I now add to it a make-counter,
Dialogue: 0,0:50:52.28,0:50:55.05,EN,,0,0,0,,a special rule for the special thing defined.
Dialogue: 0,0:50:55.82,0:50:56.94,EN,,0,0,0,,But what that is,
Dialogue: 0,0:50:58.94,0:51:01.96,EN,,0,0,0,,is it gives me that pointer to that procedure.
Dialogue: 0,0:51:03.82,0:51:06.32,EN,,0,0,0,,So now the global environment contains make-counter as well.
Dialogue: 0,0:51:09.28,0:51:11.21,EN,,0,0,0,,Now, we're going to do some operations.
Dialogue: 0,0:51:11.87,0:51:13.50,EN,,0,0,0,,I'm going to use this to make some counters.
Dialogue: 0,0:51:14.99,0:51:16.20,EN,,0,0,0,,We'll see what a counter is.
Dialogue: 0,0:51:17.12,0:51:18.51,EN,,0,0,0,,So let's define
Dialogue: 0,0:51:23.32,0:51:26.65,EN,,0,0,0,,c1 to be a counter beginning at 0.
Dialogue: 0,0:51:35.72,0:51:38.38,EN,,0,0,0,,Well, we know how to do this now, according to the model.
Dialogue: 0,0:51:39.63,0:51:44.33,EN,,0,0,0,,I have to evaluate the expression make-counter in the global environment,
Dialogue: 0,0:51:45.40,0:51:46.27,EN,,0,0,0,,make-counter of 0.
Dialogue: 0,0:51:47.80,0:51:51.10,EN,,0,0,0,,Well, I look up make-counter and see that it's a procedure.
Dialogue: 0,0:51:53.61,0:51:55.29,EN,,0,0,0,,I'm going to have to apply that procedure.
Dialogue: 0,0:51:56.22,0:51:57.74,EN,,0,0,0,,The way I apply the procedure
Dialogue: 0,0:51:58.43,0:51:59.96,EN,,0,0,0,,is by constructing a frame.
Dialogue: 0,0:52:01.80,0:52:03.79,EN,,0,0,0,,Okay? So I construct a frame
Dialogue: 0,0:52:06.59,0:52:10.44,EN,,0,0,0,,which has a value for n in it
Dialogue: 0,0:52:11.77,0:52:12.64,EN,,0,0,0,,which is 0
Dialogue: 0,0:52:14.00,0:52:15.34,EN,,0,0,0,,and the parent environment
Dialogue: 0,0:52:15.87,0:52:19.32,EN,,0,0,0,,is the one which is the environment of definition of make-counter.
Dialogue: 0,0:52:23.93,0:52:28.36,EN,,0,0,0,,So I've made an environment by applying make-counter to 0.
Dialogue: 0,0:52:31.45,0:52:34.40,EN,,0,0,0,,Now, I have to evaluate the body of make-counter,
Dialogue: 0,0:52:34.41,0:52:37.72,EN,,0,0,0,,which is this lambda expression, in that environment.
Dialogue: 0,0:52:40.64,0:52:42.30,EN,,0,0,0,,Well evaluating this body,
Dialogue: 0,0:52:42.76,0:52:44.59,EN,,0,0,0,,this body is a lambda expression.
Dialogue: 0,0:52:46.28,0:52:48.86,EN,,0,0,0,,Evaluate a lambda expression means make a procedure object.
Dialogue: 0,0:52:49.56,0:52:51.00,EN,,0,0,0,,So I'm going to make a procedure object.
Dialogue: 0,0:52:56.76,0:52:58.29,EN,,0,0,0,,And that procedure object has
Dialogue: 0,0:52:58.29,0:53:00.46,EN,,0,0,0,,the environment it was defined in being that,
Dialogue: 0,0:53:04.20,0:53:05.88,EN,,0,0,0,,where n was defined to be 0.
Dialogue: 0,0:53:07.68,0:53:08.80,EN,,0,0,0,,And it has some code,
Dialogue: 0,0:53:08.83,0:53:11.37,EN,,0,0,0,,which is the procedure of no arguments
Dialogue: 0,0:53:11.40,0:53:15.28,EN,,0,0,0,,which does something, then sets something,
Dialogue: 0,0:53:15.28,0:53:16.73,EN,,0,0,0,,and returns n.
Dialogue: 0,0:53:17.88,0:53:18.81,EN,,0,0,0,,And this thing
Dialogue: 0,0:53:19.42,0:53:21.23,EN,,0,0,0,,is going to be the object,
Dialogue: 0,0:53:21.92,0:53:24.67,EN,,0,0,0,,which in the global environment, will have the name c1.
Dialogue: 0,0:53:26.12,0:53:28.33,EN,,0,0,0,,So we construct a name here, c1,
Dialogue: 0,0:53:28.64,0:53:32.14,EN,,0,0,0,,and say that equals that.
Dialogue: 0,0:53:35.48,0:53:37.36,EN,,0,0,0,,Now, but also make another counter,
Dialogue: 0,0:53:43.04,0:53:45.13,EN,,0,0,0,,c2 to be make-counter
Dialogue: 0,0:53:50.94,0:53:52.19,EN,,0,0,0,,say, starting with 10.
Dialogue: 0,0:53:54.25,0:53:55.90,EN,,0,0,0,,Then I do essentially the same thing.
Dialogue: 0,0:53:56.64,0:54:00.40,EN,,0,0,0,,I apply the make-counter procedure, which I got from here,
Dialogue: 0,0:54:00.99,0:54:04.52,EN,,0,0,0,,to make another frame with n being 10.
Dialogue: 0,0:54:05.63,0:54:09.18,EN,,0,0,0,,That frame has the global environment as its parent.
Dialogue: 0,0:54:10.04,0:54:11.80,EN,,0,0,0,,I then construct a procedure
Dialogue: 0,0:54:13.04,0:54:17.63,EN,,0,0,0,,which has that as it's frame of definition.
Dialogue: 0,0:54:18.27,0:54:21.66,EN,,0,0,0,,The code of it is
Dialogue: 0,0:54:21.80,0:54:24.38,EN,,0,0,0,,the procedure of no arguments which does something.
Dialogue: 0,0:54:25.54,0:54:28.60,EN,,0,0,0,,And it does a set, and so on.
Dialogue: 0,0:54:28.60,0:54:31.22,EN,,0,0,0,,And n comes out. Okay?
Dialogue: 0,0:54:31.45,0:54:34.83,EN,,0,0,0,,And c2 is this.
Dialogue: 0,0:54:36.88,0:54:39.32,EN,,0,0,0,,Well, you're already beginning to see something fairly interesting.
Dialogue: 0,0:54:40.17,0:54:41.92,EN,,0,0,0,,There are two n's here.
Dialogue: 0,0:54:42.92,0:54:44.19,EN,,0,0,0,,They are not one n.
Dialogue: 0,0:54:46.14,0:54:48.16,EN,,0,0,0,,Each time I called make-counter,
Dialogue: 0,0:54:48.64,0:54:50.25,EN,,0,0,0,,I made another instance of n.
Dialogue: 0,0:54:52.62,0:54:54.40,EN,,0,0,0,,These are distinct and separate from each other.
Dialogue: 0,0:54:57.79,0:55:00.28,EN,,0,0,0,,Now, let's do some execution, use those counters.
Dialogue: 0,0:55:05.92,0:55:15.00,EN,,0,0,0,,Well, what happens if I say, c1 at this point?
Dialogue: 0,0:55:15.84,0:55:17.34,EN,,0,0,0,,Well, I go over here,
Dialogue: 0,0:55:17.56,0:55:19.98,EN,,0,0,0,,and I say, oh yes, c1 is a procedure.
Dialogue: 0,0:55:20.64,0:55:22.78,EN,,0,0,0,,I'm going to call this procedure on no arguments,
Dialogue: 0,0:55:23.16,0:55:24.96,EN,,0,0,0,,but it has no parameters.
Dialogue: 0,0:55:24.96,0:55:25.63,EN,,0,0,0,,That's right.
Dialogue: 0,0:55:26.97,0:55:27.84,EN,,0,0,0,,What's its body?
Dialogue: 0,0:55:27.96,0:55:30.02,EN,,0,0,0,,Well, I have to look over here, because I didn't write it down.
Dialogue: 0,0:55:30.02,0:55:32.65,EN,,0,0,0,,It said, set n to one plus n
Dialogue: 0,0:55:33.80,0:55:34.89,EN,,0,0,0,,and return n,
Dialogue: 0,0:55:37.12,0:55:38.12,EN,,0,0,0,,increment n.
Dialogue: 0,0:55:38.97,0:55:41.60,EN,,0,0,0,,Well, the n it says is this one.
Dialogue: 0,0:55:43.08,0:55:44.60,EN,,0,0,0,,So I increment that n.
Dialogue: 0,0:55:45.80,0:55:47.00,EN,,0,0,0,,That becomes one,
Dialogue: 0,0:55:48.64,0:55:50.24,EN,,0,0,0,,and I return the value one.
Dialogue: 0,0:55:53.13,0:55:56.49,EN,,0,0,0,,Supposing I then called c2.
Dialogue: 0,0:55:58.38,0:55:59.20,EN,,0,0,0,,Well, what do I do?
Dialogue: 0,0:55:59.23,0:56:03.33,EN,,0,0,0,,I say c2 is this procedure which does the same thing,
Dialogue: 0,0:56:03.33,0:56:04.48,EN,,0,0,0,,but here's the n.
Dialogue: 0,0:56:05.33,0:56:06.57,EN,,0,0,0,,It becomes 11.
Dialogue: 0,0:56:10.97,0:56:14.59,EN,,0,0,0,,And so I have an 11 which is the value.
Dialogue: 0,0:56:15.92,0:56:18.32,EN,,0,0,0,,I then can say, let's try c1 again.
Dialogue: 0,0:56:20.91,0:56:22.56,EN,,0,0,0,,hum, c1 is this,
Dialogue: 0,0:56:23.28,0:56:24.16,EN,,0,0,0,,that's two,
Dialogue: 0,0:56:27.24,0:56:28.30,EN,,0,0,0,,so the answer is two.
Dialogue: 0,0:56:29.66,0:56:30.75,EN,,0,0,0,,And c2
Dialogue: 0,0:56:33.37,0:56:35.31,EN,,0,0,0,,gives me a 12 by the same method,
Dialogue: 0,0:56:35.74,0:56:37.55,EN,,0,0,0,,by walking down here looking at that
Dialogue: 0,0:56:37.55,0:56:39.28,EN,,0,0,0,,and saying, here's the n, I'm incrementing.
Dialogue: 0,0:56:41.64,0:56:43.68,EN,,0,0,0,,So what I have are computational objects.
Dialogue: 0,0:56:45.21,0:56:46.86,EN,,0,0,0,,There are two counters,
Dialogue: 0,0:56:48.96,0:56:51.02,EN,,0,0,0,,each with its own independent local state.
Dialogue: 0,0:56:55.48,0:56:56.62,EN,,0,0,0,,Let's talk about this a little.
Dialogue: 0,0:56:56.64,0:56:58.52,EN,,0,0,0,,This is a strange thing.
Dialogue: 0,0:57:01.12,0:57:02.22,EN,,0,0,0,,What's an object?
Dialogue: 0,0:57:04.11,0:57:06.12,EN,,0,0,0,,It's not at all obvious what an object is.
Dialogue: 0,0:57:07.55,0:57:09.45,EN,,0,0,0,,We like to think about objects,
Dialogue: 0,0:57:11.24,0:57:13.32,EN,,0,0,0,,because it's economical to think that way.
Dialogue: 0,0:57:14.62,0:57:17.28,EN,,0,0,0,,It's an intellectual economy.
Dialogue: 0,0:57:18.57,0:57:19.61,EN,,0,0,0,,I am an object.
Dialogue: 0,0:57:20.99,0:57:22.30,EN,,0,0,0,,You are an object.
Dialogue: 0,0:57:23.55,0:57:25.29,EN,,0,0,0,,We are not the same object.
Dialogue: 0,0:57:27.52,0:57:29.64,EN,,0,0,0,,I can divide the world into two parts,
Dialogue: 0,0:57:29.92,0:57:31.85,EN,,0,0,0,,me and you,
Dialogue: 0,0:57:31.92,0:57:33.31,EN,,0,0,0,,and there's other things as well,
Dialogue: 0,0:57:34.70,0:57:35.26,EN,,0,0,0,,such that
Dialogue: 0,0:57:35.44,0:57:39.50,EN,,0,0,0,,most of the things I might want to discuss about my workings
Dialogue: 0,0:57:39.68,0:57:40.89,EN,,0,0,0,,do not involve you,
Dialogue: 0,0:57:41.39,0:57:44.67,EN,,0,0,0,,and most of the things I want to discuss about your workings don't involve me.
Dialogue: 0,0:57:45.66,0:57:46.94,EN,,0,0,0,,I have a blood pressure,
Dialogue: 0,0:57:47.50,0:57:48.38,EN,,0,0,0,,a temperature,
Dialogue: 0,0:57:49.36,0:57:51.48,EN,,0,0,0,,a respiration rate,
Dialogue: 0,0:57:53.34,0:57:54.99,EN,,0,0,0,,certain amount of sugar in my blood,
Dialogue: 0,0:57:56.11,0:57:59.34,EN,,0,0,0,,and numerous, thousands, of state variables-- millions actually,
Dialogue: 0,0:57:59.37,0:58:00.65,EN,,0,0,0,,or I don't know how many--
Dialogue: 0,0:58:00.93,0:58:03.48,EN,,0,0,0,,huge numbers of state variables in the physical sense
Dialogue: 0,0:58:04.91,0:58:07.12,EN,,0,0,0,,which represent the state of me as a particle,
Dialogue: 0,0:58:09.15,0:58:10.64,EN,,0,0,0,,and you have gazillions of them as well.
Dialogue: 0,0:58:12.68,0:58:14.94,EN,,0,0,0,,And most of mine are uncoupled to most of yours.
Dialogue: 0,0:58:17.31,0:58:19.50,EN,,0,0,0,,So we can compute the properties of me
Dialogue: 0,0:58:20.56,0:58:22.83,EN,,0,0,0,,without worrying too much about the properties of you.
Dialogue: 0,0:58:23.82,0:58:25.77,EN,,0,0,0,,If we had to work about both of us together,
Dialogue: 0,0:58:25.96,0:58:27.82,EN,,0,0,0,,than the number of states that we have to consider
Dialogue: 0,0:58:27.82,0:58:30.01,EN,,0,0,0,,is the product of the number of states you have and the number of states I have.
Dialogue: 0,0:58:30.52,0:58:32.11,EN,,0,0,0,,But this way it's almost a sum.
Dialogue: 0,0:58:32.65,0:58:35.34,EN,,0,0,0,,Now, indeed there are forces that couple us.
Dialogue: 0,0:58:36.00,0:58:37.95,EN,,0,0,0,,I'm talking to you and your state changes.
Dialogue: 0,0:58:38.44,0:58:40.09,EN,,0,0,0,,I'm looking at you and my state changes.
Dialogue: 0,0:58:41.72,0:58:44.08,EN,,0,0,0,,Some of my state variables, a very few of them,
Dialogue: 0,0:58:44.33,0:58:46.07,EN,,0,0,0,,therefore, are coupled to yours.
Dialogue: 0,0:58:46.07,0:58:47.80,EN,,0,0,0,,If you were to suddenly yell very loud,
Dialogue: 0,0:58:47.80,0:58:48.88,EN,,0,0,0,,my blood pressure would go up.
Dialogue: 0,0:58:54.30,0:58:56.86,EN,,0,0,0,,However, and it may not be always appropriate
Dialogue: 0,0:58:57.17,0:59:01.16,EN,,0,0,0,,to think about the world as being made out of independent states and independent particles.
Dialogue: 0,0:59:02.12,0:59:04.46,EN,,0,0,0,,Lots of the bugs that occur in things like quantum mechanics,
Dialogue: 0,0:59:05.23,0:59:08.70,EN,,0,0,0,,or the bugs in our minds that occur when we think about things like quantum mechanics,
Dialogue: 0,0:59:08.89,0:59:10.97,EN,,0,0,0,,are due the fact that we are trying to think about things
Dialogue: 0,0:59:10.97,0:59:12.96,EN,,0,0,0,,being broken up into independent pieces,
Dialogue: 0,0:59:13.58,0:59:17.32,EN,,0,0,0,,when in fact there's more coupling than we see on the surface,
Dialogue: 0,0:59:18.01,0:59:19.44,EN,,0,0,0,,or that we want to believe in,
Dialogue: 0,0:59:19.61,0:59:21.69,EN,,0,0,0,,because we want to compute efficiently and effectively.
Dialogue: 0,0:59:22.19,0:59:23.82,EN,,0,0,0,,We've been trained to think that way.
Dialogue: 0,0:59:29.76,0:59:30.51,EN,,0,0,0,,Well, let's see.
Dialogue: 0,0:59:31.50,0:59:33.44,EN,,0,0,0,,How would we know if we had objects at all?
Dialogue: 0,0:59:35.12,0:59:37.34,EN,,0,0,0,,How can we tell if we have objects?
Dialogue: 0,0:59:37.64,0:59:41.45,EN,,0,0,0,,Consider some possible optical illusions.
Dialogue: 0,0:59:42.46,0:59:43.13,EN,,0,0,0,,This could be done.
Dialogue: 0,0:59:45.04,0:59:47.69,EN,,0,0,0,,These pieces of chalk are not appropriately identical,
Dialogue: 0,0:59:47.76,0:59:50.20,EN,,0,0,0,,but supposing you couldn't tell the difference of them by looking at them.
Dialogue: 0,0:59:52.04,0:59:53.32,EN,,0,0,0,,Well, there's a possibility
Dialogue: 0,0:59:53.32,0:59:55.16,EN,,0,0,0,,that this all a game I'm playing with mirrors.
Dialogue: 0,0:59:56.07,0:59:57.60,EN,,0,0,0,,It's really the same piece of chalk,
Dialogue: 0,0:59:59.36,1:00:00.48,EN,,0,0,0,,but you're seeing two of them.
Dialogue: 0,1:00:01.61,1:00:03.87,EN,,0,0,0,,How would you know if you're seeing one or two?
Dialogue: 0,1:00:05.04,1:00:06.70,EN,,0,0,0,,Well, there's only one way I know.
Dialogue: 0,1:00:07.37,1:00:08.94,EN,,0,0,0,,You grab one of them and change it
Dialogue: 0,1:00:09.45,1:00:10.67,EN,,0,0,0,,and see if the other one changed.
Dialogue: 0,1:00:14.01,1:00:14.67,EN,,0,0,0,,And it didn't,
Dialogue: 0,1:00:15.50,1:00:16.14,EN,,0,0,0,,so there's two of them.
Dialogue: 0,1:00:19.50,1:00:20.16,EN,,0,0,0,,And, on the other hand,
Dialogue: 0,1:00:20.17,1:00:22.20,EN,,0,0,0,,there is some other screwy properties of things like that.
Dialogue: 0,1:00:22.57,1:00:24.01,EN,,0,0,0,,Like, how do we know if something changed?
Dialogue: 0,1:00:25.00,1:00:27.93,EN,,0,0,0,,We have to look at it before and after the change.
Dialogue: 0,1:00:28.65,1:00:30.02,EN,,0,0,0,,The change is an assignment,
Dialogue: 0,1:00:30.02,1:00:31.45,EN,,0,0,0,,it's a moment in time.
Dialogue: 0,1:00:32.14,1:00:34.60,EN,,0,0,0,,But that means we have to know it was the same one that we're looking at.
Dialogue: 0,1:00:36.51,1:00:38.84,EN,,0,0,0,,So some very strange, and unusual,
Dialogue: 0,1:00:38.84,1:00:40.38,EN,,0,0,0,,and obscure, and -- I don't understand
Dialogue: 0,1:00:40.84,1:00:43.52,EN,,0,0,0,,the problems associated with assignment,
Dialogue: 0,1:00:44.45,1:00:46.28,EN,,0,0,0,,and change, and objects.
Dialogue: 0,1:00:47.29,1:00:48.99,EN,,0,0,0,,These could get very, very bad.
Dialogue: 0,1:00:51.40,1:00:52.12,EN,,0,0,0,,For example,
Dialogue: 0,1:00:53.31,1:00:55.60,EN,,0,0,0,,here I am, I am a particular person,
Dialogue: 0,1:00:56.16,1:00:57.72,EN,,0,0,0,,a particular object, okay?
Dialogue: 0,1:00:57.96,1:00:59.31,EN,,0,0,0,,Now, I can take out my knife,
Dialogue: 0,1:01:00.68,1:01:01.77,EN,,0,0,0,,and cut my fingernail.
Dialogue: 0,1:01:01.89,1:01:04.81,EN,,0,0,0,,Alright? A piece of my fingernail has fallen off onto the table.
Dialogue: 0,1:01:05.93,1:01:10.16,EN,,0,0,0,,I believe I am the same person I was a second ago,
Dialogue: 0,1:01:10.97,1:01:12.81,EN,,0,0,0,,but I'm not physically the same in the slightest.
Dialogue: 0,1:01:14.46,1:01:15.43,EN,,0,0,0,,I have changed.
Dialogue: 0,1:01:15.58,1:01:16.65,EN,,0,0,0,,Why am I the same?
Dialogue: 0,1:01:18.11,1:01:19.40,EN,,0,0,0,,What is the identity of me?
Dialogue: 0,1:01:20.96,1:01:23.50,EN,,0,0,0,,I don't know...Okay?
Dialogue: 0,1:01:25.05,1:01:27.88,EN,,0,0,0,,Except for the fact that I have some sort of identity.
Dialogue: 0,1:01:29.71,1:01:33.04,EN,,0,0,0,,And so, I think by introducing assignment and objects,
Dialogue: 0,1:01:33.64,1:01:38.28,EN,,0,0,0,,we have opened ourselves up to all the horrible questions of philosophy
Dialogue: 0,1:01:38.41,1:01:42.24,EN,,0,0,0,,that have been plaguing philosophers for some thousands of years about this sort of thing.
Dialogue: 0,1:01:43.42,1:01:44.99,EN,,0,0,0,,It's why mathematics is a lot cleaner.
Dialogue: 0,1:01:45.69,1:01:50.24,EN,,0,0,0,,Let's look at the best things I know to say about actions and identity.
Dialogue: 0,1:01:52.44,1:01:55.39,EN,,0,0,0,,We say that an action, a, had an effect on an object, x,
Dialogue: 0,1:01:55.77,1:01:56.70,EN,,0,0,0,,or equivalently,
Dialogue: 0,1:01:56.92,1:01:58.41,EN,,0,0,0,,that x was changed by a,
Dialogue: 0,1:01:58.89,1:02:01.66,EN,,0,0,0,,if some property, p, which was true of x before a,
Dialogue: 0,1:02:01.87,1:02:03.76,EN,,0,0,0,,became false of x after a.
Dialogue: 0,1:02:04.99,1:02:05.63,EN,,0,0,0,,That's test.
Dialogue: 0,1:02:06.62,1:02:09.66,EN,,0,0,0,,It still means I have to have the x before and after.
Dialogue: 0,1:02:10.91,1:02:12.54,EN,,0,0,0,,Or, the other way of saying this is,
Dialogue: 0,1:02:12.94,1:02:14.94,EN,,0,0,0,,we say that two objects x and y are the same for any action
Dialogue: 0,1:02:14.97,1:02:17.93,EN,,0,0,0,,which has an effect on x has the same effect on y
Dialogue: 0,1:02:19.63,1:02:21.39,EN,,0,0,0,,However, objects are very useful,
Dialogue: 0,1:02:21.44,1:02:23.18,EN,,0,0,0,,as I said, for intellectual economy.
Dialogue: 0,1:02:24.64,1:02:27.12,EN,,0,0,0,,One of the things that's incredibly useful about them,
Dialogue: 0,1:02:28.27,1:02:29.44,EN,,0,0,0,,is that the world
Dialogue: 0,1:02:30.78,1:02:34.80,EN,,0,0,0,,is made out of independent objects with independent local state.
Dialogue: 0,1:02:35.00,1:02:37.28,EN,,0,0,0,,We like to think that way, although it isn't completely true.
Dialogue: 0,1:02:39.68,1:02:42.03,EN,,0,0,0,,When we want to make very complicated programs
Dialogue: 0,1:02:42.03,1:02:43.26,EN,,0,0,0,,that deal with such a world,
Dialogue: 0,1:02:43.98,1:02:46.44,EN,,0,0,0,,if we want those programs to be understandable by us
Dialogue: 0,1:02:46.91,1:02:48.14,EN,,0,0,0,,and also to be changeable,
Dialogue: 0,1:02:48.73,1:02:51.12,EN,,0,0,0,,so that if we change the world we change the program only a little bit,
Dialogue: 0,1:02:51.39,1:02:53.70,EN,,0,0,0,,then we want there to be connections, isomorphism,
Dialogue: 0,1:02:53.82,1:02:56.88,EN,,0,0,0,,between the objects in the world and the objects in our mental model.
Dialogue: 0,1:02:58.76,1:03:01.44,EN,,0,0,0,,The modularity of the world can give us the modularity in our programming.
Dialogue: 0,1:03:02.41,1:03:05.36,EN,,0,0,0,,So we invent things called object-oriented programming and things like that
Dialogue: 0,1:03:05.88,1:03:08.36,EN,,0,0,0,,to provide us with that power.
Dialogue: 0,1:03:10.06,1:03:10.94,EN,,0,0,0,,But it's even easier.
Dialogue: 0,1:03:10.94,1:03:12.25,EN,,0,0,0,,Let's play a little game.
Dialogue: 0,1:03:12.27,1:03:13.18,EN,,0,0,0,,I want to play a little game,
Dialogue: 0,1:03:13.39,1:03:15.77,EN,,0,0,0,,show you an even easier example
Dialogue: 0,1:03:16.00,1:03:21.74,EN,,0,0,0,,or where modularity can be enhanced by using an assignment statement, judiciously.
Dialogue: 0,1:03:22.86,1:03:25.35,EN,,0,0,0,,One thing I want to enforce and impress on you,
Dialogue: 0,1:03:25.45,1:03:27.44,EN,,0,0,0,,is don't use assignment statements the way
Dialogue: 0,1:03:27.45,1:03:29.79,EN,,0,0,0,,you use it in FORTRAN or Basic or something or Pascal,
Dialogue: 0,1:03:30.00,1:03:31.71,EN,,0,0,0,,to do the things you don't have to do with it.
Dialogue: 0,1:03:34.04,1:03:36.62,EN,,0,0,0,,It's not the right way to think for most things.
Dialogue: 0,1:03:36.97,1:03:38.28,EN,,0,0,0,,Sometimes it's essential,
Dialogue: 0,1:03:38.68,1:03:39.69,EN,,0,0,0,,or maybe it's essential.
Dialogue: 0,1:03:39.69,1:03:40.97,EN,,0,0,0,,We'll see more about that too.
Dialogue: 0,1:03:42.24,1:03:44.22,EN,,0,0,0,,OK, let me show you a fun game here.
Dialogue: 0,1:03:47.61,1:03:49.42,EN,,0,0,0,,There was a mathematician
Dialogue: 0,1:03:49.68,1:03:53.69,EN,,0,0,0,,by the name of Cesaro--or Cesaro, Cesaro I suppose it is--
Dialogue: 0,1:03:54.48,1:03:57.45,EN,,0,0,0,,who figured out a clever way of computing pi.
Dialogue: 0,1:03:58.38,1:04:04.30,EN,,0,0,0,,It turns out that if I take two random numbers
Dialogue: 0,1:04:05.24,1:04:06.94,EN,,0,0,0,,two integers at random,
Dialogue: 0,1:04:07.74,1:04:09.48,EN,,0,0,0,,and compute the greatest common divisor,
Dialogue: 0,1:04:10.94,1:04:13.24,EN,,0,0,0,,their greatest common divisor is either one or it's not one.
Dialogue: 0,1:04:13.84,1:04:15.64,EN,,0,0,0,,If it's one, then they have no common divisors.
Dialogue: 0,1:04:18.14,1:04:20.68,EN,,0,0,0,,If their greatest common divisor is one--
Dialogue: 0,1:04:21.12,1:04:23.09,EN,,0,0,0,,the probability that two random numbers,
Dialogue: 0,1:04:23.09,1:04:26.38,EN,,0,0,0,,two numbers chosen at random, has as greatest common divisor one
Dialogue: 0,1:04:26.58,1:04:27.82,EN,,0,0,0,,is related to pi.
Dialogue: 0,1:04:29.32,1:04:30.11,EN,,0,0,0,,In fact--
Dialogue: 0,1:04:31.11,1:04:32.33,EN,,0,0,0,,yes, it's very strange--
Dialogue: 0,1:04:32.94,1:04:34.41,EN,,0,0,0,,of course there are other ways of computing pi,
Dialogue: 0,1:04:34.41,1:04:38.94,EN,,0,0,0,,like dropping pins on flags, and things like that, and sort of the same kind of thing.
Dialogue: 0,1:04:40.19,1:04:48.97,EN,,0,0,0,,So the probability of that the GCD of number one and number two,
Dialogue: 0,1:04:49.44,1:04:51.02,EN,,0,0,0,,two random numbers chosen,
Dialogue: 0,1:04:51.71,1:04:53.66,EN,,0,0,0,,is 6 over pi squared.
Dialogue: 0,1:04:55.61,1:04:56.83,EN,,0,0,0,,I'm not going to try to prove that.
Dialogue: 0,1:04:57.15,1:04:59.64,EN,,0,0,0,,It's actually not too hard and sort of fun.
Dialogue: 0,1:05:01.07,1:05:03.05,EN,,0,0,0,,How would we estimate such probability?
Dialogue: 0,1:05:03.53,1:05:06.46,EN,,0,0,0,,Well, the way we do that, the way we estimate the probabilities,
Dialogue: 0,1:05:07.23,1:05:08.65,EN,,0,0,0,,is by doing lots of experiments,
Dialogue: 0,1:05:09.20,1:05:12.01,EN,,0,0,0,,and then computing the ratios of the ones that come out one way
Dialogue: 0,1:05:12.01,1:05:13.58,EN,,0,0,0,,to the total number of experiments we do.
Dialogue: 0,1:05:16.32,1:05:17.28,EN,,0,0,0,,It's called Monte Carlo,
Dialogue: 0,1:05:18.04,1:05:22.38,EN,,0,0,0,,and it's useful in other contexts for doing things like integrals where you have lots and lots of variables--
Dialogue: 0,1:05:22.94,1:05:25.28,EN,,0,0,0,,the space which is limiting the dimensions you are doing you integral in.
Dialogue: 0,1:05:26.27,1:05:28.70,EN,,0,0,0,,But going back to here,
Dialogue: 0,1:05:29.76,1:05:31.72,EN,,0,0,0,,Let's look at this slide,
Dialogue: 0,1:05:33.96,1:05:36.92,EN,,0,0,0,,We can use Cesaro's method for estimating pi
Dialogue: 0,1:05:37.19,1:05:43.18,EN,,0,0,0,,with n trials by taking the square root of six over a Monte Carlo,
Dialogue: 0,1:05:43.29,1:05:46.46,EN,,0,0,0,,a Monte Carlo experiment with n trials,
Dialogue: 0,1:05:46.80,1:05:50.38,EN,,0,0,0,,with n trials using Cesaro's experiment,
Dialogue: 0,1:05:51.37,1:05:57.56,EN,,0,0,0,,where Cesaro's experiment is the test of whether the GCD of two random numbers--
Dialogue: 0,1:05:58.96,1:06:01.60,EN,,0,0,0,,And you can see that I've already got some assignments in here,
Dialogue: 0,1:06:01.84,1:06:03.13,EN,,0,0,0,,just by what I wrote.
Dialogue: 0,1:06:04.04,1:06:07.49,EN,,0,0,0,,The fact that this word rand, in parentheses,
Dialogue: 0,1:06:07.49,1:06:09.09,EN,,0,0,0,,therefore, that procedure call,
Dialogue: 0,1:06:09.09,1:06:11.39,EN,,0,0,0,,yields a different value than this one,
Dialogue: 0,1:06:11.39,1:06:13.72,EN,,0,0,0,,at least that's what I'm assuming by writing this this way,
Dialogue: 0,1:06:14.62,1:06:16.75,EN,,0,0,0,,indicates that this is not a function,
Dialogue: 0,1:06:18.20,1:06:20.57,EN,,0,0,0,,that there's internal state in it which is changing.
Dialogue: 0,1:06:22.27,1:06:28.64,EN,,0,0,0,,If the GCD of those two random numbers is equal to one,
Dialogue: 0,1:06:28.64,1:06:29.79,EN,,0,0,0,,that's the experiment.
Dialogue: 0,1:06:31.48,1:06:35.18,EN,,0,0,0,,So here I have an experimental method for estimating the value of pi.
Dialogue: 0,1:06:36.51,1:06:39.72,EN,,0,0,0,,Where, I can easily divide this problem into two parts.
Dialogue: 0,1:06:40.02,1:06:44.70,EN,,0,0,0,,One is the specific Monte Carlo experiment of Cesaro, which you just saw,
Dialogue: 0,1:06:44.99,1:06:48.56,EN,,0,0,0,,and the other is the general technique of doing Monte Carlo experiments.
Dialogue: 0,1:06:49.16,1:06:50.27,EN,,0,0,0,,And that's what this is.
Dialogue: 0,1:06:51.04,1:06:55.47,EN,,0,0,0,,If I want to do Monte Carlo experiments with n trials,
Dialogue: 0,1:06:55.67,1:06:58.36,EN,,0,0,0,,a certain number of trials, and a particular experiment,
Dialogue: 0,1:06:59.31,1:07:00.33,EN,,0,0,0,,the way I do that
Dialogue: 0,1:07:00.84,1:07:02.70,EN,,0,0,0,,is I make a little iterative procedure
Dialogue: 0,1:07:03.31,1:07:07.26,EN,,0,0,0,,which has variable the number of trials remaining and the number trials that have been passed,
Dialogue: 0,1:07:08.35,1:07:09.44,EN,,0,0,0,,that I've gotten true.
Dialogue: 0,1:07:10.13,1:07:12.21,EN,,0,0,0,,And if the number remaining is 0,
Dialogue: 0,1:07:12.21,1:07:15.36,EN,,0,0,0,,then the answer is the number past divided by this whole number of trials,
Dialogue: 0,1:07:16.04,1:07:17.52,EN,,0,0,0,,was the estimate of the probability.
Dialogue: 0,1:07:19.07,1:07:20.04,EN,,0,0,0,,And if it's not,
Dialogue: 0,1:07:20.04,1:07:22.08,EN,,0,0,0,,if I have more trials to do,
Dialogue: 0,1:07:22.08,1:07:23.82,EN,,0,0,0,,then let's do one. We do an experiment.
Dialogue: 0,1:07:23.85,1:07:27.30,EN,,0,0,0,,We call the procedure which is experiment on no arguments.
Dialogue: 0,1:07:27.30,1:07:28.43,EN,,0,0,0,,We do the experiment
Dialogue: 0,1:07:29.10,1:07:30.64,EN,,0,0,0,,and then, if that turned out to be true,
Dialogue: 0,1:07:30.82,1:07:32.25,EN,,0,0,0,,we go around the loop
Dialogue: 0,1:07:32.62,1:07:35.42,EN,,0,0,0,,decrementing the number of experiments we have to do by one
Dialogue: 0,1:07:35.70,1:07:37.48,EN,,0,0,0,,and incrementing the number that were passed.
Dialogue: 0,1:07:38.57,1:07:40.11,EN,,0,0,0,,And if the experiment was false,
Dialogue: 0,1:07:40.41,1:07:42.25,EN,,0,0,0,,we just go around the loop
Dialogue: 0,1:07:42.32,1:07:44.38,EN,,0,0,0,,decrementing the number of experiments remaining
Dialogue: 0,1:07:44.44,1:07:46.60,EN,,0,0,0,,and keeping the number passed the same.
Dialogue: 0,1:07:48.76,1:07:54.59,EN,,0,0,0,,We start this up iterating over the total number of trials with 0 experiments past.
Dialogue: 0,1:07:55.42,1:07:57.10,EN,,0,0,0,,A very elegant little program.
Dialogue: 0,1:07:57.74,1:08:00.55,EN,,0,0,0,,And I don't have to just do this with Cesaro's experiment,
Dialogue: 0,1:08:00.55,1:08:02.73,EN,,0,0,0,,it could be lots of Monte Carlo experiments I might do.
Dialogue: 0,1:08:03.36,1:08:07.12,EN,,0,0,0,,Of course, this depends upon the existence of some sort of random number generator.
Dialogue: 0,1:08:07.34,1:08:10.99,EN,,0,0,0,,And random number generators generally look something like this.
Dialogue: 0,1:08:13.60,1:08:16.32,EN,,0,0,0,,There is a random number generator--
Dialogue: 0,1:08:17.42,1:08:25.21,EN,,0,0,0,,is in fact a procedure which is going to do something just like the counter.
Dialogue: 0,1:08:25.61,1:08:27.52,EN,,0,0,0,,It's going to update an x
Dialogue: 0,1:08:28.33,1:08:31.82,EN,,0,0,0,,to the result of applying some function to x,
Dialogue: 0,1:08:32.20,1:08:35.28,EN,,0,0,0,,where this function is some screwy kind of function
Dialogue: 0,1:08:35.39,1:08:40.16,EN,,0,0,0,,that you might find out in Knuth's books on the details of programming.
Dialogue: 0,1:08:41.56,1:08:45.75,EN,,0,0,0,,He does these wonderful books that are full of the details of programming,
Dialogue: 0,1:08:45.75,1:08:48.52,EN,,0,0,0,,because I can't remember how to make a random number generator,
Dialogue: 0,1:08:48.63,1:08:50.62,EN,,0,0,0,,but I can look it up there, and I can find out.
Dialogue: 0,1:08:51.64,1:08:54.01,EN,,0,0,0,,And then, eventually, I return the value of x
Dialogue: 0,1:08:54.08,1:08:57.40,EN,,0,0,0,,which is the state variable internal to the random number generator.
Dialogue: 0,1:08:58.28,1:09:00.75,EN,,0,0,0,,That state variable is initialized somehow,
Dialogue: 0,1:09:01.32,1:09:02.24,EN,,0,0,0,,and has a value.
Dialogue: 0,1:09:03.39,1:09:08.11,EN,,0,0,0,,And this procedure is defined in the context where that variable is bound
Dialogue: 0,1:09:10.41,1:09:15.26,EN,,0,0,0,,So this is a hidden piece of local state that you see here.
Dialogue: 0,1:09:15.87,1:09:20.24,EN,,0,0,0,,And this procedure is defined in that context.
Dialogue: 0,1:09:21.56,1:09:23.66,EN,,0,0,0,,Now, that's a very simple thing to do.
Dialogue: 0,1:09:24.88,1:09:25.79,EN,,0,0,0,,And it's very nice.
Dialogue: 0,1:09:25.99,1:09:27.77,EN,,0,0,0,,Supposing, I didn't want to use assignments.
Dialogue: 0,1:09:29.10,1:09:31.47,EN,,0,0,0,,Supposing, I wanted to write this program without assignments.
Dialogue: 0,1:09:32.73,1:09:33.93,EN,,0,0,0,,What problems would I have?
Dialogue: 0,1:09:35.52,1:09:37.40,EN,,0,0,0,,Well, let's see.
Dialogue: 0,1:09:37.82,1:09:41.10,EN,,0,0,0,,I'd like to use the overhead machine here,
Dialogue: 0,1:09:42.06,1:09:42.70,EN,,0,0,0,,thank you.
Dialogue: 0,1:09:43.47,1:09:47.66,EN,,0,0,0,,First of all, let's look at the whole thing. It's a big story. Right?
Dialogue: 0,1:09:48.01,1:09:49.90,EN,,0,0,0,,Unfortunately, which tells you there is something wrong.
Dialogue: 0,1:09:50.96,1:09:52.75,EN,,0,0,0,,It's at least that big,
Dialogue: 0,1:09:53.42,1:09:54.60,EN,,0,0,0,,and it's monolithic.
Dialogue: 0,1:09:56.76,1:10:00.12,EN,,0,0,0,,You don't have to understand or look at the text there right now
Dialogue: 0,1:10:00.12,1:10:01.39,EN,,0,0,0,,to see that it's monolithic.
Dialogue: 0,1:10:01.92,1:10:04.89,EN,,0,0,0,,It isn't a thing which is Cesaro's experiment.
Dialogue: 0,1:10:04.89,1:10:07.90,EN,,0,0,0,,It's not pulled out from the Monte Carlo process.
Dialogue: 0,1:10:09.87,1:10:11.84,EN,,0,0,0,,It's not separated. Let's look why.
Dialogue: 0,1:10:14.22,1:10:15.85,EN,,0,0,0,,Remember, the constraint here
Dialogue: 0,1:10:15.85,1:10:17.87,EN,,0,0,0,,is that every procedure
Dialogue: 0,1:10:18.69,1:10:22.20,EN,,0,0,0,,return the same value for the same arguments.
Dialogue: 0,1:10:22.97,1:10:24.75,EN,,0,0,0,,Every procedure represents a function.
Dialogue: 0,1:10:26.92,1:10:28.50,EN,,0,0,0,,That's a different kind of constraint.
Dialogue: 0,1:10:28.50,1:10:31.21,EN,,0,0,0,,Because when I have assignments, I can  change some internal state variable.
Dialogue: 0,1:10:31.74,1:10:34.03,EN,,0,0,0,,So let's see how that causes things to go wrong.
Dialogue: 0,1:10:35.04,1:10:36.14,EN,,0,0,0,,Well, start at the beginning.
Dialogue: 0,1:10:37.50,1:10:41.92,EN,,0,0,0,,Ah...The estimate of pi looks sort of the same.
Dialogue: 0,1:10:42.66,1:10:45.88,EN,,0,0,0,,What I'm doing is I take the square root
Dialogue: 0,1:10:46.35,1:10:50.22,EN,,0,0,0,,of six over the random GCD test applied to n
Dialogue: 0,1:10:50.74,1:10:51.93,EN,,0,0,0,,whereas that's what this is.
Dialogue: 0,1:10:52.96,1:10:55.20,EN,,0,0,0,,But here, we are beginning to see something funny.
Dialogue: 0,1:10:55.20,1:10:57.93,EN,,0,0,0,,The random GCD test of a certain number of trials
Dialogue: 0,1:10:58.32,1:10:59.98,EN,,0,0,0,,is just like we had before,
Dialogue: 0,1:11:00.46,1:11:04.66,EN,,0,0,0,,an iteration on the number of trials remaining,
Dialogue: 0,1:11:04.66,1:11:06.80,EN,,0,0,0,,the number of trials that have been passed,
Dialogue: 0,1:11:08.27,1:11:09.71,EN,,0,0,0,,and another variable x.
Dialogue: 0,1:11:10.75,1:11:11.76,EN,,0,0,0,,What's that x?
Dialogue: 0,1:11:12.33,1:11:15.20,EN,,0,0,0,,That x is the state of the random number generator.
Dialogue: 0,1:11:19.00,1:11:21.16,EN,,0,0,0,,And it is now going to be used here.
Dialogue: 0,1:11:21.16,1:11:23.79,EN,,0,0,0,,The same random update function that I have over here
Dialogue: 0,1:11:23.79,1:11:27.15,EN,,0,0,0,,is the one I would have used in a random number generator if I were building it the other way,
Dialogue: 0,1:11:27.71,1:11:29.32,EN,,0,0,0,,the one I get out of Knuth's books.
Dialogue: 0,1:11:31.56,1:11:33.36,EN,,0,0,0,,x is going to get transformed into x1,
Dialogue: 0,1:11:33.37,1:11:34.36,EN,,0,0,0,,I need two random numbers.
Dialogue: 0,1:11:34.81,1:11:36.92,EN,,0,0,0,,And x1 is going to get transformed into x2,
Dialogue: 0,1:11:37.26,1:11:38.44,EN,,0,0,0,,I have two random numbers.
Dialogue: 0,1:11:39.50,1:11:42.14,EN,,0,0,0,,I then have to do exactly what I did before.
Dialogue: 0,1:11:42.52,1:11:44.19,EN,,0,0,0,,I take the GCD of x1 x2.
Dialogue: 0,1:11:44.22,1:11:47.15,EN,,0,0,0,,If that's one, then I go around the loop with X2 being the next value of x.
Dialogue: 0,1:11:54.78,1:11:55.98,EN,,0,0,0,,You see what's happened here
Dialogue: 0,1:11:56.88,1:11:58.70,EN,,0,0,0,,is that the state of the random number generator
Dialogue: 0,1:11:58.73,1:12:01.70,EN,,0,0,0,,is no longer confined to the insides of the random number generator.
Dialogue: 0,1:12:01.80,1:12:02.73,EN,,0,0,0,,It has leaked out.
Dialogue: 0,1:12:03.33,1:12:05.50,EN,,0,0,0,,It has leaked out into my procedure
Dialogue: 0,1:12:05.50,1:12:10.08,EN,,0,0,0,,that does the Monte Carlo experiment.
Dialogue: 0,1:12:10.70,1:12:11.87,EN,,0,0,0,,But what's worse than that,
Dialogue: 0,1:12:11.87,1:12:16.24,EN,,0,0,0,,is it's also, because it was contained inside my experiment itself, Cesaro,
Dialogue: 0,1:12:16.78,1:12:19.48,EN,,0,0,0,,It leaked out that two. Because Cesaro called twice,
Dialogue: 0,1:12:20.86,1:12:22.47,EN,,0,0,0,,has to have a different value each time,
Dialogue: 0,1:12:22.47,1:12:25.16,EN,,0,0,0,,if I going to have a legitimate experimental test.
Dialogue: 0,1:12:26.32,1:12:28.32,EN,,0,0,0,,So Cesaro can't be a function either,
Dialogue: 0,1:12:31.04,1:12:35.69,EN,,0,0,0,,unless I pass it the seed of the random number generator that is going to go wandering around.
Dialogue: 0,1:12:36.52,1:12:39.37,EN,,0,0,0,,So unfortunately, the seed of random number generator
Dialogue: 0,1:12:39.37,1:12:42.77,EN,,0,0,0,,has leaked out into Cesaro, from the random number generator,
Dialogue: 0,1:12:42.88,1:12:45.16,EN,,0,0,0,,that's leaked into the Monte Carlo experiment.
Dialogue: 0,1:12:45.64,1:12:49.12,EN,,0,0,0,,And, unfortunately, my Monte Carlo experiment here is no longer general.
Dialogue: 0,1:12:50.25,1:12:51.80,EN,,0,0,0,,The Monte Carlo experiment here
Dialogue: 0,1:12:52.03,1:12:54.73,EN,,0,0,0,,knows how many random numbers I need to do the experiment.
Dialogue: 0,1:12:58.96,1:12:59.74,EN,,0,0,0,,That's sort of horrible.
Dialogue: 0,1:13:00.08,1:13:02.54,EN,,0,0,0,,I lost an ability to decompose a problem into pieces,
Dialogue: 0,1:13:03.44,1:13:09.12,EN,,0,0,0,,because I wasn't willing to accept the little loop of information,
Dialogue: 0,1:13:09.50,1:13:12.43,EN,,0,0,0,,the feedback process,
Dialogue: 0,1:13:12.88,1:13:15.94,EN,,0,0,0,,that happens inside the random number generator before
Dialogue: 0,1:13:15.94,1:13:21.21,EN,,0,0,0,,that was made by having an assignment to a state variable that was confined to the random number generator.
Dialogue: 0,1:13:22.92,1:13:25.48,EN,,0,0,0,,So the fact that the random number generator is an object,
Dialogue: 0,1:13:25.92,1:13:27.37,EN,,0,0,0,,with an internal state variable,
Dialogue: 0,1:13:28.06,1:13:29.36,EN,,0,0,0,,it's affected by nothing,
Dialogue: 0,1:13:29.37,1:13:31.60,EN,,0,0,0,,but it'll give you something, and it will apply it's force to you,
Dialogue: 0,1:13:32.80,1:13:34.28,EN,,0,0,0,,that was what we're missing now.
Dialogue: 0,1:13:38.00,1:13:40.73,EN,,0,0,0,,OK, well I think we've seen
Dialogue: 0,1:13:40.73,1:13:42.30,EN,,0,0,0,,enough reason for doing this,
Dialogue: 0,1:13:42.83,1:13:45.24,EN,,0,0,0,,and it all sort of looks very wonderful.
Dialogue: 0,1:13:45.38,1:13:50.70,EN,,0,0,0,,Wouldn't it be nice if assignment was a good thing
Dialogue: 0,1:13:51.74,1:13:53.04,EN,,0,0,0,,and maybe it's worth it,
Dialogue: 0,1:13:53.28,1:13:54.14,EN,,0,0,0,,but I'm not sure.
Dialogue: 0,1:13:55.34,1:13:57.04,EN,,0,0,0,,As Mr. Gilbert and Sullivan said,
Dialogue: 0,1:13:57.04,1:13:58.51,EN,,0,0,0,,things are seldom what they seem,
Dialogue: 0,1:13:58.51,1:14:00.35,EN,,0,0,0,,skim milk masquerades as cream.
Dialogue: 0,1:14:01.87,1:14:03.90,EN,,0,0,0,,Are there any questions?
Dialogue: 0,1:14:16.97,1:14:18.30,EN,,0,0,0,,Are there any philosophers here?
Dialogue: 0,1:14:20.06,1:14:22.03,EN,,0,0,0,,Anybody want to argue about objects?
Dialogue: 0,1:14:24.32,1:14:25.50,EN,,0,0,0,,You're just floored, right?
Dialogue: 0,1:14:29.72,1:14:30.72,EN,,0,0,0,,And you haven't done your homework yet.
Dialogue: 0,1:14:30.73,1:14:32.00,EN,,0,0,0,,You haven't come up with a good question.
Dialogue: 0,1:14:36.35,1:14:37.44,EN,,0,0,0,,Oh, well.
Dialogue: 0,1:14:39.97,1:14:42.33,EN,,0,0,0,,Sure, thank you. Let's take the long break now.
Dialogue: 0,1:14:47.90,1:14:56.41,Declare,,0,0,0,,{\fad(500,500)}MIT OpenCourseWare\Nhttp://ocw.mit.edu
Dialogue: 0,1:14:56.44,1:15:05.69,Declare,,0,0,0,,{\an2\fad(500,500)}https://github.com/DeathKing/Learning-SICP
