[Script Info]
; Script generated by Aegisub 3.0.4
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
Collisions: Normal
Scroll Position: 99
Active Line: 114
Video Zoom Percent: 1
PlayResX: 320
PlayResY: 240
Audio URI: ../../../../media/savior/F6C42524C424E897/sicp/lec4a.mp4
Video File: ../../../../media/savior/F6C42524C424E897/sicp/lec4a.mp4
Video Aspect Ratio: c1.33333
Video Position: 0
YCbCr Matrix: TV.601

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:22.34,Default,,0,0,0,,[music]
Dialogue: 0,0:00:22.34,0:00:24.34,Default,,0,0,0,,Pattern-matching: Rule-based Substitution\N模式匹配: 基于规则的替换
Dialogue: 0,0:00:24.34,0:00:29.34,Default,,0,0,0,,\N好的，昨天我们学了一些符号操作，\NPROFESSOR: Well, yesterday we learned a bit about symbolic manipulation,
Dialogue: 0,0:00:29.34,0:00:39.48,Default,,0,0,0,,并且我们写了非常程式化的程序来实现从微积分书中学到的微积分规则。\Nand we wrote a rather stylized program to implement a pile of calculus rule from the calculus book.
Dialogue: 0,0:00:39.48,0:00:49.25,Default,,0,0,0,,在这些幻灯片中，我们可以看到教科书中的一些积分规则。\NHere on the transparencies, we see a bunch of calculus rules from such a book.
Dialogue: 0,0:00:49.25,0:00:55.14,Default,,0,0,0,,当然，我们要做的事情就是把这些规则转化成计算机语言。\NAnd, of course, what we did is sort of translate these rules into the language of the computer.
Dialogue: 0,0:00:55.14,0:00:58.85,Default,,0,0,0,,\N但是，当然，这是一个有趣的策略。\NBut, of course, that's a sort of funny strategy.
Dialogue: 0,0:00:58.85,0:01:04.80,Default,,0,0,0,,\N我们应该做什么来把这些规则翻译成计算机语言呢？\NWhy should we have to translate these rules into the language of the computer?
Dialogue: 0,0:01:04.80,0:01:06.62,Default,,0,0,0,,\N我说的意思是---\NAnd what do I really mean by that?
Dialogue: 0,0:01:06.62,0:01:11.02,Default,,0,0,0,,昨天我们写的程序非常程式化，\NThese are--the program we wrote yesterday was very stylized.
Dialogue: 0,0:01:11.02,0:01:18.91,Default,,0,0,0,,\N它是一个条件语句，分发表达式的类型作为规则所保留  #TBD\NIt was a conditional, a dispatch on the type of the expression as observed by the rules.
Dialogue: 0,0:01:18.91,0:01:29.37,Default,,0,0,0,,我们这里看到的规则是:如果对象是一个导数符号，如果表达式是常量，就做一些事情。\NWhat we see here are rules that say if the object being the derivative is being taken of, if that expression is a constant, then do one thing.
Dialogue: 0,0:01:29.37,0:01:31.60,Default,,0,0,0,,如果它是一个变量，就做另外一些事情。\NIf it's a variable, do another thing.
Dialogue: 0,0:01:31.60,0:01:36.00,Default,,0,0,0,,\N如果它是一个常量乘以一个变量，所一些事情，等等。\NIf it's a product of a constant times a variable, do something and so on.
Dialogue: 0,0:01:36.00,0:01:38.96,Default,,0,0,0,,\N这里有很多的类型分发\NThere's sort of a dispatch there on a type.
Dialogue: 0,0:01:41.40,0:01:45.16,Default,,0,0,0,,\N既然它有如此形式化的行为和结构，\NWell, since it has such a stylized behavior and structure,
Dialogue: 0,0:01:45.56,0:01:49.53,Default,,0,0,0,,\N有没有其他方式把这个过程写的更加聪明呢？\Nis there some other way of writing this program that's more clear?
Dialogue: 0,0:01:50.20,0:01:53.83,Default,,0,0,0,,\N首先要解决的是：规则是什么？\NWell, what's a rule, first of all? \N这些规则是什么\NWhat are these rules?
Dialogue: 0,0:01:55.56,0:01:58.50,Default,,0,0,0,,\N我们来好好想一下。\NLet's think about that.\N规则有好几个部分。\NRules have parts.
Dialogue: 0,0:01:58.50,0:02:09.93,Default,,0,0,0,,\N如果自己看这些规则细节，比如这些规则有（等式）左边的部分和（等式）右边的部分\NIf you look at these rules in detail, what you see, for example, is the rule has a left-hand side and a right-hand side.
Dialogue: 0,0:02:10.36,0:02:14.36,Default,,0,0,0,,\N每一个规则都有左边部分和右边部分。\NEach of these rules has a left-hand side and the right-hand side.
Dialogue: 0,0:02:14.36,0:02:20.60,Default,,0,0,0,,\N左边部分是你写入的积分表达式的某种比较。\NThe left-hand side is somehow compared with the expression you're trying to take the derivative of.
Dialogue: 0,0:02:21.06,0:02:25.56,Default,,0,0,0,,右边的部分是表达式的替换方式。\NThe right-hand side is the replacement for that expression.
Dialogue: 0,0:02:28.06,0:02:33.73,Default,,0,0,0,,\N这张纸上的所有规则都是这样的。\NSo all rules on this page are something like this.
Dialogue: 0,0:02:36.10,0:02:48.70,Default,,0,0,0,,我有许多模式，我需要以某种方式对给定的模式生成一个框架。\NI have patterns, and somehow, I have to produce, given a pattern, a skeleton.
Dialogue: 0,0:02:51.76,0:02:53.40,Default,,0,0,0,,\N这就是一个规则。\NThis is a rule.
Dialogue: 0,0:02:55.03,0:03:03.53,Default,,0,0,0,,\N模式就是（输入的）匹配，框架是为了获得一个新的表达式的一种替换。\NA pattern is something that matches, and a skeleton is something you substitute into in order to get a new expression.
Dialogue: 0,0:03:05.90,0:03:16.36,Default,,0,0,0,,\N意思是：模式用来匹配表达式，匹配原表达式。\NSo what that means is that the pattern is matched against the expression, which is the source expression.
Dialogue: 0,0:03:23.20,0:03:40.26,Default,,0,0,0,,\N应用规则的结果是产生一个新的表达式，我叫它目标，它是框架的一个实例。\NAnd the result of the application of the rule is to produce a new expression, which I'll call a target, by instantiation of a skeleton.
Dialogue: 0,0:03:41.20,0:03:43.93,Default,,0,0,0,,\N这个叫做实例化。\NThat's called instantiation.
Dialogue: 0,0:03:50.23,0:03:55.20,Default,,0,0,0,,\N这就是描述这些规则的程序。\NSo that is the process by which these rules are described.
Dialogue: 0,0:03:55.36,0:04:03.76,Default,,0,0,0,,\N我今天要做的事情是：构建一个语言，并且做一些事情来为这个语言做解释（解析）\NWhat I'd like to do today is build a language and a means of interpreting that language,
Dialogue: 0,0:04:03.76,0:04:09.10,Default,,0,0,0,,\N(还要做)执行这个语言，这个语言可以直接解释这些规则。\Na means of executing that language, where that language allows us to directly express these rules.
Dialogue: 0,0:04:10.16,0:04:19.93,Default,,0,0,0,,我们要做的事情是：避免把这个层级的语言规则带到机器语言层面。所以我们需要用计算机语言写这些规则。\NAnd what we're going to do is instead of bringing the rules to the level of the computer by  writing a program that is those rules in the computer's language--
Dialogue: 0,0:04:19.93,0:04:22.03,Default,,0,0,0,,在这个时候，在Lisp的世界中，\Nat the moment, in a Lisp--
Dialogue: 0,0:04:22.03,0:04:29.53,Default,,0,0,0,,\N我们要写一些程序让计算机可以理解这些规则。\Nwe're going to bring the computer to the level of us by writing a way by which the computer can understand rules of this sort.
Dialogue: 0,0:04:30.43,0:04:39.70,Default,,0,0,0,,\N需要强调一下，上一次，我们试图解决一系列的问题，而不是一个特定的问题。\NThis is slightly emphasizing the idea that we had last time that we're trying to make a solution to a class of problems rather than a particular one.
Dialogue: 0,0:04:39.70,0:04:47.13,Default,,0,0,0,,问题是，如果我为不同还的数学运算写这些规则，\NThe problem is if I want to write rules for a different piece of mathematics, say,
Dialogue: 0,0:04:47.90,0:05:01.16,Default,,0,0,0,,为了简代数运算或者操作三角函数，我将用昨天的方法写一个不同的程序。\Nto simple algebraic simplification or something like that, or manipulation of trigonometric functions, I would have to write a different program in using yesterday's method.
Dialogue: 0,0:05:01.16,0:05:12.86,Default,,0,0,0,,我想要封装所有的事情，让事情变得通用，这意味着匹配，实例化，控制结构，这都是非常复杂的事情\NWhereas I would like to encapsulate all of the things that are common to both of those programs, meaning the idea of matching, instantiation, the control structure, which turns out to be very complicated for such a thing,
Dialogue: 0,0:05:13.16,0:05:18.46,Default,,0,0,0,,\N我想要把这些规则分开来进行封装。\NI'd like to encapsulate that separately from the rules themselves.
Dialogue: 0,0:05:19.53,0:05:22.70,Default,,0,0,0,,首先，让我们看一下表述 。\NSo let's look at, first of all, a representation.
Dialogue: 0,0:05:22.70,0:05:24.33,Default,,0,0,0,,我喜欢在在这里使用天花板#TBD overhead  i can not translate\NI'd like to use the overhead here.
Dialogue: 0,0:05:24.33,0:05:25.93,Default,,0,0,0,,\N我喜欢，在这里。\NI'd like-- there it is.
Dialogue: 0,0:05:25.93,0:05:37.53,Default,,0,0,0,,我喜欢把这些计算规则的代表看作是我这里写的这种简单的语言的派生。\NI'd like to look at a representation of the rules of calculus for derivatives in a sort of simple language that I'm writing right here.
Dialogue: 0,0:05:37.83,0:05:43.86,Default,,0,0,0,,\N现在，我尽量去避免，我要去避免为语法担心。\NNow, I'm going to avoid--I'm going to avoid worrying about syntax.
Dialogue: 0,0:05:43.86,0:05:49.30,Default,,0,0,0,,\N我可以很容易的处理这个，单丝我没有兴趣---这个确实挺丑陋的。\NWe can easily pretty this, and I'm not interested in making-- this is indeed ugly.
Dialogue: 0,0:05:49.30,0:05:58.50,Default,,0,0,0,,这个确实不能像书上的dx dy dt那样表示，我喜欢这样写，但是这个不是必要的。\NThis doesn't look like the beautiful text set dx by dt or something that I'd\Nlike to write, but that's not essential.
Dialogue: 0,0:05:58.50,0:06:00.80,Default,,0,0,0,,\N这是一个偶然现象。\NThat's sort of an accidental phenomenon.
Dialogue: 0,0:06:00.80,0:06:11.70,Default,,0,0,0,,\N这里，我正在担心规则的结构，规则的左边部分代表对来源的表达式的匹配。\NHere, we're just worrying about the fact that the structure of the rules is that there is a left-hand side here, represents the thing I want to match against the derivative expression.
Dialogue: 0,0:06:11.70,0:06:21.50,Default,,0,0,0,,一个常数的导数的表示：我用c表示常数，用v 表示变量。\NThis is the representation I'm going to say for the derivative of a constant, which we will call c with respect to the variable we will call v.
Dialogue: 0,0:06:22.70,0:06:25.76,Default,,0,0,0,,我们在右边得到的是0.\NAnd what we will get on the right-hand side is 0.
Dialogue: 0,0:06:25.76,0:06:28.43,Default,,0,0,0,,\N这就是一个表述规则。\NSo this represents a rule.
Dialogue: 0,0:06:28.43,0:06:38.33,Default,,0,0,0,,下一个规则是变量的导数，求导的变量跟原变量都是v ，结果是1.\NThe next rule will be the derivative of a variable, which we will call v with respect to the same variable v, and we get a 1.
Dialogue: 0,0:06:38.33,0:06:47.46,Default,,0,0,0,,然而，如果我对变量v求u的导数，得到的结果是0。\NHowever, if we have the derivative of a variable called u with respect to a different variables v, we will get 0.
Dialogue: 0,0:06:47.46,0:06:52.43,Default,,0,0,0,,我就是想让大家看一下这些规则是如何弄在一起的。#TBD fit\NI just want you look at these rules a little bit and see how they fit together.
Dialogue: 0,0:06:52.43,0:07:01.90,Default,,0,0,0,,比如，在这里是：表达式X1和X2的和的积分\NFor example, over here, we're going to have the derivative of the sum of an expression called x1 and an expression called x2.
Dialogue: 0,0:07:01.90,0:07:08.93,Default,,0,0,0,,标记的问题的开始叫做我们介绍的在这个语言中的模式变量。\NThese things that begin with question marks are called pattern variables in the language that we're inventing,
Dialogue: 0,0:07:08.93,0:07:14.93,Default,,0,0,0,,\N大家可以看到我们在这里编造这个（模式），为匹配   #TBD\Nand you see we're just making it up, so pattern variables for matching.
Dialogue: 0,0:07:14.93,0:07:20.33,Default,,0,0,0,,\N这里我们有X1的求导求和表达式\NAnd so in this-- here we have the derivative of the sum of the expression which we will call x1.
Dialogue: 0,0:07:20.33,0:07:26.70,Default,,0,0,0,,这个表达式我们叫做X2，我们叫做V的变量  在右边：\NAnd the expression we will call x2 with respect to the variable we call v will be-- here is the right-hand side:
Dialogue: 0,0:07:26.70,0:07:33.10,Default,,0,0,0,,\N表达式X1表示V的导数的和---在右边是一个框架---\Nthe sum of the derivative of  that expression x1 with respect to v-- the right-hand side is the skeleton--
Dialogue: 0,0:07:33.10,0:07:37.50,Default,,0,0,0,,\Nx2的导数表示成V。\Nand the derivative of x2 with respect to v.
Dialogue: 0,0:07:37.50,0:07:42.60,Default,,0,0,0,,这里的列表示对象的子状态。\NColons here will stand for substitution objects.
Dialogue: 0,0:07:43.16,0:07:47.60,Default,,0,0,0,,\N他们，我们称作是框架求值。\NThey're--we'll call them skeleton evaluations.
Dialogue: 0,0:07:48.10,0:07:56.00,Default,,0,0,0,,让我在黑板上写一些语法，这样我们就明白在这个规则语言中要做什么。\NSo let me put up here on the blackboard for a second some syntax so we'll know what's going on for this rule language.
Dialogue: 0,0:07:56.26,0:08:00.06,Default,,0,0,0,,首先，我们要处理模式匹配问题。\NFirst of all, we're going to have to worry about the pattern matching.
Dialogue: 0,0:08:05.53,0:08:13.60,Default,,0,0,0,,\N我们有foo这样的符号匹配它本身\NWe're going to have things like a symbol like foo matches exactly itself.
Dialogue: 0,0:08:23.16,0:08:57.60,Default,,0,0,0,,(f a b)将要匹配任何列表的表达式，这些表达式的第一个元素是f ，第2个元素是a, 第三个元素是b.\NThe expression f of a and b will be used to match any list whose first element is f, whose second element is a, and whose third element is b.
Dialogue: 0,0:08:58.20,0:09:07.56,Default,,0,0,0,,另外一个在模式中的事情是--- 一些带有变量的问号像x\NAlso, another thing we might have in a pattern is that--a question mark with some variable like x.
Dialogue: 0,0:09:08.13,0:09:19.46,Default,,0,0,0,,\N它意味着什么呢,它意思是它可以匹配任何东西，我们叫它是x.\NAnd what that means, it says matches anything, which we will call x.
Dialogue: 0,0:09:25.10,0:09:30.26,Default,,0,0,0,,\N(c? x) 只匹配常量。\NQuestion mark c x will match only constants.
Dialogue: 0,0:09:31.06,0:09:41.36,Default,,0,0,0,,它只匹配x列的常量。\NSo this is something which matches a constant colon x.
Dialogue: 0,0:09:43.96,0:09:57.66,Default,,0,0,0,,(v? x)匹配变量，我这里把这个变量叫做x.\NAnd question mark v x will match a variable, which we call x.
Dialogue: 0,0:10:01.30,0:10:04.23,Default,,0,0,0,,\N我们现在构建这个语言。\NThis is sort of the language we're making up now.
Dialogue: 0,0:10:04.23,0:10:09.83,Default,,0,0,0,,\N如果我匹配的两个（表达式）是不同的，那么他们就一个元素一个元素的进行对比\NIf I match two things against each other, then they are compared element by element
Dialogue: 0,0:10:10.10,0:10:20.83,Default,,0,0,0,,但是在这个模式中的元素也许包含这些语法变量，模式变量需要匹配任意的对象。\NBut elements in the pattern may contain these syntactic variables, pattern variables,\Nwhich will be used to match arbitrary objects.
Dialogue: 0,0:10:21.70,0:10:29.56,Default,,0,0,0,,\N我们把这个对象作为X的值，比如说。\NAnd we'll get that object as the value in the name x here, for example.
Dialogue: 0,0:10:30.50,0:10:38.03,Default,,0,0,0,,\N现在，当我们为实例做框架的时候，\NNow, when we make skeletons for instantiation.
Dialogue: 0,0:10:38.03,0:10:41.93,Default,,0,0,0,,当我们有对象像这样。\NWell, then we have things like this.
Dialogue: 0,0:10:41.93,0:10:47.26,Default,,0,0,0,,\N一个符号foo，实例化它自己。\Nfoo, a symbol, instantiates to itself.
Dialogue: 0,0:10:54.70,0:11:15.23,Default,,0,0,0,,\N像(f a b)这样的列表，实例化成 --- f实例化成一个三个元素的列表，\NSomething which is a list like f of a and b, instantiates to-- well, f instantiates to a  3-list, a list of three elements,
Dialogue: 0,0:11:15.23,0:11:34.03,Default,,0,0,0,,\N类表中的元素分别对f, a , b 进行实例化。\Nokay, which are the results of instantiating each of f, a, and b.
Dialogue: 0,0:11:35.46,0:11:54.93,Default,,0,0,0,,\NX也是，--我们实例化X的值作为这个模式的匹配结果。\NAnd x well--we instantiate to the value of x as in the matched pattern.
Dialogue: 0,0:12:02.33,0:12:06.86,Default,,0,0,0,,\N所以回头看这里，我们可以看到\NSo going back to the overhead here, we see   --
Dialogue: 0,0:12:06.86,0:12:16.06,Default,,0,0,0,,\N这些对象，我们看到这个模式变量匹配一个常量，\Nwe see that all of those kinds of objects, we see here a pattern variable which matches a constant,
Dialogue: 0,0:12:16.06,0:12:19.20,Default,,0,0,0,,这个模式变量匹配一个变量，\Na pattern variable which matches a variable,
Dialogue: 0,0:12:19.20,0:12:21.96,Default,,0,0,0,,这个模式变量将要匹配任何东西。\Na pattern variable which will match anything.
Dialogue: 0,0:12:21.96,0:12:29.20,Default,,0,0,0,,如果我们给两个实例起了起了一样的名字，像这个是表达式的导数\NAnd if we have two instances of the same name, like this is the derivative of the expression
Dialogue: 0,0:12:29.20,0:12:32.10,Default,,0,0,0,,\N这个表达式中只有变量v表示任意的表达式，\Nwhich is a variable only whose name will be v with respect to some arbitrary expression which we will call v,
Dialogue: 0,0:12:32.33,0:12:41.36,Default,,0,0,0,,\N因为这个v出现了两侧，我们的意思是他们是相同的。\Nsince this v appears twice, we're going to want that to mean they have to be the same.
Dialogue: 0,0:12:42.30,0:12:45.23,Default,,0,0,0,,只有他们完全一致才算是匹配。\NThe only consistent match is that those are the same.
Dialogue: 0,0:12:45.23,0:12:47.23,Default,,0,0,0,,\N所以这里，我们在构建一个语言。\NSo here, we're making up a language.
Dialogue: 0,0:12:47.60,0:12:50.66,Default,,0,0,0,,事实上，我们要做的事情非常好   #TBD\NAnd in fact, that's a very nice thing to be doing.
Dialogue: 0,0:12:50.66,0:12:52.60,Default,,0,0,0,,\N构建一个语言非常有意思。\NIt's so much fun to make up a language.
Dialogue: 0,0:12:52.60,0:12:54.33,Default,,0,0,0,,并且大家一直在做这些。\NAnd you do this all the time.
Dialogue: 0,0:12:54.33,0:13:00.73,Default,,0,0,0,,\N大家做过的真正强悍的设计是构建一个语言来解决这样的问题。\NAnd the really most powerful design things you ever do are sort of making up a language to solve problems like this.
Dialogue: 0,0:13:01.60,0:13:05.70,Default,,0,0,0,,\N我们回头看看这些规则。\NNow, here we go back here and look at some of these rules.
Dialogue: 0,0:13:05.70,0:13:07.10,Default,,0,0,0,,\N这就是他们的全部。\NWell, there's a whole set of them.
Dialogue: 0,0:13:07.10,0:13:12.43,Default,,0,0,0,,\N我的意思是，这里有一个加法和一个乘法，就像我们之前看到的一样。\NI mean, there's one for addition and one for multiplication, just like we had before.
Dialogue: 0,0:13:12.43,0:13:26.90,Default,,0,0,0,,\Nx1乘以x2的导数，表示为v 是x1乘以x2的导数 加上 x1的导数乘以x2。\NThe derivative of the product of x1 and x2 with respect to v is the sum of the product of x1 and the derivative x2 with respect to v and the product of the derivative of x1 and x2.
Dialogue: 0,0:13:26.90,0:13:29.10,Default,,0,0,0,,这里我们有乘方。\NAnd here we have exponentiation.
Dialogue: 0,0:13:29.10,0:13:32.46,Default,,0,0,0,,\N而且，当然，我们跑出了这里的下界。   #TBD\NAnd, of course, we run off the end down here. \N我们还有很多像这样的东西。\NWe get as many as we like.
Dialogue: 0,0:13:32.46,0:13:39.56,Default,,0,0,0,,但是这里的整个事情是，这个规则列表的名字叫做求导数规则。\NBut the whole thing over here, I'm giving this--this list of rules the name "derivative rules."
Dialogue: 0,0:13:40.40,0:13:44.33,Default,,0,0,0,,\N一旦我们有了这些，我们应该用它做什么呢？\NWhat would we do with such a thing once we have it?
Dialogue: 0,0:13:44.93,0:13:52.23,Default,,0,0,0,,\N最好的想法是，首先，我为大家写出来，然后我们将跟它“玩”这整整一天。\NWell, one of the nicest ideas, first of all, is I'm going to write for you, and we're going to play with it all day.
Dialogue: 0,0:13:52.23,0:13:59.86,Default,,0,0,0,,\N我要给大家写的程序叫做simplifier,(化简)  ， 一个通用的化简器。\NWhat I'm going to write for you is a program called simplifier, the general-purpose simplifier.
Dialogue: 0,0:13:59.86,0:14:17.76,Default,,0,0,0,,\N我们将要像这样的定义dsimp 作为求导的化简器。\NAnd we're going to say something like define dsimp to be a simplifier of the derivative rules.
Dialogue: 0,0:14:23.43,0:14:29.16,Default,,0,0,0,,\N化简器要做的事情是：给定一些规则，它给我一个过程\NAnd what simplifier is going to do is, given a set of rules, it will produce for me a procedure
Dialogue: 0,0:14:29.16,0:14:35.06,Default,,0,0,0,,它根据这些规则对传递进来表达式进行化简。\Nwhich will simplify expressions containing the things that are referred to by these rules.
Dialogue: 0,0:14:37.16,0:14:44.10,Default,,0,0,0,,\N所以，这个构造出来的过程来对求导进行化简\NSo here will be a procedure constructed for your purposes to simplify things with derivatives in them such that,
Dialogue: 0,0:14:44.10,0:15:04.50,Default,,0,0,0,,之后，如果我输入一些列表，我可以得到一些提示，我们说dsimp,比如， x + y对x 求导\Nafter that, if we're typing at some list system, and we get a prompt, and we say dsimp, for example, of the derivative of the sum of x and y with respect to x--
Dialogue: 0,0:15:06.50,0:15:11.43,Default,,0,0,0,,\N注意这里的引号，因为我们讨论的表达式是求导--\Nnote the quote here because I'm talking about the expression which is the derivative--
Dialogue: 0,0:15:12.90,0:15:18.13,Default,,0,0,0,,然后我得到的结果是1 + 0\Nthen I will get back as a result plus 1 0.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N因为x + y的导数是x的导数加上Y的导数。\NBecause the derivative of x plus y is the derivative of x plus derivative y.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\Nx对x的导数是1.\NThe derivative of x with respect to x is 1.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\Ny对x的导数是0.\NThe derivative of y with respect to x is 0.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这个不是我想要的。\NIt's not what we're going to get.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我没有在这个层级上做任何的化简。 代数化简---\NI haven't put any simplification at that level-- algebraic simplification--yet.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N当然，一旦我有了这个东西，那么我们可以 -- 我们可以看看其他的规则。\NOf course, once we have such a thing, then we can--then we can look at other rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以，比如，我们看这个幻灯片，好么？\NSo, for example, we can, if we go to the slide, OK?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里，比如，是我们有的其他规则。代数操作规则，他们可以用来进行表达式的代数化简。\NHere, for example, are other rules that we might have, algebraic manipulation rules, ones that would be used for simplifying algebraic expressions.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,比如， 看看这器总的一些， 左边说，任何操作应用到一个常数e1和一个常数e2的结果是对常数e1和e2进行操作。\NFor example, just looking at some of these, the left-hand side says any operator applied\Nto a constant e1 and a constant e2 is the result of evaluating that operator on\Nthe constants e1 and e2.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,或者，一个操作，应用到e1,任何表达式e1, 和一个常量e2,  #TBD\NOr an operator, applied to e1, any expression e1 and a constant e2, is going to move the constant forward.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\NSo that'll turn into the operator with e2 followed by e1.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,为什么我要做这个呢？我不知道。\NWhy I did that, I don't know.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它不会工作，如果我有除法，比如。\NIt wouldn't work if I had division, for example.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以这个规则中有个bug.\NSo there's a bug in the rules, if you like.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以0+e 等于e\NSo the sum of 0 and e is e.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N1*任何表达式e的结果是e\NThe product of 1 and any expression e is e.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N0乘以任何表达式的结果是0\NThe product of 0 and any expression e is 0.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,再看看这些规则，我们可以任意的组合他们。\NJust looking at some more of these rules, we could have arbitrarily complicated ones.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们可以把常量e1乘以任意的常量e2，得到结果e3,\NWe could have things like the product of the constant e1 and any constant e2 with e3 is the result of multiplying the result of--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,e1乘以e2把结果放在了e3这里。\Nmultiplying now the constants e1 and e2 together and putting e3 there.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以我可以组合常量，如果要把e1,e2,e3乘起来\NSo it says combine the constants that I had, which was if I had a product of e1 and e2 and e3 just multiply--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我的意思是e1，e2都是常量，把他们乘起来，\NI mean and e1 and e2 are both constants, multiply them.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,你可以根据你的习惯来构建这些规则。\NAnd you can make up the rules as you like.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里还有很多规则。\NThere are lots of them here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这些事情是复杂的，比如--\NThere are things as complicated, for example, as--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我想在这里有分配率，大家看\Noh, I suppose down here some distributive law, you see.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N任何对象C乘以d和e的总和 所得到的结果 和  c乘以d 加上C和E的结果是相同的。\NThe product of any object c and the sum of d and e gives the result as the same as the sum of the product of c and d and the product of c and e.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这些规则对我没有太大吸引力。\NNow, what exactly these rules are doesn't very much interest me.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们要构建的语言将允许我们解释这些规则，这样我们可以构建我们想要的规则编写另外的语言。\NWe're going to be writing the language that will allow us to interpret these rules so that\Nwe can, in fact, make up whatever rules we like, another whole language of programming.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们看。\NWell, let's see.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我么有告诉你我们要如何做这些事情。\NI haven't told you how we're going to do this.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N当然，我们还要在这个上面工作一阵子  #TBD\NAnd, of course, for a while, we're going to work on that.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是真正的问题是： 我要做的事情究竟要在多大的范围之内？\NBut there's a real question of what is--what am I going to do at all at a large scale?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如何让这些规则生效？\NHow do these rules work?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N化简程序如何处理这些规则来为你输入的表达式产生一个合理的答案？\NHow is the simplifier program going to manipulate these rules with your expression to\Nproduce a reasonable answer?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N首先，我需要考虑一下把这些规则作为他们的一个甲板。\NWell, first, I'd like to think about these rules as being some sort of deck of them.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里我有全部的规则，对把。\NSo here I have a whole bunch of rules, right?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N每一个规则，这里的每一个规则 ---\NEach rule-- here's a rule--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N都有一个模式和一个框架。\Nhas a pattern and a skeleton.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我正在努力为这个作一个控制框架.\NI'm trying to make up a control structure for this.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我有的就是一个匹配器,我有一个变形器.\NNow, what I have is a matcher, and I have something which is an instantiater.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我将把一些模式变量从匹配器中传递到变形器中.\NAnd I'm going to pass from the matcher to the instantiater some set of meaning for the pattern variables,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我把它叫做一个字典.\Na dictionary, I'll call it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N一个字典,x匹配了跟随的子表达是,y匹配了另一个跟随的子表达式\NA dictionary, which will say x was matched against the following subexpression and y was matched against another following subexpression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,并且从变形器中,我将要做表达式,\NAnd from the instantiater, I will be making expressions,\N他们将要进入匹配器.\Nand they will go into the matcher.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N他们都将式表达式.\NThey will be expressions.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这些规则的模式将要送进匹配器中.\NAnd the patterns of the rules will be fed into the matcher,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这些规则的框架,将要送进变形器中.\Nand the skeletons from the same rule will be fed into the instantiater.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在,这里有一点复杂,因为当大家有一个代数表达式\NNow, this is a little complicated because when you have something like an algebraic\Nexpression, where  something --
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这些规则想要做等价替换\Nthe rules are intended to be able to allow you to substitute equal for equal.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这些是等价替换规则.\NThese are equal transformation rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以所有的表达式的子表达式应该要好好看一下.\NSo all subexpressions of the expression should be looked at.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N给它一个表达式, 这个,这些规则应该是可以循环的.\NYou give it an expression, this thing, and the rules should be cycled around.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,首先,对于你传入的表达式的子表达式,所有的规则都需要遍历一次.\NFirst of all, for every subexpression of the expression you feed in, all\Nof the rules must be tried and looked at.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N并且,如果有规则匹配了,那么这个过程就会执行.\NAnd if any rule matches, then this process occurs.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N字典--字典中有一些值.\NThe dictionary--the dictionary is to have some values in it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N变形器产生一个新的表达式,它将替换表达式的那个匹配了你原始表达式的部份.\NThe instantiater makes a new expression, which is basically replaces that part of the expression that was matched in your original expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后,当然,我们要对它进行重新监测,重新遍历这些规则,看看它是否可以进行化简.\NAnd then, then, of course, we're going to recheck that, going to go around these rules again, seeing if that could be simplified further.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后,我们要为每一个子表达式做这些直到没有任何变化为止.\NAnd then, then we're going to do that for every subexpression until the thing\Nno longer changes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N大家可以把它想像成一个原始过程.\NYou can think of this as sort of an organic process.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N大家有一些炖汤,对么?\NYou've got some sort of stew, right?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N大家得到细菌或者别的什么,酵母,在一些瞅稠的东西中.\NYou've got bacteria or something, or enzymes in some,in some gooey mess.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这些  --- 这些酵母改变了这些东西.\NAnd there's these--and these enzymes change things.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N他们附着在你的表达式上,改变它,然后他们就走了.\NThey attach to your expression, change it, and then they go away.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后他们需要匹配.\NAnd they have to match.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这是锁key现象.\NThe key-in-lock phenomenon.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N他们匹配,改变它,然后离开.\NThey match, they change it, they go away.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N大家可以想像成一种并行过程\NYou can imagine it as a parallel process of some sort.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以,你把一个表达式插入到这个混乱(规则)中,过了一会儿,你把它拿出来,它被简化了.\NSo you stick an expression into this mess, and after a while, you take it out, and it's been simplified.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它会一直变化,直达不能再变化为止.\NAnd it just keeps changing until it no longer can be changed.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但是酵母可以依附再表达式的任何部份.\NBut these enzymes can attach to any part of the, of the expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N好的,先到这里,我停一下回答大家提问.\NOK, at this point, I'd like to stop and ask for questions.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N恩.\NYes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生:这是说匹配的程序跟变形的程序是独立分开的两个程序,是么?\NAUDIENCE: This implies that the matching program and the instantiation program\Nare separate programs; is that right? Or is that-- they are.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:他们被拆分成很多小片.\NPROFESSOR: They're separate little pieces.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N(然后)他们组装成一个大的结构.\NThey fit together in a larger structure.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生:所以,我要通过匹配,传递所匹配的东西给变形器,由它来做改变\NAUDIENCE: So I'm going through and matching and passing the information about what I matched to an instantiater,which makes the changes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后,把结果返回给匹配器?\NAnd then I pass that back to the matcher?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:它不会做变化.\NPROFESSOR: It won't make a change.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它将产生一个新的表达式, 它有替换的值,这个值是变量匹配左边表达式的模式变量\NIt will make a new expression, which has, which has substituted the values of the pattern variable that were matched on the left-hand side for the variables that are mentioned,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N框架变量或者求值变量或者随便我们如何叫它,在右边.\Nthe skeleton variables or evaluation variables or whatever I called them, on the right-hand side.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生:然后它要回传给匹配器么?\NAUDIENCE: And then that's passed back into the matcher?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,老师:然后这个要再一次循环.\NPROFESSOR: Then this is going to go around again.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它将一直这样循环直到不再变化.\NThis is going to go through this mess until it no longer changes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生:这感觉有点危险一直在做递归循环.\NAUDIENCE: And it seems that there would be a danger of getting into a recursive loop.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:是的.\NPROFESSOR: Yes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N的确,如果你写的规则不好,\NYes, if you do not write your rules nicely, you are-- indeed,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N你发明的任何语言,如果它有足够的能力做任何事情,你就可以写出无限循环的程序.\Nin any programming language you invent, if it's sufficiently powerful to do anything, you can write programs that will go into infinite loops.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N代数处理的过程需要产生无限循环.\NAnd indeed, writing a program for doing algebraic manipulation for long will produce infinite loops.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N继续\NGo ahead.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,学生: 一些语言的设计者觉得这个特性非常重要,以至于它应该是语言的一部分,比如scheme.\NAUDIENCE: Some language designers feel that this feature is so important that it should become part of the basic language, for example, scheme in this case.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N你认为的是\NWhat are your thoughts on--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,老师:什么语言特性?\NPROFESSOR: Which language feature?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生:对匹配\NAUDIENCE: The pairs matching.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所有应用的这些规则应该 ---\NIt's all application of such rules should be--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:  你说像Prolog一样?\NPROFESSOR: Oh, you mean like Prolog?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生:类似Prolog,但是编程更加通用的 ----\NAUDIENCE: Like Prolog, but it becomes a more general--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:这是可行的.\NPROFESSOR: It's possible.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我想我的感觉是:我可以教你如何做 , 所以你不依赖某种语言的设计.\NOK, I think my feeling about that is that I would like to teach you how to do it so you\Ndon't depend upon some language designer.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生:好的.\NAUDIENCE: OK.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:你自己做. #TBD\NPROFESSOR: You make it yourself. You can roll your own.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N谢谢\NThank you.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N好的,我们看这里.\NWell, let's see.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在我要告诉大家它是如何运行的.\NNow we have to tell you how it works.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它很便利的就可以分成很多小份.\NIt conveniently breaks up into various pieces.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我想现在看一下匹配器.\NI'd like to look now at the matcher.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N匹配器有下面这个基本的结构.\NThe matcher has the following basic structure.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它是一个盒子,它把它的输入--一个表达式和一个模式转化成一个字典输出.\NIt's a box that takes as its input an expression and a pattern, and it turns out a dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N一个字典,要记住, 是模式变量和找到的匹配的一个映射\NA dictionary, remember, is a mapping of pattern variables to the values that were found by matching,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后它输出另外一个字典, 这个字典是询问这个字典在这个模式下匹配这个表达式的结果.\Nand it puts out another dictionary, which is the result of augmenting this dictionary by what was found in matching this expression against this pattern.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这就是匹配器\NSo that's the matcher.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在,这是一个非常复杂的程序,我们可以看到它的开销在这里,\NNow, this is a rather complicated program, and we can look at it on the overhead over here and see, ha, ha,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它非常复杂.\Nit's very complicated.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我只想让大家看一下它的轮廓.\NI just want you to look at the shape of it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N看它的每一个小部份那就太复杂了.\NIt's too complicated to look at except in pieces.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然而, 它是一个宏大,复杂的程序,它有很多这样的缩进的结构.\NHowever, it's a fairly large, complicated program with a lot of sort of indented structure.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N在最大的范围 ---大家不需要读这些代码, 但是在这个范围,\NAt the largest scale-- you don't try to read those characters, but at the largest scale,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N大家要看到这里有一个case分析, 就是这些case.\Nyou see that there is a case analysis, which is all these cases lined up.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们现在要做的事情是多看一些细节,试图理解它是如何工作的.\NWhat we're now going to do is look at this in a bit more detail, attempting to understand\Nhow it works.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们看第一个幻灯片,它展示了匹配器在一个大范围内的一些结构.\NLet's go now to the first slide, showing some of the structure of the matcher at a large scale.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们看到这个匹配器, 它需要一个模式,一个表达式,一个字典作为它的输入(参数)\NAnd we see that the matcher, the matcher takes as its input a pattern, an expression, and a dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N在这里有个case分析, 它用许多的case,其中的一些留在了这里,\NAnd there is a case analysis here, which is made out of several cases, some of which have been left out over here,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N制造一个通用的case, 这个是我想要大家看到的.\Nand the general case, which I'd like you to see.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N让我们考虑这个通用的case.\NLet's consider this general case.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它是一个非常重要的模式.\NIt's a very important pattern.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N问题是我们需要同时的检查这两棵树.\NThe problem is that we have to examine two trees simultaneously.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N一棵树是表达式, 另一棵树是模式.\NOne of the trees is the tree of the expression, and the other is the tree of the pattern.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们需要对比他们保证表达式的子表达式都匹配模式的子表达式.\NWe have to compare them with each other so that the subexpressions of the expression are matched against subexpressions of the pattern.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N多看一点细节, 假设我有一个模式,它是用来对x 和y的乘积求和   #TBD\NLooking at that in a bit more detail, suppose I had a pattern, a pattern, which was the sum of the product of a thing which we will call x and\Na thing which we will call y,and the sum of that, and the same thing we call y.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以我们找这两个乘积的和 --- 乘积的第二个参数和求和的第二个参数一样.\NSo we're looking for a sum of a product whose second--whose second argument is the same as the second argument of the sum.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这可能就是大家找的东西.\NThat's a thing you might be looking for.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它,作为一个模式,看起来像这个样子.\NWell, that, as a pattern, looks like this.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里有一个树,它包含一个和, 一个乘积,  用一个模式变量判断x 和y,  另一个模式变量判断y, (这两个y)是同一个,仅仅是用不同的方式写下列表结构.\NThere is a tree, which consists of a sum, and a product with a pattern variable question mark x and question mark y, the other pattern variable, and question mark y, just looking at the same, just writing down the list structure in a different way.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,现在,假设我们正在匹配一个表达式,  这个表达式匹配(+ (* 3 x) x)\NNow, suppose we were matching that against an expression which matches it, the sum of, say, the product of 3 and x and, say, x.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这是另一个树.\NThat's another tree.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它是3乘以X加上X的和的结果.\NIt's the sum of the product of 3 and x and of x.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以我要做的事情是同时遍历这两棵树.\NSo what I want to do is traverse these two trees simultaneously.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我喜欢这样遍历他们.\NAnd what I'd like to do is walk them like this.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,I'm going to say are these the same?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这是一个复合对象\NThis is a complicated object.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们先看它的左分支.\NLet's look at the left branches.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N恩,这应该是car.\NWell, that could be the car.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如何看呢?\NHow does that look?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这个加看起来不错.\NOh yes, the plus looks just fine.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是这里的下一个东西是复合的.\NBut the next thing here is a complicated thing.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们看一下它.\NLet's look at that.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它也很好.\NOh yes, that's pretty fine, too.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N他们都是星号\NThey're both asterisks.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,Now, whoops!
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我的模式变量,它匹配了3.\NMy pattern variable, it matches against the 3.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N记住,X 现在是3了.\NRemember, x equals 3 now.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,在我的字典里,这个字典一直伴随着我(在这个遍历过程中), X 等于3.\NThat's in my dictionary, and the dictionary's going to follow along with me: x equals three.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\NX 等于3, Y 等于X , 不同的X .\NAh yes, x equals 3 and y equals x, different x.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N模式X是表达式X , 模式Y .\NThe pattern x is the expression x, the pattern y.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,模式变量Y, 我已经有它的值了.\NOh yes, the pattern variable y, I've already got a value for it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它是X\NIt's x.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它是X 么?\NIs this an x?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N当然.\NOh yeah, sure it is.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N好的.\NThat's fine.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N耶,遍历完成了.\NYep, done.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在我有一个字典, 它在我的遍历过程中不断积累.\NI now have a dictionary, which I've accumulated by making this walk.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在,让我们看看这个一般情况,然后看看它如何工作.\NWell, now let's look at this general case here and see how that works.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里..\NHere we have it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我传入一个模式变量 -- 一个模式,一个表达式, 一个字典.\NI take in a pattern variable   --  a pattern, an expression, and a dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我在这里做一个复杂的事情 -- 通用情况.\NAnd now I'm going to do a complicated thing here, which is the general case.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这个表达式由两部份组成: 左部份和右部份, 一般来说.\NThe expression is made out of two parts: a left and a right half, in general.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N在Lisp系统中, 任何组合 都是由两部份组成的.\NAnything that's complicated is made out of two pieces in a Lisp system.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,现在我们有什么呢?\NWell, now what do we have here?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我将匹配两个表达式中的car伴随着我已经有的这个字典.\NI'm going to match the car's of the two expressions against each other with respect to the dictionary I already have,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N产生一个字典作为它的值, 我将用这个值来匹配他们的cdr\Nproducing a dictionary as its value, which I will then use for matching the cdr's against each other.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这个就是字典的遍历,穿过整个结构.\NSo that's how the dictionary travels, threads the entire structure.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后,结果是匹配的字典    #TBD\NAnd then the result of that is the dictionary for the match of the car and the cdr, and that's what's going to be returned as a value.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N在任意一个点,一个匹配会失败.\NNow, at any point, a match might fail.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,可能是这种情况, 比如, 如果我回过头看这个没有匹配上的表达式, 像是这里是A 4\NIt may be the case, for example, if we go back and look at an expression that doesn't quite match, like supposing this was a 4.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在,这两个不再匹配了,因为X 应该 --\NWell, now these two don't match any more, because the x that had to be  --
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,对不起,这里Y 应该是X , 并且这个Y 应该是4\Nsorry, the y that had to be x here and this y has to be 4.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是, X 和4 在语法上不是同一个对象.\NBut x and 4 were not the same object syntactically.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以 这个不会匹配成功, 有时候它会拒绝,匹配会失败.\NSo this wouldn't match, and that would be rejected sometimes, so matches may fail.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,现在,当然,因为这个匹配带有一个字典,这个字典来自于之前的匹配,它可以传遍这个(匹配)失败.\NNow, of course, because this matcher takes the dictionary from the previous match as input, it must be able to propagate the failures.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这就是第一个这个条件从句所做的事情.\NAnd so that's what the first clause of this conditional does.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果证实出来这个模式不是原子---\NIt's also true that if it turned out that the pattern was not atomic--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,看,如果模式是原子,将进入这里, 这里我们还没有看过.\Nsee, if the pattern was atomic, I'd go into this stuff, which we haven't looked at yet.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是,如果模式不是原子,但表达式是原子 ---  它不是一块块的组成的 -- 那么它就必需匹配失败, 然后在这里结束.\NBut if the pattern is not atomic and the expression is atomic-- it's not made out of pieces-- then that must be a failure, and so we go over here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果这个模式不是原子,并且模式不是一个模式变量 ---\NIf the pattern is not atomic and the pattern is not a pattern variable--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我不得不提醒自己  -- 我们到这里去.\NI have to remind myself of that-- then we go over here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以这种情况,失败有可能发生.\NSo that way, failures may occur.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N好,让我们看这个里面的东西.\NOK, so now let's look at the insides of this thing.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N第一个要看的是如果我有一个原子的模式会发生什么?\NWell, the first place to look is what happens if I have an atomic pattern?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这个很简单.\NThat's very simple.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,模式不是由任何块组成的: foo\NA pattern that's not made out of any pieces: foo.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这是一个非常好的原子模式.\NThat's a nice atomic pattern.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里我们看到的是:\NWell, here's what we see.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果模式是原子的,那么表达式是原子的\NIf the pattern is atomic, then if the expression is atomic,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,如果他们是同一个东西,那么字典就跟之前一样.\Nthen if they are the same thing, then the dictionary I get is the same one as I had before.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N没有变化.\NNothing's changed.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它就是匹配了加号和加号, 星号和星号,X 和X\NIt's just that I matched plus against plus, asterisk against asterisk, x against x.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,好\NThat's all fine.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,然而, 如果模式不是一个表达式, 如果我由两个独立的原子对象,\NHowever, if the pattern is not the one which is the expression, if I have two separate atomic objects,\N那么 加号就会匹配星号,这样就失败了.\Nthen it was matching plus against asterisk, which case I fail.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,或者,如果模式是原子但是表达式是复合的,不是原子,那么匹配失败.\NOr if it turns out that the pattern is atomic but the expression is complicated, it's not atomic, then I get a failure.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这很简单.\NThat's very simple.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在,这些模式变量是什么情况呢?\NNow, what about the various kinds of pattern variables?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们有三种情况.\NWe had three kinds.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我给他们命名了.\NI give them the names.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N他们是: 任意的常量, 任意的变量, 任意的表达式.\NThey're arbitrary constants, arbitrary variables, and arbitrary expressions.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,? x 标识任意的表达式.\NA question mark x is an arbitrary expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,? CX 表示任意的常量\NA question mark cx is an arbitrary constant,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N? VX 表示任意的变量\Nand a question mark vx is an arbitrary variable.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N好的,我们要做什么呢?\NWell, what do we do here?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,看这里,如果我有一个任意的常量,如果模式是一个任意的常量,\NLooking at this, we see that if I have an arbitrary constant, if the pattern is an arbitrary constant,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N那么, 表达式最好是一个常量.\Nthen it had better be the case that the expression had better be a constant.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果表达式不是常量,那么匹配失败.\NIf the expression is not a constant, then that match fails.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,如果是一个常量, 那么,需要扩展我的字典.\NIf it is a constant, however, then I wish to extend the dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我要用这个模式扩展这个字典 , #TBD\NI wish to extend the dictionary with that pattern being remembered to be that expression using the old\Ndictionary as a starting point.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N因此，其实，对于任意的变量，我必须先检查表达式是一个变量匹配对。\NSo really, for arbitrary variables, I have to check first if the expression is a variable by matching against.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果这样,它值得扩展这个字典, 这样这个模式可以记录下来为后续的匹配表达式使用.\NIf so, it's worth extending the dictionary so that the pattern is remembered to be matched against that expression,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N给一个原始的字典,它返回一个新的字典.\Ngiven the original dictionary, and this makes a new dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在它需要监测.\NNow, it has to check.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,有很多的失败在这个字典中---\NThere's a sorts of failure inside extend dictionary, which is that--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果模式变量中的一个已经有一个值了,\Nif one of these pattern variables already has a value
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N并且我正把这个东西匹配一些我已经匹配过的不同的东西\Nand I'm trying to match the thing against something else which is not equivalent to the\None that I've already matched it against once,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,然后失败就"飞"出来了.\Nthen a failure will come flying out of here, too.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们以后再看它.\NAnd I will see that some time.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,最终, 一个表达式不需要检查任何匹配好的表达式的语法,它要做的就是把它扩展到字典中.\NAnd finally, an  expression does not have to check anything syntactic about the expression that's being\Nmatched, so all it does is it's an extension of the dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以你看到了一个完整的,简单的匹配器.\NSo you've just seen a complete, very simple matcher.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在, 一个非常值得注意的是 这些天人们花了很多钱来让某人做\NNow, one of the things that's rather remarkable about this is people pay an awful lot of money these days for someone to make a, quote,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,人工智能专家系统 , 这个系统就只有像这样的一个匹配器和一个实例化器.\NAI expert system that has nothing more in it than a matcher and maybe an instantiater like this.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但是,很容易做的是: 你可以创立一个初创公司\NBut it's very easy to do, and now, of course, you can start up a little start-up company
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,然后第二周找一些风投给你一百万美金.\Nand make a couple of megabucks in the next week taking some people for a ride.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,20年钱,这个非常罕见的,这种程序.\N20 years ago, this was remarkable, this kind of program.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是现在,它很容易.\NBut now, this is sort of easy.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,大一的学生也可以学.\NYou can teach it to freshmen.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这里还有一个实例化器.\NWell, now there's an instantiater as well.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N问题是他们都去了,而且挣的钱比我还多.\NThe problem is they're all going off and making more money than I do.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,但这在大学中确实是真的.\NBut that's always been true of universities.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N作为一个表达式, 实例化器的目的是制造一个表达式通过给定一个字典和一个框架.\NAs expression, the purpose of the instantiater is to make expressions given a dictionary and a skeleton.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这个一点都不难.\NAnd that's not very hard at all.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们在下一个,和下下一个幻灯片中简单的看一下.\NWe'll see that very simply in the next, the next slide here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N实例化一个框架, 给定一个特别的字典 -- 恩,这个很简单.\NTo instantiate a skeleton, given a particular dictionary-- oh, this is easy.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们要在遍历这个框架的时候对递归树做一些事情.\NWe're going to do a recursive tree walk over the skeleton.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N框架变量的一切 ---\NAnd for everything which is a skeleton variable--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我叫它框架的求值.\NI don't know, call it a skeleton evaluation.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这就是它的名字, 这个是我给这个程序传入的抽象语法:\NThat's the name and the abstract syntax that I give it in this program:
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,一个框架求值, 它开始于这些规则的冒号后面.\Na skeleton evaluation, a thing beginning with a colon in the rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,在那种情况下,我要在字典中找答案, 我们需要用一点时间考虑这个.\NFor anything of that case, I'm going to look up the answer in the dictionary, and we'll worry\Nabout that in a second.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们看一下这个.\NLet's look at this as a whole.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这里  ---\NHere, I have--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我将实例化一个框架,用一个字典.\NI'm going to instantiate a skeleton, given a dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我在这里定义一些内部循环 , 它做一些非常简单的事情.\NWell, I'm going to define some internal loop right there, and it's going to do something very simple.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N即使一个框架 -- 它是很简单的也是原子的,\NEven if a skeleton--even if a skeleton is simple and atomic,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它无非就是返回一个框架作为答案, 或者在一般情况下,\Nin which case it's nothing more than giving the skeleton back as an answer, or in the general case,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它是复杂的,  在这种情况下,我要构件一个表达式作为实例化的结果---\Nit's complicated, in which case I'm going to make up the expression which is the result of instantiating--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N叫它循环递归 ---\Ncalling this loop recursively--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,实例化框架的car 和cdr.\Ninstantiating the car of the skeleton and the cdr.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这里就是递归树遍历.\NSo here is a recursive tree walk.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然而, 如果结果是框架求值, 在框架中一个冒号表达式,\NHowever, if it turns out to be a skeleton evaluation, a colon expression in the skeleton,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N那么我要做的事情是 : 找一个表达式   --- cadr\Nthen what I'm going to do is find the expression that's in the colon-- the CADR in this case.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这是一些抽象语法, 我能改变这些规则的表示.\NIt's a piece of abstract syntax here, so I can change my representation of rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我将计算这个字典中的那个关系, 不需要计较求值的关系.\NI'm going to evaluate that relative to this dictionary, whatever evaluation means.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们将要找到很多\NWe'll find out a lot about that sometime.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N那个就是我的答案.\NAnd the result of that is my answer.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以,\Nso.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N开始这个循环 -- 这个是事始化 --  伴随着整个框架调用它,\NI start up this loop-- here's my initialization-- by calling it with the whole skeleton,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这将递归的分解成小块.\Nand this will just do a recursive decomposition into pieces.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在, 细节是在求值里面发生了什么.\NNow, one more little bit of detail is what happens inside evaluate?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我没有办法说的很详细.\NI can't tell you that in great detail.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我大致说一下.\NI'll tell you a little bit of it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,之后,我们再看里面的更多细节.\NLater, we're going to see--look into this in much more detail.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N对这些表单进行求值,  关于字典的表达式\NTo evaluate some form, some expression with respect to a dictionary,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果表达式是一个原子对象,\Nif the expression is an atomic object, well,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我将看看.\NI'm going to go look it up.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里没有什么有趣的东西.\NNothing very exciting there.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N否则,我在这里做一些复杂的事情,\NOtherwise, I'm going to do something complicated here,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我要应用一个过程,它是在某处寻找操作符的结果 .   整个过程我们将来再说.\Nwhich is I'm going to apply a procedure which is the result of looking up the operator part in something that we're going to find out about someday.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我想让大家认识到大家正在看神奇的东西.\NI want you realize you're seeing magic now.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这个魔法将会在不久变的清晰, 但不是今天.\NThis magic will become clear very soon, but not today.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N当我看 --- 找这些块的时候,  #TBD\NThen I'm looking at--looking up all the pieces, all the arguments to that in the dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以我不想让大家看这些细节.\NSo I don't want you to look at this in detail.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我要你说，有更多的事情在这里，我们将看到关于它的更多东西.\NI want you to say that there's more going on here, and we're going to see more about this.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是  -- 魔术将要停止.\NBut it's-- the magic is going to stop.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N#TBD\NThis part has to do with Lisp, and it's the end of that.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N好的, 我们现在知道匹配和实例化.\NOK, so now we know about matching and instantiation.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这一节大家有疑问么?\NAre there any questions for this segment?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,学生: 我有一个问题.\NAUDIENCE: I have a question.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,老师:好的.\NPROFESSOR: Yes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生: 是否有可能调出以前的幻灯片\NAUDIENCE: Is it possible to bring up a previous slide?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N是关于定义匹配模式的\NIt's about this define match pattern.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N好的.\NPROFESSOR: Yes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N你要看定义匹配模式的全部的幻灯片么?\NYou'd like to see the overall slide define match pattern.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N有人可以把它   #TBD\NCan somebody put up the -- no, the overhead.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这是最大的规模.\NThat's the biggest scale one.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N你想看哪一部份?\NWhat part would you like to see?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生: 最上面的.\NAUDIENCE: Well, the top would be fine.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N你传递失败的任何一部份.\NAny of the parts where you're passing failed.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师: 好.\NPROFESSOR: Yes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生: 基本的想法是把传递回来的错误返回给字典 , 是么?\NAUDIENCE: The idea is to pass failed back to the dictionary; is that right?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,老师: 字典是匹配的答案,对吧.\NPROFESSOR: The dictionary is the answer to a match, right?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它要不是一些匹配 , 要不就什么都没有.\NAnd it is either some mapping or there's no match.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N(失败的情况是) 字典里没有任何匹配.\NIt doesn't match.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,学生: 对.\NAUDIENCE: Right.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:  在这里的是, 事实上,\NPROFESSOR: So what you're seeing over here is, in fact,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N因为一个匹配可能有另外的通过这个字典的匹配.\Nbecause the fact that a match may have another match pass in the dictionary,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,一般的情况写在了这里.\Nas you see in the general case down here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这就是一个匹配通过另一个匹配到字典通用情况.\NHere's the general case where a match passes another match to the dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N当我匹配cdr的时候, 我用匹配了car的结果的字典来匹配cdr\NWhen I match the cdr's, I match them in the dictionary that is resulting from matching the car's.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里就是我已经有的东西.\NOK, that's what I have here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以因为这个,如果匹配car失败了,\NSo because of that, if the match of the car's fails,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N有可能cdr的传播匹配失败,\Nthen it may be necessary that the match of the cdr's propagates that failure,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这就是(代码的)第一行\Nand that's what the first line is.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生: 好的,我现在还不明白匹配 --\NAUDIENCE: OK, well, I'm still unclear what matches--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N从匹配的实例出来的是什么呢 ?\Nwhat comes out of one instance of the match?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师: 两个可能中的一个.\NPROFESSOR: One of two possibilities.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N符号失败了,意味着没有匹配.\NEither the symbol failed, which means there is no match.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,学生: 对\NAUDIENCE: Right.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师: 或者某些映射, 现在还是一个抽象的东西,\NPROFESSOR: Or some mapping, which is an abstract thing right now,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N你需要知道它的结构,\Nand you should know about the structure of it,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它在匹配过程中把模式变量和他们的值关联起来,\Nwhich relates the pattern variables to their values as picked up in the match.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生: 好 ---\NAUDIENCE: OK, so it is--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师: 它是由扩展字典构造出来的.\NPROFESSOR: That's constructed by extend dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生: 所以递归性质带来了一个事实，即如果曾经失败的被传递出来匹配的任何调用的，\NAUDIENCE: So the recursive nature brings about the fact that if ever a failed gets passed out of any calling of match,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N那么第一个条件将它捡起来 -\Nthen the first condition will pick it up--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师: 并且传播它, 不做任何其他处理,对.\NPROFESSOR: And just propagate it along without any further ado, right.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生:对.\NAUDIENCE: Oh, right.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N好\NOK.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:这是从这里获得失败(结果)最快的方法.\NPROFESSOR: That's just the fastest way to get that failure out of there.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,对.\NYes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,学生: 如果这里没有失败, 那意味着我匹配了一个模式,\NAUDIENCE: If I don't fail, that means that I've matched a pattern,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,and I run the procedure extend dict and then pass in the pattern in the expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,But the substitution will not be made at that point; is that right?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我只是 --\NI'm just--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:不不.\NPROFESSOR: No, no.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,There's no substitution being there because there's no skeleton to be substituted in.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,AUDIENCE: Right.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,771\N00:43:02,950 --> 00:43:03,070\NSo what--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,772\N00:43:03,070 --> 00:43:04,760\NPROFESSOR: All you've got there\Nis we're making up the
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,773\N00:43:04,760 --> 00:43:08,270\Ndictionary for later\Nsubstitution.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,774\N00:43:08,270 --> 00:43:10,680\NAUDIENCE: And what would the\Ndictionary look like?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,775\N00:43:10,680 --> 00:43:13,540\NIs it ordered pairs?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,776\N00:43:13,540 --> 00:43:15,940\NPROFESSOR: That's--that's\Nnot told to you.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,777\N00:43:15,940 --> 00:43:16,700\NWe're being abstract.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,778\N00:43:16,700 --> 00:43:17,650\NAUDIENCE: OK.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,779\N00:43:17,650 --> 00:43:18,850\NPROFESSOR: Why do you\Nwant to know?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,780\N00:43:18,850 --> 00:43:20,075\NWhat it is, it's a function.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,781\N00:43:20,075 --> 00:43:21,330\NIt's a function.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,782\N00:43:21,330 --> 00:43:22,090\NAUDIENCE: Well, the reason\NI want to know is--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,783\N00:43:22,090 --> 00:43:23,300\NPROFESSOR: A function\Nabstractly is a
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,784\N00:43:23,300 --> 00:43:25,130\Nset of ordered pairs.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,785\N00:43:25,130 --> 00:43:29,040\NIt could be implemented as\Na set of list pairs.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,786\N00:43:29,040 --> 00:43:32,590\NIt could be implemented as some\Nfancy table mechanism.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,787\N00:43:32,590 --> 00:43:35,780\NIt could be implemented\Nas a function.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,788\N00:43:35,780 --> 00:43:38,500\NAnd somehow, I'm building\Nup a function.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,789\N00:43:38,500 --> 00:43:40,560\NBut I'm not telling you.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,790\N00:43:40,560 --> 00:43:43,090\NThat's up to George, who's going\Nto build that later.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,791\N00:43:43,090 --> 00:43:49,430
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,792\N00:43:49,430 --> 00:43:52,470\NI know you really badly want\Nto write concrete things.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,793\N00:43:52,470 --> 00:43:54,280\NI'm not going to let\Nyou do that.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,794\N00:43:54,280 --> 00:43:56,020\NAUDIENCE: Well, let me at\Nleast ask, what is the
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,795\N00:43:56,020 --> 00:43:57,530\Nimportant information\Nthere that's being
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,796\N00:43:57,530 --> 00:43:59,750\Npassed to extend dict?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,797\N00:43:59,750 --> 00:44:01,720\NI want to pass the\Npattern I found--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,798\N00:44:01,720 --> 00:44:02,630\NPROFESSOR: Yes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,799\N00:44:02,630 --> 00:44:04,870\NThe pattern that's matched\Nagainst the expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,800\N00:44:04,870 --> 00:44:07,680\NYou want to have the pattern,\Nwhich happens to be in those
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,801\N00:44:07,680 --> 00:44:09,970\Ncases pattern variables,\Nright?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,802\N00:44:09,970 --> 00:44:11,420\NAll of those three\Ncases for extend
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,803\N00:44:11,420 --> 00:44:13,220\Ndict are pattern variables.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,804\N00:44:13,220 --> 00:44:14,090\NAUDIENCE: Right.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,805\N00:44:14,090 --> 00:44:16,370\NPROFESSOR: So you have a pattern\Nvariable that is to be
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,806\N00:44:16,370 --> 00:44:18,965\Ngiven a value in a dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,807\N00:44:18,965 --> 00:44:19,250\NAUDIENCE: Mm-hmm.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,808\N00:44:19,250 --> 00:44:21,760\NPROFESSOR: The value is the\Nexpression that it matched
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,809\N00:44:21,760 --> 00:44:27,260\Nagainst. The dictionary is the\Nset of things I've already
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,810\N00:44:27,260 --> 00:44:30,195\Nfigured out that I have\Nmemorized or learned.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,811\N00:44:30,195 --> 00:44:33,250\NAnd I am going to make a new\Ndictionary, which is extended
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,812\N00:44:33,250 --> 00:44:36,870\Nfrom the original one by having\Nthat pattern variable
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,813\N00:44:36,870 --> 00:44:39,880\Nhave a value with the\Nnew dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,814\N00:44:39,880 --> 00:44:41,580\NAUDIENCE: I guess what I don't\Nunderstand is why can't the
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,815\N00:44:41,580 --> 00:44:43,450\Nsubstitution be made right\Nas soon as you find--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,816\N00:44:43,450 --> 00:44:44,760\NPROFESSOR: How do I know what\NI'm going to substitute?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,817\N00:44:44,760 --> 00:44:47,590\NI don't know anything\Nabout this skeleton.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,818\N00:44:47,590 --> 00:44:49,550\NThis pattern, this matcher\Nis an independent unit.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,819\N00:44:49,550 --> 00:44:50,320\NAUDIENCE: Oh, I see.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,820\N00:44:50,320 --> 00:44:51,090\NOK.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,821\N00:44:51,090 --> 00:44:51,350\NPROFESSOR: Right?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,822\N00:44:51,350 --> 00:44:52,330\NAUDIENCE: Yeah.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,823\N00:44:52,330 --> 00:44:53,200\NPROFESSOR: I take the matcher.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,824\N00:44:53,200 --> 00:44:54,170\NI apply the matcher.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,825\N00:44:54,170 --> 00:44:57,532\NIf it matches, then it was worth\Ndoing instantiation.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,826\N00:44:57,532 --> 00:44:58,516\NAUDIENCE: OK, good.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,827\N00:44:58,516 --> 00:44:59,008\NYeah.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,828\N00:44:59,008 --> 00:45:00,484\NPROFESSOR: OK?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,829\N00:45:00,484 --> 00:45:02,880\NAUDIENCE: Can you just do that\Nanswer again using that
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,830\N00:45:02,880 --> 00:45:04,940\Nexample on the board?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,831\N00:45:04,940 --> 00:45:06,390\NYou know, what you just passed\Nback to the matcher.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,832\N00:45:06,390 --> 00:45:06,900\NPROFESSOR: Oh yes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,833\N00:45:06,900 --> 00:45:08,480\NOK, yes.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,834\N00:45:08,480 --> 00:45:10,660\NYou're looking at\Nthis example.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,835\N00:45:10,660 --> 00:45:14,470\NAt this point when I'm\Ntraversing this structure, I
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,836\N00:45:14,470 --> 00:45:16,630\Nget to here: x.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,837\N00:45:16,630 --> 00:45:18,760\NI have some dictionary,\Npresumably an empty dictionary
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,838\N00:45:18,760 --> 00:45:22,020\Nat this point if this is\Nthe whole expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,839\N00:45:22,020 --> 00:45:26,550\NSo I have an empty dictionary,\Nand I've matched x against 3.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,840\N00:45:26,550 --> 00:45:28,850\NSo now, after this point,\Nthe dictionary
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,841\N00:45:28,850 --> 00:45:33,550\Ncontains x is 3, OK?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,842\N00:45:33,550 --> 00:45:35,290\NNow, I continue walking\Nalong here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,843\N00:45:35,290 --> 00:45:37,040\NI see y.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,844\N00:45:37,040 --> 00:45:39,780\NNow, this is a particular\Nx, a pattern x.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,845\N00:45:39,780 --> 00:45:41,690\NI see y, a pattern y.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,846\N00:45:41,690 --> 00:45:48,940\NThe dictionary says, oh yes, the\Npattern y is the symbol x
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,847\N00:45:48,940 --> 00:45:52,360\Nbecause I've got\Na match there.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,848\N00:45:52,360 --> 00:45:55,380\NSo the dictionary now contains\Nat this point two entries.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,849\N00:45:55,380 --> 00:46:02,180\NThe pattern x is 3, and the\Npattern y is the expression x.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,850\N00:46:02,180 --> 00:46:04,230\NNow, I get that, I can\Nwalk along further.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,851\N00:46:04,230 --> 00:46:08,100\NI say, oh, pattern y\Nalso wants to be 4.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,852\N00:46:08,100 --> 00:46:10,680\NBut that isn't possible,\Nproducing a failure.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,853\N00:46:10,680 --> 00:46:14,340
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,854\N00:46:14,340 --> 00:46:14,830\NThank you.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们休息一下.\NLet's take a break.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,好,大家第一次正在看一个非常庞大而且复杂的程序.\NOK, you're seeing your first very big and hairy program.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,现在,当然, 这节的一个目标是让大家可以读懂这么庞大的程序, 完全不用害怕它.\NNow, of course, one of the goals of this subsegment is to get you to be able to read something like this and not be afraid of it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这仅仅是4页的代码.\NThis one's only about four pages of code.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这个主题结束的时候,我希望大家阅读一个50页的代码不会害怕.\NBy the end of the subject, I hope a 50-page program will not look particularly frightening.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,#TBD\NBut I don't expect-- and I don't want you to think that I expect you to be getting it as it's coming out.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N你应该感受到这种气息，好不好？\NYou're supposed to feel the flavor of this, OK?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后你应该想想它，因为它是一个很大的程序.\NAnd then you're supposed to think about it because it is a big program.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,有很多东西在这个程序中.\NThere's a lot of stuff inside this program.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,现在, 我们正在实现我告诉大家的这个语言.  模式匹配语言.\NNow, I've told you about the language we're implementing, the pattern match substitution language.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我已经展示了一些规则.\NI showed you some rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我已经告诉大家关于匹配和实例化, 他们是运行一个规则的两部份.\NAnd I've told you about matching and instantiation, which are the two halves of how a rule works.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,现在, 我们需要理解控制结构, 通过它,规则被应用到表达式上来做代数化简.\NNow we have to understand the control structure by which the rules are applied to the expressions so as to do algebraic simplification.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它是非常复杂的.\NNow, that's also a big complicated mess.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N问题是其中有很多连锁的,相互交织的循环,\NThe problem is that there is a variety of interlocking,\Ninterwoven loops, if you will, involved in this.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N一方面, 我不得不应用 --\NFor one thing, I have to apply--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我不得不检查我需要化简的表达式中的每一个子表达式\NI have to examine every subexpression of my expression that I'm trying to simplify.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们已经知道要如何做这件事情了.\NThat we know how to do.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它是car , cdr 递归, 像这样, 是一种树遍历.\NIt's a car cdr recursion of some sort, or something like that, and some sort of tree walk.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N那个将要发生.\NAnd that's going to be happening.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这样的每一个地方, 我在做我的我试图简化表达遍历得到的每个节点\NNow, for every such place, every node that I get to in doing my traversal of the expression I'm trying to simplify,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我想应用所有的规则.\NI want to apply all of the rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N每一个规则将要寻找每一个节点.\NEvery rule is going to look at every node.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我将要对这些规则做一个旋转.\NI'm going to rotate the rules around.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N一个规则可以匹配或者不匹配.\NNow, either a rule will or will not match.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果规则不匹配,那我就不关心了.\NIf the rule does not match, then it's not very interesting.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果规则匹配了,我在那个节点用另外一个表达式替换这个表达式.\NIf the rule does match, then I'm going to replace that node in the expression by an alternate expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,实际上,我创建了一个新的表达式, 它包含---\NI'm actually going to make a new expression, which contains--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N新值所包含的一切, 替代框架的结果, 在这个层级上框架的实例化.\Neverything contains that new value, the result of substituting into the skeleton, instantiating the skeleton for that rule at this level.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是没有人知道我那里实例化的是已经化简的形式.\NBut no one knows whether that thing that I instantiated there is in simplified form.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以,我们要一个化简的形式, 用某种方式调用化简器在我构建的东西上面\NSo we're going to have to simplify that, somehow to call the simplifier on the thing that I just constructed.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N当这完成的时候, 我可以把我想要的作为答案构建到表达式中\NAnd then when that's done, then I sort of can build that into the expression I want as my answer.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里,我有一个基本想法, 垃圾出化简器.\NNow, there is a basic idea here, which I will call a garbage- in, garbage-out  simplifier.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它是一个递归的化简器.\NIt's a kind of recursive simplifier.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N化简的方法是基本对象比如变量就是最简形式的了.\NAnd what happens is the way simplify something is that simple objects like variables are simple.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N组合对象,我也不知道.\NCompound objects, well, I don't know.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我要做的是从简单对象开始构建,\NWhat I'm going to do is I'm going to build up from simple objects,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,通过假设他们分出来的小块都是基本对象.\Ntrying to make simple things by assuming that the pieces they're made out of are simple.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这就是这里所发生的.\NThat's what's happening here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,现在,如果我们看第一个幻灯片 --- 在上面\NWell, now, if we look at the first slide-- no, overhead, overhead.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果我们看顶上, 我们看到一个非常复杂的程序像我们之前看到的匹配器一样,\NIf we look at the overhead, we see a very complicated program like we saw before for the matcher,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它太复杂了, 还没有必要仔细阅读它.\Nso complicated that you can't read it like that.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我只想让大家感受一下它的轮廓,这个轮廓就是这个程序里面有很多子程序.\NI just want you to get the feel of the shape of it, and the shape of it is that this program has various subprograms in it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,其中的一个 -- 这部份是遍历表达式, 这部份是尝试规则.\NOne of them--this part is the part for traversing the expression, and this part is the part for trying rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在,当然,我们可以更详细的看看.\NNow, of course, we can look at that in some more detail.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们看第一个幻灯片 ,好吧.\NLet's look at--let's look at the first transparency, right?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它是由好几个部份组成的化简器.\NThe simplifier is made out of several parts.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在,记住在最开始, 化简器有一系列规则 --\NNow, remember at the very beginning, the simplifier is the thing which takes a rules--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,一系列的规则和产生一个过程,这个过程将对它进行简化.\Na set of rules and produces a program which will simplify it relative to them.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以,这里我们有化简器.\NSo here we have our simplifier.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它需要一个规则集合.\NIt takes a rule set.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N#TBD\NAnd in the context where that rule set is defined, there are various other definitions that are done here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这个化简器过程的结果是,事实上, 是一个已经定义好的过程.\NAnd then the result of this simplifier procedure is, in fact, one of the procedures that was defined.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N化简X\NSimplify x.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这些规则集合上的化简器的调用结果是一个过程,\NWhat I'm returning as the value of calling the simplifier on a set of rules is a procedure,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,化简X的过程, 它在这个上下文中定义, (过程)是一个恰当利用这些规则的化简过程.\Nthe simplify x procedure, which is defined in that context, which is a simplification procedure appropriate for using those set of rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这就是我这里有的.\NThat's what I have there.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这些过程的前两个, 这个和这个, 他们一起递归遍历一个表达式.\NNow, the first two of these procedures, this one and this one, are together going to be the recursive traversal of an expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这个是任何表达式的通用化简方法, 这个是化简部份表达式列表的东西.\NThis one is the general simplification for any expression, and this is the thing which simplifies a list of parts of an expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N没有别的了.\NNothing more.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N对于其中的每一个,我们来做一些复杂的事情, 包括尝试这些规则.\NFor each of those, we're going to do something complicated, which involves trying the rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N现在,我们应该看这些部份.\NNow, we should look at the various parts.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们看一下一个表达式的递归遍历.\NWell let's look first at the recursive traversal of an expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这是一种简单的方式.\NAnd this is done in a sort of simple way.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这个一个小型的递归程序.\NThis is a little nest of recursive procedures.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这里有两个过程 ---\NAnd what we have here are two procedures--
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,一个是对一个表达式进行化简, 另一个是对部分表达式的进行化简\None for simplifying an expression, and one for simplifying parts of an expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N他们的工作方式很简单.\NAnd the way this works is very simple.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果我要化简的表达式是组合表达式, 我就对这个表达式的每一个部分进行化简.\NIf the expression I'm trying to simplify is a compound expression, I'm going to simplify all the parts of it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N就调用这个  -- 过程 , 化简部分会构造一个新的各个部分都化简过的表达式\NAnd that's calling--that procedure, simplify parts, is going to make up a new expression with all the parts simplified,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这个过程中会尝试所有的规则,在这里.\Nwhich I'm then going to try the rules on over here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果表达式不是复合表达式, 它如果是简单的表达式, 比如 , 符号PI\NIf it turns out that the expression is not compound, if it's simple, like just a symbol or something like pi,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N那么, 这种情况, 我就在这个符号上尝试所有的规则, 因为我想让这些规则中的PI扩展成3.1415....\Nthen in any case, I'm going to try the rules on it because it might be that I want in my set of rules to expand pi to 3.14159265358979,dot, dot, dot.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N也许我不会这样做.\NBut I may not.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是, 没有理由不这样做.\NBut there is no reason not to do it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,现在,如果我要化简 这些部分,那就很简单了.\NNow, if I want to simplify the parts, well, that's easy too.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N要么表达式是空的, 没有更多的部分(表达式), 这种情况我返回一个空表达式.\NEither the expression is an empty one, there's no more parts, in which case I have the empty expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N要么, 我用cons构建一个新的表达式, 化简表达式的第一部分作为car,\NOtherwise, I'm going to make a new expression by cons, which is the result of simplifying the first part of the expression, the car,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后, 化简表达式的其他部分作为cdr.\Nand simplifying the rest of the expression, which is the cdr.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我用这种方式向大家展示这些的原因是我想让大家感受在写程序的时候,这些模式非常重要.\NNow, the reason why I'm showing you this sort of stuff this way is because I want you get the feeling for the various patterns that are very important when writing programs.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N而且他们可以用不同的方式实现.\NAnd this could be written a different way.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N还有其他的表达式化简的方法.\NThere's another way to write simplified expressions so there would be only one of them.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里仅仅是一个小程序.\NThere would only be one little procedure here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我把它写到黑板上让大家感受一下.\NLet me just write that on the blackboard to give you a feeling for that.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这在另一个习俗里,如果你愿意. #TBD  i think this sentence is wrong.\NThis in another idiom, if you will.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,为了化简表达式X , 我要做什么呢?\NTo simplify an expression called x, what am I going to do?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我要在后面的情况下尝试这些规则.\NI'm going to try the rules on the following situation.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果 -- 后面的表达式 -- 是复合的, 就像我之前说的.\NIf-- on the following expression-- compound, just like we had before.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果表达式是复合的, 我要怎么做呢?\NIf the expression is compound, well, what am I going to do?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我要对它的每一个部分进行化简.\NI'm going to simplify all the parts.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是我已经有cdr的递归,利用通用模式, 已经抽象成了一个高阶过程.\NBut I already have a cdr recursion, a common pattern of usage, which has been captured as a high-order procedure.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它叫做map.\NIt's called map.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我在这里写出来.\NSo I'll just write that here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\Nmap化简这个表达式, 这个表达式的每一个部分.\NMap simplify the expression, all the parts of the expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N应用化简操作, 这个, 表达式的每一个部分,\NThis says apply the simplification operation, which is this one, every part of the expression,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N都切分到了一个列表中.\Nand then that cuts those up into a list.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,列表中的每一个元素组成了这个表达式,或者,我已经有了这个表达式.\NIt's every element of the list which the expression is assumed to be made out of, and otherwise, I have the expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以我不需要helper过程来化简表达式的各个部分,因为我已经有了(这个表达式).\NSo I don't need the helper procedure, simplify parts, because that's really this.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以,有时候,可以这样写.\NSo sometimes, you just write it this way.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这个无关紧要.\NIt doesn't matter very much.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N好, 现在看一下 -- 如何尝试规则.\NWell, now let's take a look at-- let's just look at how you try rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N大家如果看这个幻灯片, 我们会看到一堆复杂的东西.\NIf you look at this slide, we see this is a complicated mess also.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我正在对一个表达式尝试规则.\NI'm trying rules on an expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,事实证明, #TBD\NIt turns out the expression I'm trying it on is some subexpression now of the expression I started with.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N因为我允许尝试每一个子表达式.\NBecause the thing I just arranged allowed us to try every subexpression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N所以,现在我们表达式的子表达式\NSo now here we're taking in a subexpression of the expression we started with .
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,就是这个.\NThat's what this is.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们这里要定义的是一个叫做scan的过程, 它用来尝试每一个规则.\NAnd what we're going to define here is a procedure called scan, which is going to try every rule.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们会在整个规则集上开始(扫描).\NAnd we're going to start it up on the whole set of rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这使用cdr 向后遍历规则, 根据你的意愿找规则来应用.\NThis is going to go cdr-ing down the rules, if you will, looking for a rule to apply.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N当找到一个(规则),它的任务就完成了.\NAnd when it finds one, it'll do the job.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们来看一下尝试规则是如何工作的.\NWell, let's take a look at how try rules works.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它很简单: 扫描所有的规则.\NIt's very simple: the scan rules. Scan rules, the way of scanning.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它很简单,是吧.\NWell, is it so simple?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,当然它是一个很庞大的程序.\NIt's a big program, of course.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们使用了一堆规则, 他们是整个规则列表的子列表.\NWe take a bunch of rules, which is a sublist of the list of rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们已经尝试了其中的一些, 他们都不符合, 这里还有一些.\NWe've tried some of them already, and they've not been appropriate, so we get to some here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我们跳转到下一个.\NWe get to move to the next one.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果没有更多的规则了,那么,我不能对这个表达式做任何事情,这个很简单.\NIf there are no more rules, well then, there's nothing I can do with this expression, and it's simplified.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然而, 如果还有规则,\NHowever, if it turns out that there are still rules to be done,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N那么就用一个空的字典作为整个过程的字典, 用剩余规则中的第一个对表达式进行模式匹配.\Nthen let's match the pattern of the first rule against the expression using the empty dictionary to start with and use that as the dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果失败了,就尝试其它规则.\NIf that happens to be a failure, try the rest of the rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这些代码就是说这个意思.\NThat's all it says here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,它说,丢弃那个规则.\NIt says discard that rule.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N否则,我将得到第一个规则的框架,实例化它,然后关联到字典中.\NOtherwise, well, I'm going to get the skeleton of the first rule, instantiate that relative to the dictionary,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后对结果进行化简, 这个表达式就是我想要的.\Nand simplify the result, and that's the expression I want.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以,虽然这是一个复杂的过程,但是每个复杂过程都是由许多简单部分组成的.\NSo although that was a complicated program, every complicated program is made out of a lot of simple pieces.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,现在 , 这里的递归模式非常复杂.\NNow, the pattern of recursions here is very complicated.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,最重要的事情就是不要想它.\NAnd one of the most important things is not to think about that.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,如果去思考它所做的实际模式,大家就会迷惑.\NIf you try to think about the actual pattern by which this does something, you're going to get very confused.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我会(迷惑)\NI would.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这不是你的问题,可以通过练习做到这一点。(写出这些代码)\NThis is not a matter of you can do this with practice.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这些模式非常难.\NThese patterns are hard.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N但是大家不用考虑它.\NBut you don't have to think about it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N窍门是 --好的程序和好的设计-- (知道编程时)什么是不需要考虑的.\NThe key to this-- it's very good programming and very good design-- is to know what not to think about.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N事实上,回到这个幻灯片, 我不需要考虑它是因为我规定了X化简后的结果是什么样子.\NThe fact is, going back to this slide, I don't have to think about it because I have specifications in my mind for what simplify x does.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我不需要知道它是如何做的.\NI don't have to know how it does it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它也许是调用scan尝试规则实现的.\NAnd it may, in fact, call scan somehow through try rules, which it does.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N然后通过某种方式, 在这里运行另一个递归.\NAnd somehow, I've got another recursion going on here.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,既然我知道化简X 产生一个化简后的结果,那么我就不需要再考虑它了.\NBut since I know that simplify x is assumed by wishful thinking to produce the simplified result, then I don't have to think about it anymore.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我直接使用它.\NI've used it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我合情合理的使用它.\NI've used it in a reasonable way.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我会得到一个正确的结果.\NI will get a reasonable answer.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N大家需要学习这种编程方法 -- 学会放弃(思考过多)\NAnd you have to learn how to program that way-- with abandon.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这里还有一点剩余.\NWell, there's very little left of this thing.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里还有一些字典方面的细节.\NAll there is left is a few details associated with what a dictionary is.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N你们想知道到底字典是什么, 但是我会跳过它,不告诉你们这些.\NAnd those of you who've been itching to know what a dictionary is, well, I will flip it up and not tell you anything about it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N字典很简单.\NDictionaries are easy.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它可以用叫做列表A 来表示, 它是为了生成表的特定模式\NIt's represented in terms of something else called an A list, which is a particular pattern of usage for making tables in lists.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,他们很简单.\NThey're easy.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N他们由pair构成, 之前已经有同学问过了.\NThey're made out of pairs, as was asked a bit ago.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,有个特殊的过程来处理这个东西,叫做assq , 大家可以在手册中看到.\NAnd there are special procedures for dealing with such things called assq, and you can find them in manuals.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我对这个不是非常感兴趣.\NI'm not terribly excited about it.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这里有趣的是我需要用一个模式,一个数据,一个字典来扩展这个字典.\NThe only interesting thing here in extend dictionary is I have to extend the dictionary with a pattern, a datum, and a dictionary.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,这个模式实际上是一个模式变量.\NThis pattern is, in fact, at this point a pattern variable.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N我要做什么呢?\NAnd what do I want to do?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我想离开模式变量的名字, 这个模式变量名字,  #TBD what the meaning of the pull out\NI want to pull out the name of that pattern variable, the pattern variable name,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,然后,我在字典中找它,看看字典中是否已经有值了.\Nand I'm going to look up in the dictionary and see if it already has a value.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,如果没有,就在字典中加入它.\NIf not, I'm going to add a new one in.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,如果已经存在了, 有这个值, 它最好等于现有的存储着的这个值.\NIf it does have one, if it has a value, then it had better be equal to the one that was already stored away.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N如果是这种情况, 字典就是我所期待的.\NAnd if that's the case, the dictionary is what I expected it to be.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N否则, 置失败.\NOtherwise, I fail.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,所以,它也很简单.\NSo that's easy, too.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,如果你发现一些程序, 它里面有很多小部分(过程)组成, 这些小部分都很简单.\NIf you open up any program, you're going to find inside of it lots of little pieces, all of which are easy.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N这种情况下, 我认为, 我告诉你价值一万美金的信息.\NSo at this point, I suppose, I've just told you some million-dollar valuable information.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我想这个程序几乎已经完成了.\NAnd I suppose at this point we're pretty much done with this program.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,大家有什么问题么?\NI'd like to ask about questions.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生: 是的, 你可以给我描述一个化简后的表达式的规范么？\NAUDIENCE: Yes, can you give me the words that describe the specification for a simplified expression?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N老师:可以.\NPROFESSOR: Sure.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N一个化简后的表达式需要一个表达式和一个化简表达式的过程.\NA simplified expression takes an expression and produces a simplified expression.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,就是这个.\NThat's it, OK?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N它的工作方式很简单.\NHow it does it is very easy.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N在复合表达式的情况下, 所有的块都是简单的, 然后在这个这些块上尝试这些规则.\NIn compound expressions, all the pieces are simplified, and then the rules are tried on the result.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,对于简单表达式, 就直接尝试这些规则.\NAnd for simple expressions, you just try all the rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N学生: 所以 是这些规则的作用来化简表达式的么?\NAUDIENCE: So an expression is simplified by virtue of the rules?
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,老师:当然.\NPROFESSOR: That's, of course, true.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,学生: 好.\NAUDIENCE: Right.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,老师: 它工作的方式是:化简的表达式, 在这里,\NPROFESSOR: And the way this works is that simplified expression, as you see here,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N把表达式切分成不能再分的小块,\Nwhat it does is it breaks the expression down into the smallest pieces,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,在化简器中使用这些规则自下而上化简构造表达式,\Nsimplifies building up from the bottom using the rules to be the simplifier,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,处理,构造一个新的表达式作为结果.\Nto do the manipulations, and constructs a new expression as the result.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N最终, 大家看到的一个事情是这些规则, 这些尝试的规则,\NEventually, one of things you see is that the rules themselves, the try rules,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,当它改变匹配的结果,叫做生成结果的化简表达式\Ncall a simplified expression on the results when it changes something, the results of a match.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,对不起, 框架的实例化结果已经匹配了\NI'm sorry, the results of instantiation of a skeleton for a rule that has matched.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N化简的表达式的细节是 任何传入的表达式通过这些规则生成化简后的表达式.\NSo the spec of a simplified expression is that any expression you put into it comes out simplified according to those rules.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,\N谢谢.\NThank you.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,我们休息一下.\NLet's take a break.
