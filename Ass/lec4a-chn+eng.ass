[Script Info]
; Script generated by Aegisub 3.0.4
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
Collisions: Normal
Scroll Position: 323
Active Line: 333
Video Zoom Percent: 1
PlayResX: 320
PlayResY: 240
Audio URI: ../../data/sicp/lec4a.mp4
Video File: ../../data/sicp/lec4a.mp4
Video Aspect Ratio: c1.33333
Video Position: 66040
YCbCr Matrix: TV.601

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:22.34,Default,,0,0,0,,[music]
Dialogue: 0,0:00:22.34,0:00:24.34,Default,,0,0,0,,模式匹配: 基于规则的替换\NPattern-matching: Rule-based Substitution
Dialogue: 0,0:00:24.34,0:00:29.34,Default,,0,0,0,,老师:昨天我们学习了一些符号操作\NPROFESSOR: Well, yesterday we learned a bit about symbolic manipulation,
Dialogue: 0,0:00:29.34,0:00:39.48,Default,,0,0,0,,并且写了一个典型的程序来实现从微积分书中学到的微积分规则\Nand we wrote a rather stylized program to implement a pile of calculus rule from the calculus book.
Dialogue: 0,0:00:39.48,0:00:49.25,Default,,0,0,0,,在这些幻灯片中可以看到教科书中的一些积分规则\NHere on the transparencies, we see a bunch of calculus rules from such a book.
Dialogue: 0,0:00:49.25,0:00:55.14,Default,,0,0,0,,当然 我们要做的事情是把这些规则转化成计算机语言\NAnd, of course, what we did is sort of translate these rules into the language of the computer.
Dialogue: 0,0:00:55.14,0:00:58.85,Default,,0,0,0,,这是一个有趣的事情\NBut, of course, that's a sort of funny strategy.
Dialogue: 0,0:00:58.85,0:01:04.80,Default,,0,0,0,,如何把这些规则翻译成计算机语言呢？\NWhy should we have to translate these rules into the language of the computer?
Dialogue: 0,0:01:04.80,0:01:06.62,Default,,0,0,0,,我说的意思是---\NAnd what do I really mean by that?
Dialogue: 0,0:01:06.62,0:01:11.02,Default,,0,0,0,,昨天我们写的典型程序\NThese are--the program we wrote yesterday was very stylized.
Dialogue: 0,0:01:11.02,0:01:18.91,Default,,0,0,0,,它是一个有条件的,根据类型进行分发表达式来作为一些规则匹配(的过程)\NIt was a conditional, a dispatch on the type of the expression as observed by the rules.
Dialogue: 0,0:01:18.91,0:01:29.37,Default,,0,0,0,,我们这里看到的规则是:如果对象被求导 表达式是常量就做一些事情\NWhat we see here are rules that say if the object being the derivative is being taken of, if that expression is a constant, then do one thing.
Dialogue: 0,0:01:29.37,0:01:31.60,Default,,0,0,0,,如果它是一个变量就做另一件事情\NIf it's a variable, do another thing.
Dialogue: 0,0:01:31.60,0:01:36.00,Default,,0,0,0,,如果它是一个常量乘以一个变量作一些事情等等\NIf it's a product of a constant times a variable, do something and so on.
Dialogue: 0,0:01:36.00,0:01:38.96,Default,,0,0,0,,这里有很多类型的分发\NThere's sort of a dispatch there on a type.
Dialogue: 0,0:01:41.40,0:01:45.16,Default,,0,0,0,,既然它有如此典型的行为和结构\NWell, since it has such a stylized behavior and structure,
Dialogue: 0,0:01:45.56,0:01:49.53,Default,,0,0,0,,有没有其他方式把这个过程写的更加清晰？\Nis there some other way of writing this program that's more clear?
Dialogue: 0,0:01:50.20,0:01:53.83,Default,,0,0,0,,首先要解决的是：规则是什么？这些规则是什么?\NWell, what's a rule, first of all? What are these rules?
Dialogue: 0,0:01:55.56,0:01:58.50,Default,,0,0,0,,我们来好好想一下 规则有好几个部分\NLet's think about that.Rules have parts.
Dialogue: 0,0:01:58.50,0:02:09.93,Default,,0,0,0,,如果看这些规则细节 比如这些规则有(等式)左边的部分和(等式)右边的部分\NIf you look at these rules in detail, what you see, for example, is the rule has a left-hand side and a right-hand side.
Dialogue: 0,0:02:10.36,0:02:14.36,Default,,0,0,0,,每一个规则都有左边部分和右边部分\NEach of these rules has a left-hand side and the right-hand side.
Dialogue: 0,0:02:14.36,0:02:20.60,Default,,0,0,0,,左边部分是用来对求导表达式进行对比\NThe left-hand side is somehow compared with the expression you're trying to take the derivative of.
Dialogue: 0,0:02:21.06,0:02:25.56,Default,,0,0,0,,右边的部分是替换原有表达式\NThe right-hand side is the replacement for that expression.
Dialogue: 0,0:02:28.06,0:02:33.73,Default,,0,0,0,,这张纸上的所有规则都是这样的\NSo all rules on this page are something like this.
Dialogue: 0,0:02:36.10,0:02:48.70,Default,,0,0,0,,我有许多模式 我需要以某种方式对给定的模式生成一个框架\NI have patterns, and somehow, I have to produce, given a pattern, a skeleton.
Dialogue: 0,0:02:51.76,0:02:53.40,Default,,0,0,0,,这就是一个规则\NThis is a rule.
Dialogue: 0,0:02:55.03,0:03:03.53,Default,,0,0,0,,模式就是（输入的）匹配 框架是为了获得一个新的表达式的一种替换\NA pattern is something that matches, and a skeleton is something you substitute into in order to get a new expression.
Dialogue: 0,0:03:05.90,0:03:16.36,Default,,0,0,0,,我的意思是：模式用来匹配表达式 匹配原表达式\NSo what that means is that the pattern is matched against the expression, which is the source expression.
Dialogue: 0,0:03:23.20,0:03:40.26,Default,,0,0,0,,应用规则的结果是产生一个新的表达式 我叫它目标 它是通过实例化框架实现的\NAnd the result of the application of the rule is to produce a new expression, which I'll call a target, by instantiation of a skeleton.
Dialogue: 0,0:03:41.20,0:03:43.93,Default,,0,0,0,,这个叫做实例化\NThat's called instantiation.
Dialogue: 0,0:03:50.23,0:03:55.20,Default,,0,0,0,,这个过程描述了这些规则\NSo that is the process by which these rules are described.
Dialogue: 0,0:03:55.36,0:04:03.76,Default,,0,0,0,,我今天要做的事情是：构建一个语言并且做一些事情来为这个语言做解释(解析)\NWhat I'd like to do today is build a language and a means of interpreting that language,
Dialogue: 0,0:04:03.76,0:04:09.10,Default,,0,0,0,,(还要做)执行这个语言 这个语言可以直接表述这些规则\Na means of executing that language, where that language allows us to directly express these rules.
Dialogue: 0,0:04:10.16,0:04:19.93,Default,,0,0,0,,我们要做的事情用计算机语言写这些规则的程序来避免把这个层级的语言规则带到机器语言层面\NAnd what we're going to do is instead of bringing the rules to the level of the computer by  writing a program that is those rules in the computer's language--
Dialogue: 0,0:04:19.93,0:04:22.03,Default,,0,0,0,,在Lisp的世界中\Nat the moment, in a Lisp--
Dialogue: 0,0:04:22.03,0:04:29.53,Default,,0,0,0,,我们要写一些程序让计算机可以理解这些规则\Nwe're going to bring the computer to the level of us by writing a way by which the computer can understand rules of this sort.
Dialogue: 0,0:04:30.43,0:04:39.70,Default,,0,0,0,,需要强调一下 上一次 我们试图解决一系列的问题而不是一个特定的问题\NThis is slightly emphasizing the idea that we had last time that we're trying to make a solution to a class of problems rather than a particular one.
Dialogue: 0,0:04:39.70,0:04:55.80,Default,,0,0,0,,如果我为不同的数学运算写规则来简代数运算或者操作三角函数\NThe problem is if I want to write rules for a different piece of mathematics, say, to simple algebraic simplification or something like that, or manipulation of trigonometric functions,
Dialogue: 0,0:04:55.93,0:05:01.16,Default,,0,0,0,,我将用昨天的方法写一个不同的程序\NI would have to write a different program in using yesterday's method.
Dialogue: 0,0:05:01.16,0:05:12.86,Default,,0,0,0,,我会把这些程序的通用的东西封装起来 包括匹配 实例化 控制结构 这都是非常复杂的事情\NWhereas I would like to encapsulate all of the things that are common to both of those programs, meaning the idea of matching, instantiation, the control structure, which turns out to be very complicated for such a thing,
Dialogue: 0,0:05:13.16,0:05:18.46,Default,,0,0,0,,我想要把这些规则单独进行封装\NI'd like to encapsulate that separately from the rules themselves.
Dialogue: 0,0:05:19.53,0:05:22.70,Default,,0,0,0,,首先让我们看一下表示\NSo let's look at, first of all, a representation.
Dialogue: 0,0:05:22.70,0:05:24.33,Default,,0,0,0,,我在在这里使用最基本的\NI'd like to use the overhead here.
Dialogue: 0,0:05:24.33,0:05:37.53,Default,,0,0,0,,这里我喜欢把求导的计算规则表示 看作是我这里写的一种简单语言\NI'd like-- there it is.I'd like to look at a representation of the rules of calculus for derivatives in a sort of simple language that I'm writing right here.
Dialogue: 0,0:05:37.83,0:05:43.86,Default,,0,0,0,,现在我尽量去避免为语法担心\NNow, I'm going to avoid--I'm going to avoid worrying about syntax.
Dialogue: 0,0:05:43.86,0:05:49.30,Default,,0,0,0,,我可以很容易的处理这个 但我没有兴趣---这个确实挺丑陋的\NWe can easily pretty this, and I'm not interested in making-- this is indeed ugly.
Dialogue: 0,0:05:49.30,0:05:58.50,Default,,0,0,0,,这确实不能像书上的dx dy dt那样表示 我喜欢这样写 但是这不是必需的\NThis doesn't look like the beautiful text set dx by dt or something that I'd\Nlike to write, but that's not essential.
Dialogue: 0,0:05:58.50,0:06:00.80,Default,,0,0,0,,这是一个偶然现象\NThat's sort of an accidental phenomenon.
Dialogue: 0,0:06:00.80,0:06:11.70,Default,,0,0,0,,这里 我正在担心规则的结构 规则的左边部分代表对来源的表达式的匹配\NHere, we're just worrying about the fact that the structure of the rules is that there is a left-hand side here, represents the thing I want to match against the derivative expression.
Dialogue: 0,0:06:11.70,0:06:21.50,Default,,0,0,0,,一个常数的导数的表示是：我用c表示常数 用v表示变量\NThis is the representation I'm going to say for the derivative of a constant, which we will call c with respect to the variable we will call v.
Dialogue: 0,0:06:22.70,0:06:25.76,Default,,0,0,0,,我们在右边得到的是0\NAnd what we will get on the right-hand side is 0.
Dialogue: 0,0:06:25.76,0:06:28.43,Default,,0,0,0,,这代表了一个规则\NSo this represents a rule.
Dialogue: 0,0:06:28.43,0:06:38.33,Default,,0,0,0,,下一个规则是变量的导数 求导的变量跟原变量都是v 结果是1\NThe next rule will be the derivative of a variable, which we will call v with respect to the same variable v, and we get a 1.
Dialogue: 0,0:06:38.33,0:06:47.46,Default,,0,0,0,,然而如果我对变量v求u的导数得到的结果是0\NHowever, if we have the derivative of a variable called u with respect to a different variables v, we will get 0.
Dialogue: 0,0:06:47.46,0:06:52.43,Default,,0,0,0,,我就是想让大家看一下这些规则是如何组装在一起的\NI just want you look at these rules a little bit and see how they fit together.
Dialogue: 0,0:06:52.43,0:07:01.90,Default,,0,0,0,,比如在这里是表达式x1和x2的和的导数\NFor example, over here, we're going to have the derivative of the sum of an expression called x1 and an expression called x2.
Dialogue: 0,0:07:01.90,0:07:08.93,Default,,0,0,0,,在我们写的这个语言中 用问号开头标识叫做模式变量\NThese things that begin with question marks are called pattern variables in the language that we're inventing,
Dialogue: 0,0:07:08.93,0:07:14.93,Default,,0,0,0,,通过匹配可以获得这些模式变量\Nand you see we're just making it up, so pattern variables for matching.
Dialogue: 0,0:07:14.93,0:07:20.33,Default,,0,0,0,,这里我们有一个表达式和的求导 这个称作x1\NAnd so in this-- here we have the derivative of the sum of the expression which we will call x1.
Dialogue: 0,0:07:20.33,0:07:26.70,Default,,0,0,0,,这个表达式叫做x2，这个叫做求导变量v --在右边：\NAnd the expression we will call x2 with respect to the variable we call v will be-- here is the right-hand side:
Dialogue: 0,0:07:26.70,0:07:33.10,Default,,0,0,0,,求和 表达式x1对v的导数---右边是一个框架---\Nthe sum of the derivative of  that expression x1 with respect to v-- the right-hand side is the skeleton--
Dialogue: 0,0:07:33.10,0:07:37.50,Default,,0,0,0,,x2对v的导数\Nand the derivative of x2 with respect to v.
Dialogue: 0,0:07:37.50,0:07:42.60,Default,,0,0,0,,这里的冒号表示要替换的对象\NColons here will stand for substitution objects.
Dialogue: 0,0:07:43.16,0:07:47.60,Default,,0,0,0,,我们称它们是框架求值\NThey're--we'll call them skeleton evaluations.
Dialogue: 0,0:07:48.10,0:07:56.00,Default,,0,0,0,,让我在黑板上写一些语法 这样我们就明白在这个规则语言中要做什么\NSo let me put up here on the blackboard for a second some syntax so we'll know what's going on for this rule language.
Dialogue: 0,0:07:56.26,0:08:00.06,Default,,0,0,0,,首先我们要处理模式匹配问题\NFirst of all, we're going to have to worry about the pattern matching.
Dialogue: 0,0:08:05.53,0:08:13.60,Default,,0,0,0,,符号foo匹配它本身foo\NWe're going to have things like a symbol like foo matches exactly itself.
Dialogue: 0,0:08:23.16,0:08:57.60,Default,,0,0,0,,(f a b)将要匹配任何列表的表达式 表达式的第一个元素是f 第2个元素是a 第三个元素是b\NThe expression f of a and b will be used to match any list whose first element is f, whose second element is a, and whose third element is b.
Dialogue: 0,0:08:58.20,0:09:07.56,Default,,0,0,0,,模式中可能还有--- (? x)\NAlso, another thing we might have in a pattern is that--a question mark with some variable like x.
Dialogue: 0,0:09:08.13,0:09:19.46,Default,,0,0,0,,它意味着什么呢 它意思是匹配任何东西 记作x\NAnd what that means, it says matches anything, which we will call x.
Dialogue: 0,0:09:25.10,0:09:30.26,Default,,0,0,0,,(c? x)只匹配常量\NQuestion mark c x will match only constants.
Dialogue: 0,0:09:31.06,0:09:41.36,Default,,0,0,0,,匹配的常量记作x\NSo this is something which matches a constant call x.
Dialogue: 0,0:09:43.96,0:09:57.66,Default,,0,0,0,,(v? x)匹配变量 记作x\NAnd question mark v x will match a variable, which we call x.
Dialogue: 0,0:10:01.30,0:10:04.23,Default,,0,0,0,,我们现在构建这个语言\NThis is sort of the language we're making up now.
Dialogue: 0,0:10:04.23,0:10:09.83,Default,,0,0,0,,如果我匹配的两个(表达式)不同，那么他们就一个元素一个元素的进行对比\NIf I match two things against each other, then they are compared element by element
Dialogue: 0,0:10:10.10,0:10:20.83,Default,,0,0,0,,模式中的元素也许包含这些语法变量 模式变量 模式变量用来匹配任意的对象\NBut elements in the pattern may contain these syntactic variables, pattern variables,which will be used to match arbitrary objects.
Dialogue: 0,0:10:21.70,0:10:29.56,Default,,0,0,0,,把这个对象作为标记x的值 比如说\NAnd we'll get that object as the value in the name x here, for example.
Dialogue: 0,0:10:30.50,0:10:38.03,Default,,0,0,0,,现在 当我们为实例做框架的时候\NNow, when we make skeletons for instantiation.
Dialogue: 0,0:10:38.03,0:10:41.93,Default,,0,0,0,,当我们有对象像这样。\NWell, then we have things like this.
Dialogue: 0,0:10:41.93,0:10:47.26,Default,,0,0,0,,符号foo实例化它自己\Nfoo, a symbol, instantiates to itself.
Dialogue: 0,0:10:54.70,0:11:15.23,Default,,0,0,0,,(f a b)实例化成 --- 实例化成一个三个元素的列表\NSomething which is a list like f of a and b, instantiates to-- well, f instantiates to a  3-list, a list of three elements,
Dialogue: 0,0:11:15.23,0:11:34.03,Default,,0,0,0,,列表中的元素是分别对f,a,b 进行实例化(的集合)\Nokay, which are the results of instantiating each of f, a, and b.
Dialogue: 0,0:11:35.46,0:11:54.93,Default,,0,0,0,,(: x) 我们实例化x的值作为匹配模式\NAnd x well--we instantiate to the value of x as in the matched pattern.
Dialogue: 0,0:12:02.33,0:12:06.86,Default,,0,0,0,,所以回头看这里 我们可以看到这些对象\NSo going back to the overhead here, we see -- we see that all of those kinds of objects
Dialogue: 0,0:12:06.86,0:12:16.06,Default,,0,0,0,,我们看到这个模式变量匹配一个常量\Nwe see here a pattern variable which matches a constant,
Dialogue: 0,0:12:16.06,0:12:19.20,Default,,0,0,0,,这个模式变量匹配一个变量\Na pattern variable which matches a variable,
Dialogue: 0,0:12:19.20,0:12:21.96,Default,,0,0,0,,这个模式变量将要匹配任何东西\Na pattern variable which will match anything.
Dialogue: 0,0:12:21.96,0:12:29.20,Default,,0,0,0,,如果我们给两个实例起了起了一样的名字，像这个是表达式的导数\NAnd if we have two instances of the same name, like this is the derivative of the expression
Dialogue: 0,0:12:29.20,0:12:32.10,Default,,0,0,0,,v表示任意表达式\Nwhich is a variable only whose name will be v with respect to some arbitrary expression which we will call v,
Dialogue: 0,0:12:32.33,0:12:41.36,Default,,0,0,0,,因为这个v出现了两次 他们是相同的\Nsince this v appears twice, we're going to want that to mean they have to be the same.
Dialogue: 0,0:12:42.30,0:12:45.23,Default,,0,0,0,,只有他们完全一致才算是匹配\NThe only consistent match is that those are the same.
Dialogue: 0,0:12:45.23,0:12:47.23,Default,,0,0,0,,所以在这里我们在构建一个语言\NSo here, we're making up a language.
Dialogue: 0,0:12:47.60,0:12:50.66,Default,,0,0,0,,事实上，这是一个非常好的事情\NAnd in fact, that's a very nice thing to be doing.
Dialogue: 0,0:12:50.66,0:12:52.60,Default,,0,0,0,,构建一个语言非常有趣\NIt's so much fun to make up a language.
Dialogue: 0,0:12:52.60,0:12:54.33,Default,,0,0,0,,并且大家一直在做这些\NAnd you do this all the time.
Dialogue: 0,0:12:54.33,0:13:00.73,Default,,0,0,0,,大家做过的真正强大的设计是构建一个语言来解决这样的问题\NAnd the really most powerful design things you ever do are sort of making up a language to solve problems like this.
Dialogue: 0,0:13:01.60,0:13:05.70,Default,,0,0,0,,我们回头看看这些规则\NNow, here we go back here and look at some of these rules.
Dialogue: 0,0:13:05.70,0:13:07.10,Default,,0,0,0,,这就是他们的全部\NWell, there's a whole set of them.
Dialogue: 0,0:13:07.10,0:13:12.43,Default,,0,0,0,,这里有一个加法和一个乘法，就像我们之前看到的一样\NI mean, there's one for addition and one for multiplication, just like we had before.
Dialogue: 0,0:13:12.43,0:13:26.90,Default,,0,0,0,,x1乘以x2的对v求导数 是x1乘以x2的导数加上x1的导数乘以x2\NThe derivative of the product of x1 and x2 with respect to v is the sum of the product of x1 and the derivative x2 with respect to v and the product of the derivative of x1 and x2.
Dialogue: 0,0:13:26.90,0:13:29.10,Default,,0,0,0,,这里我们有乘方\NAnd here we have exponentiation.
Dialogue: 0,0:13:29.10,0:13:32.46,Default,,0,0,0,,我们已经到了这页的最下面 我们还有很多像这样的东西\NAnd, of course, we run off the end down here.We get as many as we like.
Dialogue: 0,0:13:32.46,0:13:39.56,Default,,0,0,0,,整个事情是 这个规则列表的名字叫做求导数规则\NBut the whole thing over here, I'm giving this--this list of rules the name "derivative rules."
Dialogue: 0,0:13:40.40,0:13:44.33,Default,,0,0,0,,一旦我们有了这些 我们应该做什么呢？\NWhat would we do with such a thing once we have it?
Dialogue: 0,0:13:44.93,0:13:52.23,Default,,0,0,0,,最好的想法是 首先 我给大家写出来 然后我们将跟它“玩”这整整一天\NWell, one of the nicest ideas, first of all, is I'm going to write for you, and we're going to play with it all day.
Dialogue: 0,0:13:52.23,0:13:59.86,Default,,0,0,0,,我要给大家写的程序叫做simplifier一个通用的化简器\NWhat I'm going to write for you is a program called simplifier, the general-purpose simplifier.
Dialogue: 0,0:13:59.86,0:14:17.76,Default,,0,0,0,,我们将要像这样的定义dsimp 作为求导规则的化简器\NAnd we're going to say something like define dsimp to be a simplifier of the derivative rules.
Dialogue: 0,0:14:23.43,0:14:29.16,Default,,0,0,0,,化简器要做的事情是给定一些规则 它给我返回一个过程\NAnd what simplifier is going to do is, given a set of rules, it will produce for me a procedure
Dialogue: 0,0:14:29.16,0:14:35.06,Default,,0,0,0,,它根据这些规则对传递进来表达式进行化简\Nwhich will simplify expressions containing the things that are referred to by these rules.
Dialogue: 0,0:14:37.16,0:14:44.10,Default,,0,0,0,,这个过程构造出来对求导进行化简\NSo here will be a procedure constructed for your purposes to simplify things with derivatives in them such that,
Dialogue: 0,0:14:44.10,0:15:04.50,Default,,0,0,0,,然后如果我输入一些列表 比如我们说dsimp (+ x y)对x求导 #TBD\Nafter that, if we're typing at some list system, and we get a prompt, and we say dsimp, for example, of the derivative of the sum of x and y with respect to x--
Dialogue: 0,0:15:06.50,0:15:11.43,Default,,0,0,0,,注意这里的引号，因为我们讨论的表达式是求导--\Nnote the quote here because I'm talking about the expression which is the derivative--
Dialogue: 0,0:15:12.90,0:15:18.13,Default,,0,0,0,,然后我得到的结果是(+ 1 0)\Nthen I will get back as a result plus 1 0.
Dialogue: 0,0:15:19.36,0:15:24.60,Default,,0,0,0,,因为x+y的导数是x对x的导数加上y对x的导数\NBecause the derivative of x plus y is the derivative of x plus derivative y.
Dialogue: 0,0:15:24.60,0:15:28.10,Default,,0,0,0,,x对x的导数是1 y对x的导数是0\NThe derivative of x with respect to x is 1.The derivative of y with respect to x is 0.
Dialogue: 0,0:15:28.90,0:15:31.00,Default,,0,0,0,,这个不是我想要的\NIt's not what we're going to get.
Dialogue: 0,0:15:31.00,0:15:35.13,Default,,0,0,0,,我还没有在这里作代数化简\NI haven't put any simplification at that level-- algebraic simplification--yet.
Dialogue: 0,0:15:35.66,0:15:41.96,Default,,0,0,0,,当然一旦我有了这个东西那么我们可以 -- 我们可以看看其他的规则\NOf course, once we have such a thing, then we can--then we can look at other rules.
Dialogue: 0,0:15:41.96,0:15:49.36,Default,,0,0,0,,比如 我们看这个幻灯片\NSo, for example, we can, if we go to the slide, OK?
Dialogue: 0,0:15:49.36,0:15:58.63,Default,,0,0,0,,这里是其它的规则 代数操作规则 他们可以用来进行表达式的代数化简\NHere, for example, are other rules that we might have, algebraic manipulation rules, ones that would be used for simplifying algebraic expressions.
Dialogue: 0,0:15:58.63,0:16:15.03,Default,,0,0,0,,比如 这个左边说 任何操作应用到一个常数e1和一个常数e2的结果是对常数e1和e2进行操作\NFor example, just looking at some of these, the left-hand side says any operator applied\Nto a constant e1 and a constant e2 is the result of evaluating that operator on\Nthe constants e1 and e2.
Dialogue: 0,0:16:15.56,0:16:24.16,Default,,0,0,0,,或者一个操作应用到任意表达式e1和一个常量e2 会把常量提前\NOr an operator, applied to e1, any expression e1 and a constant e2, is going to move the constant forward.
Dialogue: 0,0:16:24.16,0:16:27.96,Default,,0,0,0,,这就变成了操作e2 e1\NSo that'll turn into the operator with e2 followed by e1.
Dialogue: 0,0:16:27.96,0:16:30.30,Default,,0,0,0,,为什么我要做这个呢？我不知道\NWhy I did that, I don't know.
Dialogue: 0,0:16:30.30,0:16:33.53,Default,,0,0,0,,比如我有除法它不会工作\NIt wouldn't work if I had division, for example.
Dialogue: 0,0:16:33.53,0:16:35.70,Default,,0,0,0,,所以这个规则中有个bug\NSo there's a bug in the rules, if you like.
Dialogue: 0,0:16:35.70,0:16:41.30,Default,,0,0,0,,所以0+e等于e\NSo the sum of 0 and e is e.
Dialogue: 0,0:16:41.73,0:16:45.70,Default,,0,0,0,,1乘以任何表达式e的结果是e\NThe product of 1 and any expression e is e.
Dialogue: 0,0:16:45.70,0:16:49.33,Default,,0,0,0,,0乘以任何表达式的结果是0\NThe product of 0 and any expression e is 0.
Dialogue: 0,0:16:49.33,0:16:53.10,Default,,0,0,0,,再看看这些规则，我们可以任意的组合他们\NJust looking at some more of these rules, we could have arbitrarily complicated ones.
Dialogue: 0,0:16:53.10,0:17:06.43,Default,,0,0,0,,我们可以把常量e1乘以常量e2和任意的e3\NWe could have things like the product of the constant e1 and any constant e2 with e3 is the result of multiplying the result of--
Dialogue: 0,0:17:06.43,0:17:12.33,Default,,0,0,0,,结果是把常量e1和e2乘起来跟e3放在一起\Nmultiplying now the constants e1 and e2 together and putting e3 there.
Dialogue: 0,0:17:13.03,0:17:23.03,Default,,0,0,0,,组合常量 如果一个过程要把e1,e2,e3乘起来 e1,e2都是常量 那么就把他们(e1 e2)乘起来\NSo it says combine the constants that I had, which was if I had a product of e1 and e2 and e3 just multiply--I mean and e1 and e2 are both constants, multiply them.
Dialogue: 0,0:17:23.03,0:17:25.63,Default,,0,0,0,,你可以根据你的习惯来构建这些规则\NAnd you can make up the rules as you like.
Dialogue: 0,0:17:25.63,0:17:27.33,Default,,0,0,0,,这里还有很多规则\NThere are lots of them here.
Dialogue: 0,0:17:27.33,0:17:31.26,Default,,0,0,0,,这些事情是复杂的 比如--\NThere are things as complicated, for example, as--
Dialogue: 0,0:17:31.26,0:17:33.93,Default,,0,0,0,,我想在这里有分配率 大家看\Noh, I suppose down here some distributive law, you see.
Dialogue: 0,0:17:33.93,0:17:44.33,Default,,0,0,0,,任何对象c乘以d和e等于c乘以d加上c和e\NThe product of any object c and the sum of d and e gives the result as the same as the sum of the product of c and d and the product of c and e.
Dialogue: 0,0:17:44.33,0:17:49.03,Default,,0,0,0,,这些规则对我没有太大吸引力\NNow, what exactly these rules are doesn't very much interest me.
Dialogue: 0,0:17:49.03,0:18:00.70,Default,,0,0,0,,我们要构建的语言将允许我们解释这些规则 这样我们可以构建我们想要的规则编写另外的语言\NWe're going to be writing the language that will allow us to interpret these rules so that\Nwe can, in fact, make up whatever rules we like, another whole language of programming.
Dialogue: 0,0:18:02.73,0:18:04.80,Default,,0,0,0,,我们来看\NWell, let's see.
Dialogue: 0,0:18:04.80,0:18:07.30,Default,,0,0,0,,我没有告诉你我们要如何做\NI haven't told you how we're going to do this.
Dialogue: 0,0:18:07.30,0:18:10.50,Default,,0,0,0,,当然我们还要在这个上面工作一阵子  #TBD\NAnd, of course, for a while, we're going to work on that.
Dialogue: 0,0:18:10.50,0:18:15.86,Default,,0,0,0,,但真正的问题是:在这么大的范围下我需要做什么\NBut there's a real question of what is--what am I going to do at all at a large scale?
Dialogue: 0,0:18:16.40,0:18:18.56,Default,,0,0,0,,如何让这些规则生效？\NHow do these rules work?
Dialogue: 0,0:18:18.56,0:18:26.00,Default,,0,0,0,,化简程序如何处理这些规则来为你输入的表达式产生一个合理的答案？\NHow is the simplifier program going to manipulate these rules with your expression to\Nproduce a reasonable answer?
Dialogue: 0,0:18:26.00,0:18:30.33,Default,,0,0,0,,首先需要考虑一下用这些规则作为他们的一个甲板#TBD 它们指的是什么\NWell, first, I'd like to think about these rules as being some sort of deck of them.
Dialogue: 0,0:18:31.90,0:18:34.73,Default,,0,0,0,,这里有全部的规则\NSo here I have a whole bunch of rules, right?
Dialogue: 0,0:18:41.63,0:18:44.90,Default,,0,0,0,,这里的每一个规则 ---\NEach rule-- here's a rule--
Dialogue: 0,0:18:46.46,0:18:49.53,Default,,0,0,0,,都有一个模式和一个框架\Nhas a pattern and a skeleton.
Dialogue: 0,0:18:49.53,0:18:51.83,Default,,0,0,0,,我正在努力为它作一个控制结构\NI'm trying to make up a control structure for this.
Dialogue: 0,0:18:52.93,0:19:04.26,Default,,0,0,0,,我有一个匹配器 一个生成器\NNow, what I have is a matcher, and I have something which is an instantiater.
Dialogue: 0,0:19:09.13,0:19:17.90,Default,,0,0,0,,我将把模式变量从匹配器中传递到生成器中\NAnd I'm going to pass from the matcher to the instantiater some set of meaning for the pattern variables,
Dialogue: 0,0:19:17.90,0:19:19.90,Default,,0,0,0,,我把它叫做一个字典\Na dictionary, I'll call it.
Dialogue: 0,0:19:20.23,0:19:31.76,Default,,0,0,0,,一个字典 x匹配一个子表达式 y匹配了另一个子表达式\NA dictionary, which will say x was matched against the following subexpression and y was matched against another following subexpression.
Dialogue: 0,0:19:31.76,0:19:36.76,Default,,0,0,0,,并且生成器生成的表达式将放进匹配器中\NAnd from the instantiater, I will be making expressions,and they will go into the matcher.
Dialogue: 0,0:19:36.76,0:19:38.80,Default,,0,0,0,,他们都是表达式\NThey will be expressions.
Dialogue: 0,0:19:44.50,0:19:48.76,Default,,0,0,0,,这些规则的模式将要送进匹配器中\NAnd the patterns of the rules will be fed into the matcher,
Dialogue: 0,0:19:48.76,0:19:54.96,Default,,0,0,0,,这些规则的框架将要送进生成器中\Nand the skeletons from the same rule will be fed into the instantiater.
Dialogue: 0,0:19:54.96,0:20:03.93,Default,,0,0,0,,这里有一点复杂 因为还有代数表达式规则需要做等价替换\NNow, this is a little complicated because when you have something like an algebraic expression, where  something --the rules are intended to be able to allow you to substitute equal for equal.
Dialogue: 0,0:20:03.93,0:20:05.93,Default,,0,0,0,,这些是等价替换规则\NThese are equal transformation rules.
Dialogue: 0,0:20:06.33,0:20:09.93,Default,,0,0,0,,所以所有的表达式的子表达式应该要好好看一下\NSo all subexpressions of the expression should be looked at.
Dialogue: 0,0:20:09.93,0:20:15.96,Default,,0,0,0,,给它一个表达式, 这个,这些规则应该是可以循环的.\NYou give it an expression, this thing, and the rules should be cycled around.
Dialogue: 0,0:20:15.96,0:20:23.20,Default,,0,0,0,,首先 对于传入的表达式的子表达式 所有的规则都需要遍历一次\NFirst of all, for every subexpression of the expression you feed in, all\Nof the rules must be tried and looked at.
Dialogue: 0,0:20:23.20,0:20:27.30,Default,,0,0,0,,并且如果有规则匹配了那么这个过程就会执行\NAnd if any rule matches, then this process occurs.
Dialogue: 0,0:20:27.30,0:20:30.63,Default,,0,0,0,,字典中生成一些值\NThe dictionary--the dictionary is to have some values in it.
Dialogue: 0,0:20:30.63,0:20:39.60,Default,,0,0,0,,生成器产生一个新的表达式 它将替换表达式的那个匹配了你原始表达式的部份\NThe instantiater makes a new expression, which is basically replaces that part of the expression that was matched in your original expression.
Dialogue: 0,0:20:40.33,0:20:48.36,Default,,0,0,0,,然后 我们要对它进行重新监测 重新遍历这些规则 看看它是否可以进行化简\NAnd then, then, of course, we're going to recheck that, going to go around these rules again, seeing if that could be simplified further.
Dialogue: 0,0:20:49.03,0:20:54.16,Default,,0,0,0,,然后每一个子表达式都要做这些监测直到没有任何变化为止\NAnd then, then we're going to do that for every subexpression until the thing\Nno longer changes.
Dialogue: 0,0:20:54.56,0:20:57.83,Default,,0,0,0,,大家可以把它想像成一个原始过程\NYou can think of this as sort of an organic process.
Dialogue: 0,0:20:57.83,0:20:59.83,Default,,0,0,0,,大家有一些炖汤\NYou've got some sort of stew, right?
Dialogue: 0,0:20:59.83,0:21:04.66,Default,,0,0,0,,里面有酵母之类的东西\NYou've got bacteria or something, or enzymes in some,in some gooey mess.
Dialogue: 0,0:21:04.66,0:21:10.50,Default,,0,0,0,,这些酵母改变了汤\NAnd there's these--and these enzymes change things.
Dialogue: 0,0:21:10.50,0:21:14.76,Default,,0,0,0,,他们附着在你的表达式上 改变了它然后他们就走了\NThey attach to your expression, change it, and then they go away.
Dialogue: 0,0:21:14.76,0:21:17.83,Default,,0,0,0,,然后他们需要匹配 这是锁key现象#TBD key-in-lock\NAnd they have to match.The key-in-lock phenomenon.
Dialogue: 0,0:21:17.83,0:21:19.73,Default,,0,0,0,,他们匹配 改变它 然后离开\NThey match, they change it, they go away.
Dialogue: 0,0:21:19.73,0:21:22.03,Default,,0,0,0,,大家可以想像成一种并行过程\NYou can imagine it as a parallel process of some sort.
Dialogue: 0,0:21:22.03,0:21:28.36,Default,,0,0,0,,所以你把一个表达式插入到这个混乱(规则)中 过了一会儿把它拿出来 它被简化了\NSo you stick an expression into this mess, and after a while, you take it out, and it's been simplified.
Dialogue: 0,0:21:29.20,0:21:33.03,Default,,0,0,0,,它会一直变化,直达不能再变化为止\NAnd it just keeps changing until it no longer can be changed.
Dialogue: 0,0:21:33.03,0:21:38.83,Default,,0,0,0,,酵母可以依附在表达式的任何部份\NBut these enzymes can attach to any part of the, of the expression.
Dialogue: 0,0:21:38.83,0:21:44.33,Default,,0,0,0,,好的 先到这里 我停一下回答大家提问\NOK, at this point, I'd like to stop and ask for questions.
Dialogue: 0,0:21:44.33,0:21:45.43,Default,,0,0,0,,恩\NYes.
Dialogue: 0,0:21:45.43,0:21:52.76,Default,,0,0,0,,学生:匹配的程序跟生成器程序是独立分开的两个程序,是么?\NAUDIENCE: This implies that the matching program and the instantiation program\Nare separate programs; is that right? Or is that-- they are.
Dialogue: 0,0:21:52.76,0:21:54.00,Default,,0,0,0,,老师:他们被拆分成很多小片\NPROFESSOR: They're separate little pieces.
Dialogue: 0,0:21:54.00,0:21:56.60,Default,,0,0,0,,(然后)他们组装成一个大的结构\NThey fit together in a larger structure.
Dialogue: 0,0:21:56.86,0:22:07.03,Default,,0,0,0,,学生:所以 我要通过匹配把匹配结果传递给生成器 由它来做改变\NAUDIENCE: So I'm going through and matching and passing the information about what I matched to an instantiater,which makes the changes.\N然后,把结果返回给匹配器?\NAnd then I pass that back to the matcher?
Dialogue: 0,0:22:07.03,0:22:18.63,Default,,0,0,0,,老师:生成器不会改变表达式 它将产生一个新的表达式 用匹配左边表达式的模式变量替换\NPROFESSOR: It won't make a change.It will make a new expression, which has, which has substituted the values of the pattern variable that were matched on the left-hand side for the variables that are mentioned,
Dialogue: 0,0:22:18.63,0:22:24.23,Default,,0,0,0,,在右边的框架变量或者求值变量或者随便我们如何叫它\Nthe skeleton variables or evaluation variables or whatever I called them, on the right-hand side.
Dialogue: 0,0:22:24.76,0:22:27.30,Default,,0,0,0,,学生:然后它要回传给匹配器么?\NAUDIENCE: And then that's passed back into the matcher?
Dialogue: 0,0:22:27.30,0:22:32.63,Default,,0,0,0,,老师:然后这个要再一次循环 它将一直这样循环直到不再变化\NPROFESSOR: Then this is going to go around again. This is going to go through this mess until it no longer changes.
Dialogue: 0,0:22:32.86,0:22:37.26,Default,,0,0,0,,学生:感觉一直在做递归循环有点危险\NAUDIENCE: And it seems that there would be a danger of getting into a recursive loop.
Dialogue: 0,0:22:37.26,0:22:42.00,Default,,0,0,0,,老师:的确如果你写的规则不好 你发明的任何语言如果它有足够的能力做任何事情 你就可能写出无限循环的程序\NYes, if you do not write your rules nicely, you are-- indeed,
Dialogue: 0,0:22:42.00,0:22:48.86,Default,,0,0,0,,in any programming language you invent, if it's sufficiently powerful to do anything, you can write programs that will go into infinite loops.
Dialogue: 0,0:22:48.86,0:22:55.83,Default,,0,0,0,,代数处理的过程需要产生无限循环\NAnd indeed, writing a program for doing algebraic manipulation for long will produce infinite loops.
Dialogue: 0,0:23:00.16,0:23:01.70,Default,,0,0,0,,老师:还有么?\NGo ahead.
Dialogue: 0,0:23:01.70,0:23:12.03,Default,,0,0,0,,学生:一些语言的设计者觉得这个特性非常重要 以至于它应该是语言的一部分 比如scheme\NAUDIENCE: Some language designers feel that this feature is so important that it should become part of the basic language, for example, scheme in this case.
Dialogue: 0,0:23:12.03,0:23:13.96,Default,,0,0,0,,你认为的是--\NWhat are your thoughts on--
Dialogue: 0,0:23:13.96,0:23:15.53,Default,,0,0,0,,老师:什么语言特性?\NPROFESSOR: Which language feature?
Dialogue: 0,0:23:15.53,0:23:17.26,Default,,0,0,0,,学生:对匹配  #TBD\NAUDIENCE: The pairs matching.
Dialogue: 0,0:23:17.26,0:23:22.03,Default,,0,0,0,,所有应用的这些规则应该 ---\NIt's all application of such rules should be--
Dialogue: 0,0:23:22.03,0:23:23.70,Default,,0,0,0,,老师:你说像Prolog一样?\NPROFESSOR: Oh, you mean like Prolog?
Dialogue: 0,0:23:23.70,0:23:26.60,Default,,0,0,0,,学生:类似Prolog 是更加通用的 ----\NAUDIENCE: Like Prolog, but it becomes a more general--
Dialogue: 0,0:23:26.60,0:23:28.30,Default,,0,0,0,,老师:这是可行的\NPROFESSOR: It's possible.
Dialogue: 0,0:23:28.30,0:23:37.10,Default,,0,0,0,,我觉得我可以教你在不依赖某种语言的设计的情况下如何做\NOK, I think my feeling about that is that I would like to teach you how to do it so you don't depend upon some language designer.
Dialogue: 0,0:23:40.40,0:23:43.16,Default,,0,0,0,,老师:你自己做. #TBD\NPROFESSOR: You make it yourself. You can roll your own.
Dialogue: 0,0:23:44.76,0:23:45.63,Default,,0,0,0,,谢谢\NThank you.
Dialogue: 0,0:23:45.63,0:24:13.50,Default,,0,0,0,,
Dialogue: 0,0:24:13.50,0:24:15.80,Default,,0,0,0,,好的 我们看这里\NWell, let's see.
Dialogue: 0,0:24:15.80,0:24:17.80,Default,,0,0,0,,现在我要告诉大家它是如何工作的\NNow we have to tell you how it works.
Dialogue: 0,0:24:19.43,0:24:24.66,Default,,0,0,0,,它很容易分成很多小份\NIt conveniently breaks up into various pieces.
Dialogue: 0,0:24:24.66,0:24:26.66,Default,,0,0,0,,我想现在看一下匹配器\NI'd like to look now at the matcher.
Dialogue: 0,0:24:28.33,0:24:31.93,Default,,0,0,0,,匹配器有下面这个基本的结构\NThe matcher has the following basic structure.
Dialogue: 0,0:24:32.50,0:24:54.63,Default,,0,0,0,,它是一个盒子 它把输入--一个表达式和一个模式 转化成一个字典输出\NIt's a box that takes as its input an expression and a pattern, and it turns out a dictionary.
Dialogue: 0,0:25:01.26,0:25:08.90,Default,,0,0,0,,要记住一个字典是模式变量和找到的匹配的一个映射\NA dictionary, remember, is a mapping of pattern variables to the values that were found by matching,
Dialogue: 0,0:25:08.90,0:25:25.76,Default,,0,0,0,,然后它输出另外一个字典 这个字典是询问原有字典在这个模式下匹配这个表达式的结果\Nand it puts out another dictionary, which is the result of augmenting this dictionary by what was found in matching this expression against this pattern.
Dialogue: 0,0:25:27.30,0:25:29.26,Default,,0,0,0,,这就是匹配器\NSo that's the matcher.
Dialogue: 0,0:25:33.46,0:25:42.66,Default,,0,0,0,,这是一个非常复杂的程序 我们看最上面的部分\NNow, this is a rather complicated program, and we can look at it on the overhead over here and see, ha, ha,
Dialogue: 0,0:25:42.66,0:25:44.16,Default,,0,0,0,,它非常复杂\Nit's very complicated.
Dialogue: 0,0:25:44.16,0:25:46.46,Default,,0,0,0,,我只想让大家看一下它的轮廓\NI just want you to look at the shape of it.
Dialogue: 0,0:25:46.46,0:25:50.56,Default,,0,0,0,,看它的每一个小部份那就太复杂了\NIt's too complicated to look at except in pieces.
Dialogue: 0,0:25:51.30,0:25:59.66,Default,,0,0,0,,然而 它是一个宏大复杂的程序 它有很多这样的缩进的结构\NHowever, it's a fairly large, complicated program with a lot of sort of indented structure.
Dialogue: 0,0:25:59.66,0:26:05.43,Default,,0,0,0,,在最外层 ---大家不需要读这些代码  但是在这个层\NAt the largest scale-- you don't try to read those characters, but at the largest scale,
Dialogue: 0,0:26:05.43,0:26:11.03,Default,,0,0,0,,这里有一个case分析 就是这些case\Nyou see that there is a case analysis, which is all these cases lined up.
Dialogue: 0,0:26:11.70,0:26:19.26,Default,,0,0,0,,我们现在要做的事情是多看一些细节 试图理解它是如何工作的\NWhat we're now going to do is look at this in a bit more detail, attempting to understand\Nhow it works.
Dialogue: 0,0:26:19.26,0:26:28.26,Default,,0,0,0,,我们看第一个幻灯片 它展示了匹配器在一个大范围内的一些结构\NLet's go now to the first slide, showing some of the structure of the matcher at a large scale.
Dialogue: 0,0:26:28.50,0:26:36.80,Default,,0,0,0,,我们看到这个匹配器 它需要一个模式 一个表达式 一个字典作为它的输入(参数)\NAnd we see that the matcher, the matcher takes as its input a pattern, an expression, and a dictionary.
Dialogue: 0,0:26:38.26,0:26:46.16,Default,,0,0,0,,在这里有个case分支 它有许多的case 其中的一些写在了这里\NAnd there is a case analysis here, which is made out of several cases, some of which have been left out over here,
Dialogue: 0,0:26:46.16,0:26:49.23,Default,,0,0,0,,这是通用的case 这个是我想要大家看的\Nand the general case, which I'd like you to see.
Dialogue: 0,0:26:50.13,0:26:53.63,Default,,0,0,0,,我们考虑这个通用的case 它是一个非常重要的模式\NLet's consider this general case.It's a very important pattern.
Dialogue: 0,0:26:55.93,0:27:02.13,Default,,0,0,0,,问题是我们需要同时的检查这两棵树\NThe problem is that we have to examine two trees simultaneously.
Dialogue: 0,0:27:02.50,0:27:08.03,Default,,0,0,0,,一棵树是表达式 另一棵树是模式\NOne of the trees is the tree of the expression, and the other is the tree of the pattern.
Dialogue: 0,0:27:08.03,0:27:16.93,Default,,0,0,0,,我们需要对它们的每一个进行比较保证每个表达式的子表达式都匹配子表达式模式\NWe have to compare them with each other so that the subexpressions of the expression are matched against subexpressions of the pattern.
Dialogue: 0,0:27:17.86,0:27:42.33,Default,,0,0,0,,多看一点细节 假设我有一个模式 它是用来对x和y的乘积加上y\NLooking at that in a bit more detail, suppose I had a pattern, a pattern, which was the sum of the product of a thing which we will call x and a thing which we will call y,and the sum of that, and the same thing we call y.
Dialogue: 0,0:27:44.36,0:27:55.26,Default,,0,0,0,,所以我们找这两个乘积的和 --- 乘积的第二个参数和求和的第二个参数一样\NSo we're looking for a sum of a product whose second--whose second argument is the same as the second argument of the sum.
Dialogue: 0,0:27:56.46,0:27:59.43,Default,,0,0,0,,这可能就是大家找的东西\NThat's a thing you might be looking for.
Dialogue: 0,0:27:59.43,0:28:02.33,Default,,0,0,0,,它作为一个模式看起来像这个样子\NWell, that, as a pattern, looks like this.
Dialogue: 0,0:28:02.73,0:28:27.13,Default,,0,0,0,,这里有一个树 它包含一个和 一个乘积 用一个模式变量判断x和y 另一个模式变量判断y (这两个y)是同一个 仅仅是用不同的方式写下列表结构\NThere is a tree, which consists of a sum, and a product with a pattern variable question mark x and question mark y, the other pattern variable, and question mark y, just looking at the same, just writing down the list structure in a different way.
Dialogue: 0,0:28:28.33,0:28:40.83,Default,,0,0,0,,现在假设我们正在匹配一个表达式 这个表达式匹配(+ (* 3 x) x)\NNow, suppose we were matching that against an expression which matches it, the sum of, say, the product of 3 and x and, say, x.
Dialogue: 0,0:28:41.76,0:28:43.90,Default,,0,0,0,,这是另一个树\NThat's another tree.
Dialogue: 0,0:28:43.90,0:28:56.40,Default,,0,0,0,,它是3乘以x加上x的和\NIt's the sum of the product of 3 and x and of x.
Dialogue: 0,0:28:58.86,0:29:03.43,Default,,0,0,0,,所以我要做的事情是同时遍历这两棵树\NSo what I want to do is traverse these two trees simultaneously.
Dialogue: 0,0:29:03.43,0:29:08.43,Default,,0,0,0,,我想要这样遍历他们\NAnd what I'd like to do is walk them like this.
Dialogue: 0,0:29:08.43,0:29:12.96,Default,,0,0,0,,我会问它们是否一样?\NI'm going to say are these the same?
Dialogue: 0,0:29:12.96,0:29:14.80,Default,,0,0,0,,这是一个复合对象\NThis is a complicated object.
Dialogue: 0,0:29:14.80,0:29:17.26,Default,,0,0,0,,我们先看它的左分支\NLet's look at the left branches.
Dialogue: 0,0:29:17.26,0:29:18.56,Default,,0,0,0,,恩 这应该是car\NWell, that could be the car.
Dialogue: 0,0:29:18.56,0:29:21.46,Default,,0,0,0,,它看起来如何?这个一个加号匹配了\NHow does that look? Oh yes, the plus looks just fine.
Dialogue: 0,0:29:21.46,0:29:24.20,Default,,0,0,0,,但是这里的下一个东西是复合的\NBut the next thing here is a complicated thing.
Dialogue: 0,0:29:24.20,0:29:25.10,Default,,0,0,0,,我们看一下它\NLet's look at that.
Dialogue: 0,0:29:25.10,0:29:26.80,Default,,0,0,0,,它也很好\NOh yes, that's pretty fine, too.
Dialogue: 0,0:29:26.80,0:29:28.26,Default,,0,0,0,,他们都是星号\NThey're both asterisks.
Dialogue: 0,0:29:28.26,0:29:30.40,Default,,0,0,0,,哦!\NNow, whoops!
Dialogue: 0,0:29:30.40,0:29:33.60,Default,,0,0,0,,我的模式变量匹配了3\NMy pattern variable, it matches against the 3.
Dialogue: 0,0:29:33.96,0:29:36.36,Default,,0,0,0,,记住x现在是3了\NRemember, x equals 3 now.
Dialogue: 0,0:29:36.36,0:29:41.30,Default,,0,0,0,,在我的字典里 这个字典一直伴随着我(在这个遍历过程中)x等于3\NThat's in my dictionary, and the dictionary's going to follow along with me: x equals three.
Dialogue: 0,0:29:41.30,0:29:46.30,Default,,0,0,0,,x等于3 y等于x 两个x不同\NAh yes, x equals 3 and y equals x, different x.
Dialogue: 0,0:29:46.30,0:29:51.46,Default,,0,0,0,,模式x是----表达式x被模式y匹配\NThe pattern x is the expression x, the pattern y.
Dialogue: 0,0:29:53.23,0:29:58.06,Default,,0,0,0,,模式变量y 它已经有值了 它是x\NOh yes, the pattern variable y, I've already got a value for it. It's x.
Dialogue: 0,0:29:58.06,0:30:00.06,Default,,0,0,0,,它是x么? 当然\NIs this an x? Oh yeah, sure it is.
Dialogue: 0,0:30:00.06,0:30:01.40,Default,,0,0,0,,好的\NThat's fine.
Dialogue: 0,0:30:01.40,0:30:03.26,Default,,0,0,0,,耶 遍历完成了\NYep, done.
Dialogue: 0,0:30:03.26,0:30:08.56,Default,,0,0,0,,现在有一个字典 它在遍历过程中不断积累\NI now have a dictionary, which I've accumulated by making this walk.
Dialogue: 0,0:30:11.00,0:30:15.13,Default,,0,0,0,,现在让我们看看这个一般情况 然后看看它如何工作\NWell, now let's look at this general case here and see how that works.
Dialogue: 0,0:30:15.13,0:30:16.96,Default,,0,0,0,,这里..\NHere we have it.
Dialogue: 0,0:30:16.96,0:30:22.06,Default,,0,0,0,,我传入一个模式变量 -- 一个模式 一个表达式 一个字典.\NI take in a pattern variable --  a pattern, an expression, and a dictionary.
Dialogue: 0,0:30:22.06,0:30:27.96,Default,,0,0,0,,这里的情况比较复杂 -- 它是通用情况\NAnd now I'm going to do a complicated thing here, which is the general case.
Dialogue: 0,0:30:29.46,0:30:35.23,Default,,0,0,0,,这个表达式由两部份组成: 左部份和右部份 一般来说\NThe expression is made out of two parts: a left and a right half, in general.
Dialogue: 0,0:30:35.23,0:30:39.63,Default,,0,0,0,,在Lisp系统中 任何组合都是由两部份组成的\NAnything that's complicated is made out of two pieces in a Lisp system.
Dialogue: 0,0:30:39.63,0:30:41.66,Default,,0,0,0,,现在我们有什么呢?\NWell, now what do we have here?
Dialogue: 0,0:30:41.66,0:30:49.20,Default,,0,0,0,,我将匹配两个表达式中的car--伴随着我已经有的这个字典\NI'm going to match the car's of the two expressions against each other with respect to the dictionary I already have,
Dialogue: 0,0:30:49.86,0:30:57.73,Default,,0,0,0,,匹配生成的字典作为值来来匹配他们的cdr\Nproducing a dictionary as its value, which I will then use for matching the cdr's against each other.
Dialogue: 0,0:30:58.13,0:31:02.53,Default,,0,0,0,,这个就是字典的遍历 穿过了整个结构\NSo that's how the dictionary travels, threads the entire structure.
Dialogue: 0,0:31:03.13,0:31:12.83,Default,,0,0,0,,然后 匹配了car和cdr的字典将作为值返回\NAnd then the result of that is the dictionary for the match of the car and the cdr, and that's what's going to be returned as a value.
Dialogue: 0,0:31:13.06,0:31:16.26,Default,,0,0,0,,在任意一个地方 匹配都可能失败\NNow, at any point, a match might fail.
Dialogue: 0,0:31:16.26,0:31:27.76,Default,,0,0,0,,可能是这种情况 比如 如果我回过头看这个没有匹配上的表达式 像是这里A是4\NIt may be the case, for example, if we go back and look at an expression that doesn't quite match, like supposing this was a 4.
Dialogue: 0,0:31:28.26,0:31:34.93,Default,,0,0,0,,现在这两个不再匹配了 因为x应该 --\NWell, now these two don't match any more, because the x that had to be  --
Dialogue: 0,0:31:34.93,0:31:40.53,Default,,0,0,0,,对不起 这里y应该是x 并且这个y应该是4\Nsorry, the y that had to be x here and this y has to be 4.
Dialogue: 0,0:31:40.53,0:31:43.80,Default,,0,0,0,,但是x和4在语法上不是同一个对象\NBut x and 4 were not the same object syntactically.
Dialogue: 0,0:31:43.80,0:31:49.33,Default,,0,0,0,,所以这个不会匹配成功 它会拒绝 匹配会失败\NSo this wouldn't match, and that would be rejected sometimes, so matches may fail.
Dialogue: 0,0:31:49.90,0:31:58.43,Default,,0,0,0,,因为这个匹配带有一个字典 这个字典来自于之前的匹配 它可以传遍这个(匹配)失败\NNow, of course, because this matcher takes the dictionary from the previous match as input, it must be able to propagate the failures.
Dialogue: 0,0:31:58.43,0:32:01.50,Default,,0,0,0,,这就是第一个条件从句所做的事情\NAnd so that's what the first clause of this conditional does.
Dialogue: 0,0:32:03.33,0:32:08.50,Default,,0,0,0,,如果证实出来这个模式不是原子---\NIt's also true that if it turned out that the pattern was not atomic--
Dialogue: 0,0:32:08.50,0:32:11.76,Default,,0,0,0,,如果模式是原子 将进入这里 这里我们还没有看过\Nsee, if the pattern was atomic, I'd go into this stuff, which we haven't looked at yet.
Dialogue: 0,0:32:11.76,0:32:23.03,Default,,0,0,0,,如果模式不是原子 但表达式是原子 ---它不是一块块的组成的 -- 那么它就必需匹配失败 然后在这结束\NBut if the pattern is not atomic and the expression is atomic-- it's not made out of pieces-- then that must be a failure, and so we go over here.
Dialogue: 0,0:32:23.03,0:32:30.96,Default,,0,0,0,,如果这个模式不是原子 并且模式不是一个模式变量 ---我不得不提醒自己--我们到这里去\NIf the pattern is not atomic and the pattern is not a pattern variable--I have to remind myself of that-- then we go over here.
Dialogue: 0,0:32:30.96,0:32:32.96,Default,,0,0,0,,所以这种情况 失败有可能发生\NSo that way, failures may occur.
Dialogue: 0,0:32:34.96,0:32:39.46,Default,,0,0,0,,好 让我们看这个里面的东西\NOK, so now let's look at the insides of this thing.
Dialogue: 0,0:32:39.46,0:32:42.93,Default,,0,0,0,,第一个要看的是 原子的模式会发生什么?\NWell, the first place to look is what happens if I have an atomic pattern?
Dialogue: 0,0:32:42.93,0:32:43.90,Default,,0,0,0,,这个很简单\NThat's very simple.
Dialogue: 0,0:32:43.90,0:32:46.50,Default,,0,0,0,,模式不是由任何块组成的: foo--\NA pattern that's not made out of any pieces: foo.
Dialogue: 0,0:32:47.03,0:32:48.80,Default,,0,0,0,,这是一个非常好的原子模式\NThat's a nice atomic pattern.
Dialogue: 0,0:32:48.80,0:32:51.70,Default,,0,0,0,,这里我们看到的是:\NWell, here's what we see.
Dialogue: 0,0:32:51.70,0:32:56.63,Default,,0,0,0,,如果模式是原子的 那么表达式是原子的\NIf the pattern is atomic, then if the expression is atomic,
Dialogue: 0,0:32:56.63,0:33:02.43,Default,,0,0,0,,如果他们是同一个东西 那么字典就跟之前一样\Nthen if they are the same thing, then the dictionary I get is the same one as I had before.
Dialogue: 0,0:33:02.43,0:33:04.26,Default,,0,0,0,,没有变化\NNothing's changed.
Dialogue: 0,0:33:04.26,0:33:11.06,Default,,0,0,0,,它就是匹配了加号 星号 和x\NIt's just that I matched plus against plus, asterisk against asterisk, x against x.
Dialogue: 0,0:33:11.06,0:33:12.66,Default,,0,0,0,,好\NThat's all fine.
Dialogue: 0,0:33:12.66,0:33:23.90,Default,,0,0,0,,如果模式不是一个表达式 如果我有两个独立的原子对象 那么加号就会匹配星号 这样就失败了\NHowever, if the pattern is not the one which is the expression, if I have two separate atomic objects,then it was matching plus against asterisk, which case I fail.
Dialogue: 0,0:33:25.60,0:33:34.56,Default,,0,0,0,,或者如果模式是原子但表达式是复合的不是原子的 那么匹配失败\NOr if it turns out that the pattern is atomic but the expression is complicated, it's not atomic, then I get a failure.
Dialogue: 0,0:33:37.06,0:33:38.73,Default,,0,0,0,,这很简单\NThat's very simple.
Dialogue: 0,0:33:38.73,0:33:43.83,Default,,0,0,0,,现在这些模式变量变成什么样了?\NNow, what about the various kinds of pattern variables?
Dialogue: 0,0:33:43.83,0:33:45.33,Default,,0,0,0,,我们有三种情况\NWe had three kinds.
Dialogue: 0,0:33:45.33,0:33:46.93,Default,,0,0,0,,我给他们命名了\NI give them the names.
Dialogue: 0,0:33:46.93,0:33:52.60,Default,,0,0,0,,他们是: 任意的常量 任意的变量 任意的表达式\NThey're arbitrary constants, arbitrary variables, and arbitrary expressions.
Dialogue: 0,0:33:53.13,0:34:00.60,Default,,0,0,0,,? x 标识任意的表达式\NA question mark x is an arbitrary expression.
Dialogue: 0,0:34:00.60,0:34:04.73,Default,,0,0,0,,? cx 表示任意的常量\NA question mark cx is an arbitrary constant,
Dialogue: 0,0:34:04.73,0:34:07.70,Default,,0,0,0,,? vx 表示任意的变量\Nand a question mark vx is an arbitrary variable.
Dialogue: 0,0:34:08.46,0:34:10.30,Default,,0,0,0,,好的 我们要做什么呢?\NWell, what do we do here?
Dialogue: 0,0:34:10.30,0:34:17.40,Default,,0,0,0,,看这里如果我有一个任意的常量 如果模式是一个任意的常量\NLooking at this, we see that if I have an arbitrary constant, if the pattern is an arbitrary constant,
Dialogue: 0,0:34:17.40,0:34:21.16,Default,,0,0,0,,那么表达式最好是一个常量\Nthen it had better be the case that the expression had better be a constant.
Dialogue: 0,0:34:21.16,0:34:23.83,Default,,0,0,0,,如果表达式不是常量那么匹配失败\NIf the expression is not a constant, then that match fails.
Dialogue: 0,0:34:23.83,0:34:27.50,Default,,0,0,0,,如果是一个常量 那么需要扩展我的字典\NIf it is a constant, however, then I wish to extend the dictionary.
Dialogue: 0,0:34:27.50,0:34:38.23,Default,,0,0,0,,我要用这个模式扩展这个字典 这个模式用开始传入的老字典匹配这个表达式\NI wish to extend the dictionary with that pattern being remembered to be that expression using the old dictionary as a starting point.
Dialogue: 0,0:34:40.76,0:34:47.46,Default,,0,0,0,,因此其实 对于任意的变量我必须先检查表达式是一个匹配变量\NSo really, for arbitrary variables, I have to check first if the expression is a variable by matching against.
Dialogue: 0,0:34:47.46,0:34:57.23,Default,,0,0,0,,如果是它就扩展这个字典 这样这个模式可以记录下来为后续表达式匹配使用\NIf so, it's worth extending the dictionary so that the pattern is remembered to be matched against that expression,给一个原始的字典 它返回一个新的字典\Ngiven the original dictionary, and this makes a new dictionary.
Dialogue: 0,0:34:58.46,0:35:00.20,Default,,0,0,0,,现在它需要监测\NNow, it has to check.
Dialogue: 0,0:35:00.20,0:35:04.16,Default,,0,0,0,,在这个字典中也有很多失败---\NThere's a sorts of failure inside extend dictionary, which is that--
Dialogue: 0,0:35:04.16,0:35:07.66,Default,,0,0,0,,如果模式变量已经有一个值了\Nif one of these pattern variables already has a value
Dialogue: 0,0:35:08.83,0:35:18.66,Default,,0,0,0,,并且我正用它匹配一些我已经匹配过的不同的东西 那么立刻就失败了\Nand I'm trying to match the thing against something else which is not equivalent to the one that I've already matched it against once,then a failure will come flying out of here, too.
Dialogue: 0,0:35:19.86,0:35:21.86,Default,,0,0,0,,我们以后再看它\NAnd I will see that some time.
Dialogue: 0,0:35:22.40,0:35:32.96,Default,,0,0,0,,最终 任何已经匹配过的表达式不需要再检查语法 它已经在字典的扩展中了\NAnd finally, an expression does not have to check anything syntactic about the expression that's being matched, so all it does is it's an extension of the dictionary.
Dialogue: 0,0:35:34.20,0:35:38.90,Default,,0,0,0,,这就是一个完整的简单的匹配器\NSo you've just seen a complete, very simple matcher.
Dialogue: 0,0:35:38.90,0:35:45.46,Default,,0,0,0,,现在 一个非常值得注意的是 最近有人花很多钱来雇人做\NNow, one of the things that's rather remarkable about this is people pay an awful lot of money these days for someone to make a, quote,
Dialogue: 0,0:35:45.46,0:35:52.63,Default,,0,0,0,,"人工智能专家系统"  这个系统就只有像这样的一个匹配器和一个实例化器\NAI expert system that has nothing more in it than a matcher and maybe an instantiater like this.
Dialogue: 0,0:35:52.63,0:35:57.26,Default,,0,0,0,,很容易做的是:你可以创立一个初创公司\NBut it's very easy to do, and now, of course, you can start up a little start-up company
Dialogue: 0,0:35:57.26,0:36:02.06,Default,,0,0,0,,然后第二周找风投给你一百万美金\Nand make a couple of megabucks in the next week taking some people for a ride.
Dialogue: 0,0:36:02.06,0:36:08.86,Default,,0,0,0,,在20年前这个非常罕见的--这种程序\N20 years ago, this was remarkable, this kind of program.
Dialogue: 0,0:36:08.86,0:36:11.50,Default,,0,0,0,,但是现在它很容易\NBut now, this is sort of easy.
Dialogue: 0,0:36:11.50,0:36:13.23,Default,,0,0,0,,大一的学生也可以学\NYou can teach it to freshmen.
Dialogue: 0,0:36:13.23,0:36:16.13,Default,,0,0,0,,这里还有一个实例化器\NWell, now there's an instantiater as well.
Dialogue: 0,0:36:19.56,0:36:23.70,Default,,0,0,0,,问题是他们都去了 而且挣的钱比我还多\NThe problem is they're all going off and making more money than I do.
Dialogue: 0,0:36:24.63,0:36:27.00,Default,,0,0,0,,但这在大学中确实是真的\NBut that's always been true of universities.
Dialogue: 0,0:36:27.00,0:36:39.86,Default,,0,0,0,,实例化器的目的是制造一个表达式通过给定一个字典和一个框架\NAs expression, the purpose of the instantiater is to make expressions given a dictionary and a skeleton.
Dialogue: 0,0:36:43.60,0:36:46.43,Default,,0,0,0,,这个不是很难\NAnd that's not very hard at all.
Dialogue: 0,0:36:46.43,0:36:53.73,Default,,0,0,0,,我们在下一个和下下一个幻灯片中简单的看一下\NWe'll see that very simply in the next, the next slide here.
Dialogue: 0,0:36:53.73,0:36:59.60,Default,,0,0,0,,用一个特别的字典实例化一个框架--这个很简单\NTo instantiate a skeleton, given a particular dictionary-- oh, this is easy.
Dialogue: 0,0:36:59.60,0:37:03.70,Default,,0,0,0,,我们要对这个框架做递归树遍历\NWe're going to do a recursive tree walk over the skeleton.
Dialogue: 0,0:37:03.70,0:37:08.33,Default,,0,0,0,,所有的框架变量---我叫它框架的求值\NAnd for everything which is a skeleton variable-- I don't know, call it a skeleton evaluation.
Dialogue: 0,0:37:08.33,0:37:11.60,Default,,0,0,0,,这就是它的名字 这个是我给这个程序传入的抽象语法:\NThat's the name and the abstract syntax that I give it in this program:
Dialogue: 0,0:37:11.60,0:37:16.96,Default,,0,0,0,,一个框架求值 它开始于这些规则的冒号后面\Na skeleton evaluation, a thing beginning with a colon in the rules.
Dialogue: 0,0:37:17.56,0:37:24.30,Default,,0,0,0,,在那种情况下 我要在字典中找答案 我们需要用一点时间考虑这个\NFor anything of that case, I'm going to look up the answer in the dictionary, and we'll worry\Nabout that in a second.
Dialogue: 0,0:37:24.30,0:37:26.23,Default,,0,0,0,,我们看一下这个\NLet's look at this as a whole.




Dialogue: 0,0:37:27.36,0:37:32.10,Default,,0,0,0,,这里---我用一个字典实例化一个框架\NHere, I have-- I'm going to instantiate a skeleton, given a dictionary.
Dialogue: 0,0:37:32.10,0:37:40.06,Default,,0,0,0,,我在这里定义一个内部循环 它很简单\NWell, I'm going to define some internal loop right there, and it's going to do something very simple.
Dialogue: 0,0:37:40.06,0:37:44.06,Default,,0,0,0,,如果这个框架是很简单的 也是原子的\NEven if a skeleton--even if a skeleton is simple and atomic,
Dialogue: 0,0:37:44.23,0:37:50.93,Default,,0,0,0,,它直接返回一个框架作为结果\Nin which case it's nothing more than giving the skeleton back as an answer,
Dialogue: 0,0:37:50.93,0:37:59.40,Default,,0,0,0,,或者在一般情况下它是复杂的  我要构建一个表达式作为实例化的结果---\Nor in the general case, it's complicated, in which case I'm going to make up the expression which is the result of instantiating--
Dialogue: 0,0:37:59.40,0:38:04.40,Default,,0,0,0,,叫它循环递归 ---实例化框架的car和cdr.\Ncalling this loop recursively-- instantiating the car of the skeleton and the cdr.
Dialogue: 0,0:38:04.63,0:38:06.40,Default,,0,0,0,,这是递归树遍历\NSo here is a recursive tree walk.





Dialogue: 0,0:38:08.03,0:38:14.50,Default,,0,0,0,,如果是框架求值 --框架中的一个冒号表达式\NHowever, if it turns out to be a skeleton evaluation, a colon expression in the skeleton,
Dialogue: 0,0:38:14.50,0:38:22.73,Default,,0,0,0,,那么要做的事情是: 从字典中找冒号表达式--- #TBD 这里不通cadr\Nthen what I'm going to do is find the expression that's in the colon-- the CADR in this case.
Dialogue: 0,0:38:22.73,0:38:26.73,Default,,0,0,0,,这是一些抽象语法 我能改变这些规则的表示\NIt's a piece of abstract syntax here, so I can change my representation of rules.
Dialogue: 0,0:38:26.73,0:38:32.90,Default,,0,0,0,,不管求值什么含意 直接用这个字典进行求值\NI'm going to evaluate that relative to this dictionary, whatever evaluation means.
Dialogue: 0,0:38:32.90,0:38:34.73,Default,,0,0,0,,我们将要找到很多\NWe'll find out a lot about that sometime.
Dialogue: 0,0:38:35.86,0:38:38.90,Default,,0,0,0,,那就是我的答案\NAnd the result of that is my answer.
Dialogue: 0,0:38:39.40,0:38:44.06,Default,,0,0,0,, 这个初始化--循环要遍历整个框架\Nso. I start up this loop-- here's my initialization-- by calling it with the whole skeleton,
Dialogue: 0,0:38:44.06,0:38:47.50,Default,,0,0,0,,这将递归的分解成小块\Nand this will just do a recursive decomposition into pieces.
Dialogue: 0,0:38:49.43,0:38:56.86,Default,,0,0,0,,在求值里面发生了什么细节\NNow, one more little bit of detail is what happens inside evaluate?
Dialogue: 0,0:38:56.86,0:38:59.53,Default,,0,0,0,,我没有办法说的很详细\NI can't tell you that in great detail.
Dialogue: 0,0:38:59.53,0:39:01.56,Default,,0,0,0,,我大致说一下\NI'll tell you a little bit of it.
Dialogue: 0,0:39:01.56,0:39:04.33,Default,,0,0,0,,之后我们再看里面的更多细节\NLater, we're going to see--look into this in much more detail.
Dialogue: 0,0:39:05.03,0:39:11.26,Default,,0,0,0,,为了对这些表单进行求值  与字典相关的表达式\NTo evaluate some form, some expression with respect to a dictionary,
Dialogue: 0,0:39:11.63,0:39:14.73,Default,,0,0,0,,如果表达式是一个原子对象\Nif the expression is an atomic object, well,
Dialogue: 0,0:39:14.73,0:39:16.76,Default,,0,0,0,,就在字典中查找\NI'm going to go look it up.
Dialogue: 0,0:39:18.26,0:39:20.30,Default,,0,0,0,,这里没有什么有趣的东西\NNothing very exciting there.
Dialogue: 0,0:39:20.30,0:39:23.83,Default,,0,0,0,,否则 做一些复杂的事情\NOtherwise, I'm going to do something complicated here,
Dialogue: 0,0:39:23.83,0:39:31.93,Default,,0,0,0,,我要应用一个过程寻找操作符  整个过程我们将来再说\Nwhich is I'm going to apply a procedure which is the result of looking up the operator part in something that we're going to find out about someday.
Dialogue: 0,0:39:31.93,0:39:34.50,Default,,0,0,0,,我想让大家认识到大家正在看神奇的东西\NI want you realize you're seeing magic now.
Dialogue: 0,0:39:34.50,0:39:39.06,Default,,0,0,0,,这个魔法将会在不久变的清晰 但不是今天\NThis magic will become clear very soon, but not today.
Dialogue: 0,0:39:39.06,0:39:46.90,Default,,0,0,0,,然后在这个地点中找这些参数\NThen I'm looking at--looking up all the pieces, all the arguments to that in the dictionary.
Dialogue: 0,0:39:47.90,0:39:51.23,Default,,0,0,0,,我不想让大家看这些细节\NSo I don't want you to look at this in detail.
Dialogue: 0,0:39:51.23,0:39:57.16,Default,,0,0,0,,这里还有很多细节 我们以后再看\NI want you to say that there's more going on here, and we're going to see more about this.
Dialogue: 0,0:39:58.73,0:40:01.33,Default,,0,0,0,,魔术将要停止\NBut it's-- the magic is going to stop.
Dialogue: 0,0:40:02.16,0:40:07.36,Default,,0,0,0,,这部分需要利用Lisp \NThis part has to do with Lisp, and it's the end of that.
Dialogue: 0,0:40:09.86,0:40:14.00,Default,,0,0,0,,我们现在知道匹配和实例化\NOK, so now we know about matching and instantiation.
Dialogue: 0,0:40:14.76,0:40:17.23,Default,,0,0,0,,这一节大家有疑问么?\NAre there any questions for this segment?
Dialogue: 0,0:40:28.10,0:40:29.80,Default,,0,0,0,,学生: 我有一个问题\NAUDIENCE: I have a question.
Dialogue: 0,0:40:29.80,0:40:30.43,Default,,0,0,0,,老师:好的\NPROFESSOR: Yes.
Dialogue: 0,0:40:30.43,0:40:33.03,Default,,0,0,0,,学生:是否有可能调出以前的幻灯片\NAUDIENCE: Is it possible to bring up a previous slide?
Dialogue: 0,0:40:33.03,0:40:35.86,Default,,0,0,0,,是关于定义匹配模式的\NIt's about this define match pattern.
Dialogue: 0,0:40:35.86,0:40:40.76,Default,,0,0,0,,老师:好的 你想看定义匹配模式的全部的幻灯片\NPROFESSOR: Yes. You'd like to see the overall slide define match pattern.
Dialogue: 0,0:40:40.76,0:40:43.06,Default,,0,0,0,,有人可以把它   #TBD\NCan somebody put up the -- no, the overhead.
Dialogue: 0,0:40:43.06,0:40:45.16,Default,,0,0,0,,这是最大的规模\NThat's the biggest scale one.
Dialogue: 0,0:40:45.16,0:40:46.76,Default,,0,0,0,,你想看哪一部份\NWhat part would you like to see?
Dialogue: 0,0:40:46.76,0:40:49.96,Default,,0,0,0,,学生:最上面的\NAUDIENCE: Well, the top would be fine.
Dialogue: 0,0:40:49.96,0:40:54.03,Default,,0,0,0,,你匹配失败的任何一部份\NAny of the parts where you're passing failed.
Dialogue: 0,0:40:54.30,0:40:55.36,Default,,0,0,0,,老师:好\NPROFESSOR: Yes.
Dialogue: 0,0:40:55.36,0:40:59.33,Default,,0,0,0,,学生:基本的想法是把匹配的错误返回给字典 是么?\NAUDIENCE: The idea is to pass failed back to the dictionary; is that right?
Dialogue: 0,0:40:59.33,0:41:04.46,Default,,0,0,0,,老师:字典是匹配的答案\NPROFESSOR: The dictionary is the answer to a match, right?
Dialogue: 0,0:41:04.80,0:41:13.10,Default,,0,0,0,,或者它是一些匹配 或者就什么都没有\NAnd it is either some mapping or there's no match.
Dialogue: 0,0:41:13.10,0:41:14.33,Default,,0,0,0,,(失败的情况是)字典里没有任何匹配\NIt doesn't match.
Dialogue: 0,0:41:14.33,0:41:15.13,Default,,0,0,0,,学生:对\NAUDIENCE: Right.
Dialogue: 0,0:41:15.13,0:41:17.83,Default,,0,0,0,,老师:这里事实上\NPROFESSOR: So what you're seeing over here is, in fact,
Dialogue: 0,0:41:17.83,0:41:22.60,Default,,0,0,0,,因为一个匹配可能有子匹配传递了这个字典\Nbecause the fact that a match may have another match pass in the dictionary,
Dialogue: 0,0:41:22.60,0:41:24.96,Default,,0,0,0,,你可以在这里看到一般的情况\Nas you see in the general case down here.
Dialogue: 0,0:41:24.96,0:41:27.93,Default,,0,0,0,,这是一个匹配传递字典到另一个匹配的通用情况\NHere's the general case where a match passes another match to the dictionary.
Dialogue: 0,0:41:27.93,0:41:34.40,Default,,0,0,0,,当我匹配cdr的时候 我用匹配car的结果的字典来匹配cdr\NWhen I match the cdr's, I match them in the dictionary that is resulting from matching the car's.
Dialogue: 0,0:41:35.60,0:41:37.20,Default,,0,0,0,,这是我已经有的东西\NOK, that's what I have here.
Dialogue: 0,0:41:37.20,0:41:40.50,Default,,0,0,0,,所以如果匹配car失败了\NSo because of that, if the match of the car's fails,
Dialogue: 0,0:41:40.90,0:41:45.70,Default,,0,0,0,,有可能cdr的传播匹配失败\Nthen it may be necessary that the match of the cdr's propagates that failure,
Dialogue: 0,0:41:45.70,0:41:47.30,Default,,0,0,0,,这就是(代码的)第一行\Nand that's what the first line is.
Dialogue: 0,0:41:48.26,0:41:51.73,Default,,0,0,0,,学生:好的 我现在还不明白匹配 --\NAUDIENCE: OK, well, I'm still unclear what matches--
Dialogue: 0,0:41:51.73,0:41:54.73,Default,,0,0,0,,从匹配的实例出来的是什么?\Nwhat comes out of one instance of the match?
Dialogue: 0,0:41:54.73,0:41:56.23,Default,,0,0,0,,老师:两个可能中的一个\NPROFESSOR: One of two possibilities.
Dialogue: 0,0:41:56.23,0:41:59.53,Default,,0,0,0,,如果符号失败了 意味着没有匹配\NEither the symbol failed, which means there is no match.
Dialogue: 0,0:41:59.53,0:41:59.93,Default,,0,0,0,,学生:对\NAUDIENCE: Right.
Dialogue: 0,0:41:59.93,0:42:04.16,Default,,0,0,0,,老师:或者某种映射 现在这还是一个抽象的东西\NPROFESSOR: Or some mapping, which is an abstract thing right now,
Dialogue: 0,0:42:04.16,0:42:06.13,Default,,0,0,0,,你需要知道它的结构\Nand you should know about the structure of it,
Dialogue: 0,0:42:06.13,0:42:14.36,Default,,0,0,0,,它在匹配过程中把模式变量和他们的值关联起来\Nwhich relates the pattern variables to their values as picked up in the match.
Dialogue: 0,0:42:14.36,0:42:17.43,Default,,0,0,0,,学生:好 ---\NAUDIENCE: OK, so it is--
Dialogue: 0,0:42:17.43,0:42:18.80,Default,,0,0,0,,老师:它是由扩展字典构造出来的\NPROFESSOR: That's constructed by extend dictionary.
Dialogue: 0,0:42:18.80,0:42:28.86,Default,,0,0,0,,学生:所以根据递归性质 如果任何匹配如果失败了\NAUDIENCE: So the recursive nature brings about the fact that if ever a failed gets passed out of any calling of match,
Dialogue: 0,0:42:28.86,0:42:30.40,Default,,0,0,0,,那么第一个条件将获取它 -\Nthen the first condition will pick it up--
Dialogue: 0,0:42:30.40,0:42:33.56,Default,,0,0,0,,老师:并且传播它 不做任何其他处理\NPROFESSOR: And just propagate it along without any further ado, right.
Dialogue: 0,0:42:33.56,0:42:34.83,Default,,0,0,0,,学生:对\NAUDIENCE: Oh, right.
Dialogue: 0,0:42:34.83,0:42:37.76,Default,,0,0,0,,老师:这是从这里获得失败(结果)最快的方法\NPROFESSOR: That's just the fastest way to get that failure out of there.
Dialogue: 0,0:42:42.86,0:42:43.60,Default,,0,0,0,,对\NYes.
Dialogue: 0,0:42:43.60,0:42:47.43,Default,,0,0,0,,学生:如果这里没有失败那意味着我匹配了一个模式\NAUDIENCE: If I don't fail, that means that I've matched a pattern,
Dialogue: 0,0:42:47.43,0:42:53.33,Default,,0,0,0,,我会扩展字典并且传递表达式模式\Nand I run the procedure extend dict and then pass in the pattern in the expression.
Dialogue: 0,0:42:53.33,0:42:58.43,Default,,0,0,0,,但是替换不在这里对么:\NBut the substitution will not be made at that point; is that right?
Dialogue: 0,0:42:58.43,0:42:59.03,Default,,0,0,0,,我只是 --\NI'm just--
Dialogue: 0,0:42:59.03,0:42:59.46,Default,,0,0,0,,老师:对\NPROFESSOR: No, no.
Dialogue: 0,0:42:59.46,0:43:02.40,Default,,0,0,0,,这里没有替换因为这里还没有框架可以替换\NThere's no substitution being there because there's no skeleton to be substituted in.
Dialogue: 0,0:43:02.40,0:43:03.06,Default,,0,0,0,,学生:对\NAUDIENCE: Right.
Dialogue: 0,0:43:03.06,0:43:07.16,Default,,0,0,0,,老师:这里只更改一个字典用来为以后做替换用\NPROFESSOR: All you've got there is we're making up the dictionary for later substitution.
Dialogue: 0,0:43:07.93,0:43:12.53,Default,,0,0,0,,学生:字典应该是什么样子呢? 是有序的PAIR么\NAUDIENCE: And what would the dictionary look like? Is it ordered pairs?
Dialogue: 0,0:43:12.53,0:43:15.96,Default,,0,0,0,,老师:那个还没有告诉你\NPROFESSOR: That's--that's not told to you.
Dialogue: 0,0:43:15.96,0:43:17.06,Default,,0,0,0,,它还是一个抽象的东西\NWe're being abstract.
Dialogue: 0,0:43:17.06,0:43:17.56,Default,,0,0,0,,学生:哦\NAUDIENCE: OK.
Dialogue: 0,0:43:17.56,0:43:18.90,Default,,0,0,0,,老师:你为什么要知道呢?\NPROFESSOR: Why do you want to know?
Dialogue: 0,0:43:18.90,0:43:20.53,Default,,0,0,0,,它是一个函数\NWhat it is, it's a function.
Dialogue: 0,0:43:20.96,0:43:21.66,Default,,0,0,0,,仅仅是一个函数\NIt's a function.
Dialogue: 0,0:43:21.66,0:43:22.33,Default,,0,0,0,,学生:我想知道它的原因是--\NAUDIENCE: Well, the reason I want to know is--
Dialogue: 0,0:43:22.33,0:43:24.50,Default,,0,0,0,,有序的PAIRS集合抽象成了一个函数\NPROFESSOR: A function abstractly is a set of ordered pairs.
Dialogue: 0,0:43:24.90,0:43:28.83,Default,,0,0,0,,它可以用PAIR列表来实现\NIt could be implemented as a set of list pairs.
Dialogue: 0,0:43:29.06,0:43:32.43,Default,,0,0,0,,它也可以用其它的表机制来实现\NIt could be implemented as some fancy table mechanism.
Dialogue: 0,0:43:32.43,0:43:34.73,Default,,0,0,0,,它可以用一个函数来实现\NIt could be implemented as a function.
Dialogue: 0,0:43:35.26,0:43:37.60,Default,,0,0,0,,用某种方式 我可以把它构建成一个函数\NAnd somehow, I'm building up a function.
Dialogue: 0,0:43:38.60,0:43:40.43,Default,,0,0,0,,但是我还没有告诉你\NBut I'm not telling you.
Dialogue: 0,0:43:40.43,0:43:43.56,Default,,0,0,0,,这是George的事情 他来构建这个结构\NThat's up to George, who's going to build that later.
Dialogue: 0,0:43:49.00,0:43:52.36,Default,,0,0,0,,我知道你想把它具体写出来\NI know you really badly want to write concrete things.
Dialogue: 0,0:43:52.36,0:43:54.43,Default,,0,0,0,,我不打算让你那么做\NI'm not going to let you do that.
Dialogue: 0,0:43:54.43,0:44:02.43,Default,,0,0,0,,学生:恩 我再问最后一个问题 扩展到字典中的重要信息是什么? 我想可能是匹配发现的模式--\NAUDIENCE: Well, let me at least ask, what is the important information there that's being passed to extend dict? I want to pass the pattern I found--
Dialogue: 0,0:44:02.43,0:44:04.83,Default,,0,0,0,,老师:对 是表达式匹配的模式\NPROFESSOR: Yes. The pattern that's matched against the expression.
Dialogue: 0,0:44:04.83,0:44:09.30,Default,,0,0,0,,你想要这个模式 其实是想要这个模式的变量\NYou want to have the pattern, which happens to be in those cases pattern variables,right?
Dialogue: 0,0:44:09.30,0:44:13.20,Default,,0,0,0,,这三种扩展字典的情况都是模式变量\NAll of those three cases for extend dict are pattern variables.
Dialogue: 0,0:44:13.20,0:44:13.73,Default,,0,0,0,,学生:好\NAUDIENCE: Right.
Dialogue: 0,0:44:13.73,0:44:19.00,Default,,0,0,0,,老师:你有一个字典中的一个模式变量的值\NPROFESSOR: So you have a pattern variable that is to be given a value in a dictionary.
Dialogue: 0,0:44:19.00,0:44:22.50,Default,,0,0,0,,老师:这个值是匹配的表达式\NPROFESSOR: The value is the expression that it matched against.
Dialogue: 0,0:44:23.03,0:44:30.03,Default,,0,0,0,,字典就是遍历过程中记录下来的变量的集合\NThe dictionary is the set of things I've already figured out that I have memorized or learned.
Dialogue: 0,0:44:30.03,0:44:38.80,Default,,0,0,0,,用原有的字典扩展这个模式变量生成一个新字典\NAnd I am going to make a new dictionary, which is extended from the original one by having that pattern variable have a value with the new dictionary.
Dialogue: 0,0:44:39.60,0:44:43.73,Default,,0,0,0,,学生:我不理解为什么不能在右边匹配的过程中进行化简\NAUDIENCE: I guess what I don't understand is why can't the substitution be made right as soon as you find--
Dialogue: 0,0:44:43.73,0:44:46.96,Default,,0,0,0,,老师:我怎么知道如何化简呢?我还不知道框架的任何事情\NPROFESSOR: How do I know what I'm going to substitute? I don't know anything about this skeleton.
Dialogue: 0,0:44:46.96,0:44:49.66,Default,,0,0,0,,这个模式 这个匹配是一个独立的单元\NThis pattern, this matcher is an independent unit.
Dialogue: 0,0:44:49.66,0:44:51.00,Default,,0,0,0,,学生:哦 我明白了\NAUDIENCE: Oh, I see. OK.
Dialogue: 0,0:44:51.00,0:44:51.50,Default,,0,0,0,,老师:好\NPROFESSOR: Right?
Dialogue: 0,0:44:51.50,0:44:51.90,Default,,0,0,0,,学生:恩\NAUDIENCE: Yeah.
Dialogue: 0,0:44:51.90,0:44:57.23,Default,,0,0,0,,老师:我用这个匹配器进行匹配 如果匹配了就可以实例化\NPROFESSOR: I take the matcher. I apply the matcher. If it matches, then it was worth doing instantiation.
Dialogue: 0,0:44:58.20,0:44:59.50,Default,,0,0,0,,学生:好\NAUDIENCE: OK, good.
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,YEAH\NYeah.
Dialogue: 0,0:45:00.76,0:45:04.03,Default,,0,0,0,,学生:你可以再求解一次黑板上的例子么\NAUDIENCE: Can you just do that answer again using that example on the board?
Dialogue: 0,0:45:04.63,0:45:06.93,Default,,0,0,0,,什么返回给了匹配器\NYou know, what you just passed back to the matcher.
Dialogue: 0,0:45:06.93,0:45:08.26,Default,,0,0,0,,好\NPROFESSOR: Oh yes. OK, yes.
Dialogue: 0,0:45:08.26,0:45:10.16,Default,,0,0,0,,来看这个例子\NYou're looking at this example.
Dialogue: 0,0:45:10.13,0:45:15.90,Default,,0,0,0,,在这里当我遍历这个结构的时候 我得到了x\NAt this point when I'm traversing this structure, I get to here: x.
Dialogue: 0,0:45:15.90,0:45:20.86,Default,,0,0,0,,我有一个字典 假设它是空的 \NI have some dictionary,presumably an empty dictionary at this point if this is the whole expression.
Dialogue: 0,0:45:21.56,0:45:25.80,Default,,0,0,0,,所以我匹配到x是3\NSo I have an empty dictionary,and I've matched x against 3.
Dialogue: 0,0:45:26.26,0:45:31.76,Default,,0,0,0,,现在字典中存在x是3这个变量了\NSo now, after this point,the dictionary contains x is 3, OK?
Dialogue: 0,0:45:33.00,0:45:36.40,Default,,0,0,0,,现在我们继续遍历 我看到了y\NNow, I continue walking along here. I see y.
Dialogue: 0,0:45:36.40,0:45:39.60,Default,,0,0,0,,它是一个特殊的x 模式x\NNow, this is a particular x, a pattern x.
Dialogue: 0,0:45:39.60,0:45:41.60,Default,,0,0,0,,我看到y 模式y\NI see y, a pattern y.
Dialogue: 0,0:45:41.60,0:45:51.63,Default,,0,0,0,,字典说 模式y是符号x 因为这里已经匹配过了\NThe dictionary says, oh yes, the pattern y is the symbol x because I've gota match there.
Dialogue: 0,0:45:51.63,0:45:54.93,Default,,0,0,0,,所以字典现在保存了这两个实体\NSo the dictionary now contains at this point two entries.
Dialogue: 0,0:45:55.23,0:46:00.53,Default,,0,0,0,,模式x是3 模式y是x\NThe pattern x is 3, and the pattern y is the expression x.
Dialogue: 0,0:46:01.66,0:46:04.23,Default,,0,0,0,,现在继续进行遍历\NNow, I get that, I can walk along further.
Dialogue: 0,0:46:04.23,0:46:07.73,Default,,0,0,0,,这里模式y想要匹配成4\NI say, oh, pattern y also wants to be 4.
Dialogue: 0,0:46:07.73,0:46:11.06,Default,,0,0,0,,但是这个不可能 产生一个失败\NBut that isn't possible, producing a failure.
Dialogue: 0,0:46:13.73,0:46:16.36,Default,,0,0,0,,谢谢 我们休息一下\NThank you. Let's take a break.
Dialogue: 0,0:46:16.36,0:47:01.56,Default,,0,0,0,,
Dialogue: 0,0:47:01.56,0:47:06.66,Default,,0,0,0,,大家第一次正在看一个非常庞大而且复杂的程序\NOK, you're seeing your first very big and hairy program.
Dialogue: 0,0:47:06.66,0:47:13.46,Default,,0,0,0,,现在,当然, 这节的一个目标是让大家可以读懂这么庞大的程序, 完全不用害怕它.\NNow, of course, one of the goals of this subsegment is to get you to be able to read something like this and not be afraid of it.
Dialogue: 0,0:47:13.46,0:47:16.83,Default,,0,0,0,,这仅仅是4页的代码.\NThis one's only about four pages of code.
Dialogue: 0,0:47:16.83,0:47:22.26,Default,,0,0,0,,\N这个主题结束的时候,我希望大家阅读一个50页的代码不会害怕.\NBy the end of the subject, I hope a 50-page program will not look particularly frightening.
Dialogue: 0,0:47:22.26,0:47:28.76,Default,,0,0,0,,#TBD\NBut I don't expect-- and I don't want you to think that I expect you to be getting it as it's coming out.
Dialogue: 0,0:47:28.76,0:47:31.70,Default,,0,0,0,,\N你应该感受到这种气息，好不好？\NYou're supposed to feel the flavor of this, OK?
Dialogue: 0,0:47:31.70,0:47:34.83,Default,,0,0,0,,\N然后你应该想想它，因为它是一个很大的程序.\NAnd then you're supposed to think about it because it is a big program.
Dialogue: 0,0:47:35.10,0:47:39.33,Default,,0,0,0,,有很多东西在这个程序中.\NThere's a lot of stuff inside this program.
Dialogue: 0,0:47:40.86,0:47:46.40,Default,,0,0,0,,现在, 我们正在实现我告诉大家的这个语言.  模式匹配语言.\NNow, I've told you about the language we're implementing, the pattern match substitution language.
Dialogue: 0,0:47:46.40,0:47:47.93,Default,,0,0,0,,我已经展示了一些规则.\NI showed you some rules.
Dialogue: 0,0:47:47.93,0:47:53.56,Default,,0,0,0,,\N我已经告诉大家关于匹配和实例化, 他们是运行一个规则的两部份.\NAnd I've told you about matching and instantiation, which are the two halves of how a rule works.
Dialogue: 0,0:47:53.76,0:48:04.40,Default,,0,0,0,,现在, 我们需要理解控制结构, 通过它,规则被应用到表达式上来做代数化简.\NNow we have to understand the control structure by which the rules are applied to the expressions so as to do algebraic simplification.
Dialogue: 0,0:48:06.53,0:48:10.03,Default,,0,0,0,,它是非常复杂的.\NNow, that's also a big complicated mess.
Dialogue: 0,0:48:11.76,0:48:19.76,Default,,0,0,0,,\N问题是其中有很多连锁的,相互交织的循环,\NThe problem is that there is a variety of interlocking,\Ninterwoven loops, if you will, involved in this.
Dialogue: 0,0:48:19.76,0:48:27.43,Default,,0,0,0,,\N一方面, 我不得不应用 --\NFor one thing, I have to apply-- \N我不得不检查我需要化简的表达式中的每一个子表达式\NI have to examine every subexpression of my expression that I'm trying to simplify.
Dialogue: 0,0:48:28.63,0:48:29.93,Default,,0,0,0,,\N我们已经知道要如何做这件事情了.\NThat we know how to do.
Dialogue: 0,0:48:29.93,0:48:36.66,Default,,0,0,0,,\N它是car , cdr 递归, 像这样, 是一种树遍历.\NIt's a car cdr recursion of some sort, or something like that, and some sort of tree walk.
Dialogue: 0,0:48:37.20,0:48:38.66,Default,,0,0,0,,\N那个将要发生.\NAnd that's going to be happening.
Dialogue: 0,0:48:38.66,0:48:48.76,Default,,0,0,0,,\N这样的每一个地方, 我在做我的我试图简化表达遍历得到的每个节点\NNow, for every such place, every node that I get to in doing my traversal of the expression I'm trying to simplify,
Dialogue: 0,0:48:48.76,0:48:51.53,Default,,0,0,0,,我想应用所有的规则.\NI want to apply all of the rules.
Dialogue: 0,0:48:53.06,0:48:55.76,Default,,0,0,0,,\N每一个规则将要寻找每一个节点.\NEvery rule is going to look at every node.
Dialogue: 0,0:48:55.76,0:48:58.36,Default,,0,0,0,,\N我将要对这些规则做一个旋转.\NI'm going to rotate the rules around.
Dialogue: 0,0:49:01.33,0:49:05.93,Default,,0,0,0,,\N一个规则可以匹配或者不匹配.\NNow, either a rule will or will not match.
Dialogue: 0,0:49:07.13,0:49:11.00,Default,,0,0,0,,\N如果规则不匹配,那我就不关心了.\NIf the rule does not match, then it's not very interesting.
Dialogue: 0,0:49:11.80,0:49:17.36,Default,,0,0,0,,\N如果规则匹配了,我在那个节点用另外一个表达式替换这个表达式.\NIf the rule does match, then I'm going to replace that node in the expression by an alternate expression.
Dialogue: 0,0:49:18.00,0:49:23.23,Default,,0,0,0,,实际上,我创建了一个新的表达式, 它包含---\NI'm actually going to make a new expression, which contains--
Dialogue: 0,0:49:23.23,0:49:32.23,Default,,0,0,0,,\N新值所包含的一切, 替代框架的结果, 在这个层级上框架的实例化.\Neverything contains that new value, the result of substituting into the skeleton, instantiating the skeleton for that rule at this level.
Dialogue: 0,0:49:32.23,0:49:37.73,Default,,0,0,0,,\N但是没有人知道我那里实例化的是已经化简的形式.\NBut no one knows whether that thing that I instantiated there is in simplified form.
Dialogue: 0,0:49:38.26,0:49:44.03,Default,,0,0,0,,\N所以,我们要一个化简的形式, 用某种方式调用化简器在我构建的东西上面\NSo we're going to have to simplify that, somehow to call the simplifier on the thing that I just constructed.
Dialogue: 0,0:49:45.70,0:49:50.63,Default,,0,0,0,,\N当这完成的时候, 我可以把我想要的作为答案构建到表达式中\NAnd then when that's done, then I sort of can build that into the expression I want as my answer.
Dialogue: 0,0:49:51.43,0:49:57.90,Default,,0,0,0,,\N这里,我有一个基本想法, 垃圾出化简器.\NNow, there is a basic idea here, which I will call a garbage- in, garbage-out  simplifier.
Dialogue: 0,0:50:01.13,0:50:03.26,Default,,0,0,0,,它是一个递归的化简器.\NIt's a kind of recursive simplifier.
Dialogue: 0,0:50:03.26,0:50:09.06,Default,,0,0,0,,\N化简的方法是基本对象比如变量就是最简形式的了.\NAnd what happens is the way simplify something is that simple objects like variables are simple.
Dialogue: 0,0:50:10.16,0:50:13.66,Default,,0,0,0,,\N组合对象,我也不知道.\NCompound objects, well, I don't know.
Dialogue: 0,0:50:13.66,0:50:16.76,Default,,0,0,0,,\N我要做的是从简单对象开始构建,\NWhat I'm going to do is I'm going to build up from simple objects,
Dialogue: 0,0:50:16.76,0:50:21.46,Default,,0,0,0,,通过假设他们分出来的小块都是基本对象.\Ntrying to make simple things by assuming that the pieces they're made out of are simple.
Dialogue: 0,0:50:24.23,0:50:26.00,Default,,0,0,0,,\N这就是这里所发生的.\NThat's what's happening here.
Dialogue: 0,0:50:27.23,0:50:33.40,Default,,0,0,0,,现在,如果我们看第一个幻灯片 --- 在上面\NWell, now, if we look at the first slide-- no, overhead, overhead.
Dialogue: 0,0:50:33.40,0:50:37.43,Default,,0,0,0,,\N如果我们看顶上, 我们看到一个非常复杂的程序像我们之前看到的匹配器一样,\NIf we look at the overhead, we see a very complicated program like we saw before for the matcher,
Dialogue: 0,0:50:37.43,0:50:40.60,Default,,0,0,0,,它太复杂了, 还没有必要仔细阅读它.\Nso complicated that you can't read it like that.
Dialogue: 0,0:50:40.60,0:50:50.46,Default,,0,0,0,,\N我只想让大家感受一下它的轮廓,这个轮廓就是这个程序里面有很多子程序.\NI just want you to get the feel of the shape of it, and the shape of it is that this program has various subprograms in it.
Dialogue: 0,0:50:51.76,0:51:01.70,Default,,0,0,0,,其中的一个 -- 这部份是遍历表达式, 这部份是尝试规则.\NOne of them--this part is the part for traversing the expression, and this part is the part for trying rules.
Dialogue: 0,0:51:02.20,0:51:06.10,Default,,0,0,0,,\N现在,当然,我们可以更详细的看看.\NNow, of course, we can look at that in some more detail.
Dialogue: 0,0:51:06.10,0:51:12.36,Default,,0,0,0,,\N我们看第一个幻灯片 ,好吧.\NLet's look at--let's look at the first transparency, right?
Dialogue: 0,0:51:12.86,0:51:17.80,Default,,0,0,0,,\N它是由好几个部份组成的化简器.\NThe simplifier is made out of several parts.
Dialogue: 0,0:51:17.80,0:51:27.80,Default,,0,0,0,,\N现在,记住在最开始, 化简器有一系列规则 --\NNow, remember at the very beginning, the simplifier is the thing which takes a rules-- 一系列的规则和产生一个过程,这个过程将对它进行简化.\Na set of rules and produces a program which will simplify it relative to them.
Dialogue: 0,0:51:29.63,0:51:33.06,Default,,0,0,0,,\N所以,这里我们有化简器.\NSo here we have our simplifier.
Dialogue: 0,0:51:33.06,0:51:35.30,Default,,0,0,0,,\N它需要一个规则集合.\NIt takes a rule set.
Dialogue: 0,0:51:35.30,0:51:41.83,Default,,0,0,0,,\N#TBD\NAnd in the context where that rule set is defined, there are various other definitions that are done here.
Dialogue: 0,0:51:41.83,0:51:49.00,Default,,0,0,0,,这个化简器过程的结果是,事实上, 是一个已经定义好的过程.\NAnd then the result of this simplifier procedure is, in fact, one of the procedures that was defined.
Dialogue: 0,0:51:49.60,0:51:51.20,Default,,0,0,0,,\N化简X\NSimplify x.
Dialogue: 0,0:51:52.13,0:51:59.73,Default,,0,0,0,,\N这些规则集合上的化简器的调用结果是一个过程,\NWhat I'm returning as the value of calling the simplifier on a set of rules is a procedure,
Dialogue: 0,0:52:00.10,0:52:09.10,Default,,0,0,0,,化简X的过程, 它在这个上下文中定义, (过程)是一个恰当利用这些规则的化简过程.\Nthe simplify x procedure, which is defined in that context, which is a simplification procedure appropriate for using those set of rules.
Dialogue: 0,0:52:14.43,0:52:16.40,Default,,0,0,0,,这就是我这里有的.\NThat's what I have there.
Dialogue: 0,0:52:16.96,0:52:25.96,Default,,0,0,0,,\N这些过程的前两个, 这个和这个, 他们一起递归遍历一个表达式.\NNow, the first two of these procedures, this one and this one, are together going to be the recursive traversal of an expression.
Dialogue: 0,0:52:25.96,0:52:33.83,Default,,0,0,0,,\N这个是任何表达式的通用化简方法, 这个是化简部份表达式列表的东西.\NThis one is the general simplification for any expression, and this is the thing which simplifies a list of parts of an expression.
Dialogue: 0,0:52:35.10,0:52:36.46,Default,,0,0,0,,\N没有别的了.\NNothing more.
Dialogue: 0,0:52:36.46,0:52:40.16,Default,,0,0,0,,\N对于其中的每一个,我们来做一些复杂的事情, 包括尝试这些规则.\NFor each of those, we're going to do something complicated, which involves trying the rules.
Dialogue: 0,0:52:40.16,0:52:42.13,Default,,0,0,0,,\N现在,我们应该看这些部份.\NNow, we should look at the various parts.
Dialogue: 0,0:52:45.46,0:52:48.40,Default,,0,0,0,,\N我们看一下一个表达式的递归遍历.\NWell let's look first at the recursive traversal of an expression.
Dialogue: 0,0:52:48.40,0:52:52.03,Default,,0,0,0,,\N这是一种简单的方式.\NAnd this is done in a sort of simple way.
Dialogue: 0,0:52:53.73,0:52:58.30,Default,,0,0,0,,\N这个一个小型的递归程序.\NThis is a little nest of recursive procedures.
Dialogue: 0,0:52:59.03,0:53:02.23,Default,,0,0,0,,这里有两个过程 ---\NAnd what we have here are two procedures--
Dialogue: 0,0:53:02.23,0:53:08.46,Default,,0,0,0,,一个是对一个表达式进行化简, 另一个是对部分表达式的进行化简\None for simplifying an expression, and one for simplifying parts of an expression.
Dialogue: 0,0:53:08.90,0:53:11.40,Default,,0,0,0,,\N他们的工作方式很简单.\NAnd the way this works is very simple.
Dialogue: 0,0:53:11.40,0:53:18.86,Default,,0,0,0,,\N如果我要化简的表达式是组合表达式, 我就对这个表达式的每一个部分进行化简.\NIf the expression I'm trying to simplify is a compound expression, I'm going to simplify all the parts of it.
Dialogue: 0,0:53:19.50,0:53:25.90,Default,,0,0,0,,\N就调用这个  -- 过程 , 化简部分会构造一个新的各个部分都化简过的表达式\NAnd that's calling--that procedure, simplify parts, is going to make up a new expression with all the parts simplified,
Dialogue: 0,0:53:25.90,0:53:29.10,Default,,0,0,0,,这个过程中会尝试所有的规则,在这里.\Nwhich I'm then going to try the rules on over here.
Dialogue: 0,0:53:30.46,0:53:37.63,Default,,0,0,0,,\N如果表达式不是复合表达式, 它如果是简单的表达式, 比如 , 符号PI\NIf it turns out that the expression is not compound, if it's simple, like just a symbol or something like pi,
Dialogue: 0,0:53:37.63,0:53:47.76,Default,,0,0,0,,\N那么, 这种情况, 我就在这个符号上尝试所有的规则, 因为我想让这些规则中的PI扩展成3.1415....\Nthen in any case, I'm going to try the rules on it because it might be that I want in my set of rules to expand pi to 3.14159265358979,dot, dot, dot.
Dialogue: 0,0:53:48.16,0:53:49.66,Default,,0,0,0,,\N也许我不会这样做.\NBut I may not.
Dialogue: 0,0:53:49.66,0:53:52.00,Default,,0,0,0,,\N但是, 没有理由不这样做.\NBut there is no reason not to do it.
Dialogue: 0,0:53:52.53,0:53:57.83,Default,,0,0,0,,现在,如果我要化简 这些部分,那就很简单了.\NNow, if I want to simplify the parts, well, that's easy too.
Dialogue: 0,0:53:58.66,0:54:05.56,Default,,0,0,0,,\N要么表达式是空的, 没有更多的部分(表达式), 这种情况我返回一个空表达式.\NEither the expression is an empty one, there's no more parts, in which case I have the empty expression.
Dialogue: 0,0:54:05.56,0:54:14.56,Default,,0,0,0,,\N要么, 我用cons构建一个新的表达式, 化简表达式的第一部分作为car,\NOtherwise, I'm going to make a new expression by cons, which is the result of simplifying the first part of the expression, the car,
Dialogue: 0,0:54:15.16,0:54:17.96,Default,,0,0,0,,\N然后, 化简表达式的其他部分作为cdr.\Nand simplifying the rest of the expression, which is the cdr.
Dialogue: 0,0:54:20.73,0:54:30.63,Default,,0,0,0,,我用这种方式向大家展示这些的原因是我想让大家感受在写程序的时候,这些模式非常重要.\NNow, the reason why I'm showing you this sort of stuff this way is because I want you get the feeling for the various patterns that are very important when writing programs.
Dialogue: 0,0:54:31.83,0:54:34.00,Default,,0,0,0,,\N而且他们可以用不同的方式实现.\NAnd this could be written a different way.
Dialogue: 0,0:54:34.00,0:54:37.30,Default,,0,0,0,,\N还有其他的表达式化简的方法.\NThere's another way to write simplified expressions so there would be only one of them.
Dialogue: 0,0:54:37.30,0:54:39.63,Default,,0,0,0,,\N这里仅仅是一个小程序.\NThere would only be one little procedure here.
Dialogue: 0,0:54:39.63,0:54:42.60,Default,,0,0,0,,\N我把它写到黑板上让大家感受一下.\NLet me just write that on the blackboard to give you a feeling for that.
Dialogue: 0,0:54:49.40,0:54:52.13,Default,,0,0,0,,\N这在另一个习俗里,如果你愿意. #TBD  i think this sentence is wrong.\NThis in another idiom, if you will.
Dialogue: 0,0:54:59.30,0:55:03.43,Default,,0,0,0,,为了化简表达式X , 我要做什么呢?\NTo simplify an expression called x, what am I going to do?
Dialogue: 0,0:55:03.43,0:55:10.73,Default,,0,0,0,,\N我要在后面的情况下尝试这些规则.\NI'm going to try the rules on the following situation.
Dialogue: 0,0:55:10.73,0:55:16.10,Default,,0,0,0,,\N如果 -- 后面的表达式 -- 是复合的, 就像我之前说的.\NIf-- on the following expression-- compound, just like we had before.
Dialogue: 0,0:55:21.10,0:55:24.53,Default,,0,0,0,,\N如果表达式是复合的, 我要怎么做呢?\NIf the expression is compound, well, what am I going to do?
Dialogue: 0,0:55:24.53,0:55:25.70,Default,,0,0,0,,\N我要对它的每一个部分进行化简.\NI'm going to simplify all the parts.
Dialogue: 0,0:55:25.70,0:55:33.50,Default,,0,0,0,,\N但是我已经有cdr的递归,利用通用模式, 已经抽象成了一个高阶过程.\NBut I already have a cdr recursion, a common pattern of usage, which has been captured as a high-order procedure.
Dialogue: 0,0:55:33.50,0:55:35.10,Default,,0,0,0,,\N它叫做map.\NIt's called map.
Dialogue: 0,0:55:35.73,0:55:37.16,Default,,0,0,0,,我在这里写出来.\NSo I'll just write that here.
Dialogue: 0,0:55:37.16,0:55:48.23,Default,,0,0,0,,\Nmap化简这个表达式, 这个表达式的每一个部分.\NMap simplify the expression, all the parts of the expression.
Dialogue: 0,0:55:48.86,0:55:54.93,Default,,0,0,0,,\N应用化简操作, 这个, 表达式的每一个部分,\NThis says apply the simplification operation, which is this one, every part of the expression,
Dialogue: 0,0:55:54.93,0:55:57.83,Default,,0,0,0,,\N都切分到了一个列表中.\Nand then that cuts those up into a list.
Dialogue: 0,0:55:59.83,0:56:08.23,Default,,0,0,0,,列表中的每一个元素组成了这个表达式,或者,我已经有了这个表达式.\NIt's every element of the list which the expression is assumed to be made out of, and otherwise, I have the expression.
Dialogue: 0,0:56:08.63,0:56:13.86,Default,,0,0,0,,所以我不需要helper过程来化简表达式的各个部分,因为我已经有了(这个表达式).\NSo I don't need the helper procedure, simplify parts, because that's really this.
Dialogue: 0,0:56:15.23,0:56:17.40,Default,,0,0,0,,\N所以,有时候,可以这样写.\NSo sometimes, you just write it this way.
Dialogue: 0,0:56:17.40,0:56:19.13,Default,,0,0,0,,这个无关紧要.\NIt doesn't matter very much.
Dialogue: 0,0:56:20.73,0:56:26.83,Default,,0,0,0,,\N好, 现在看一下 -- 如何尝试规则.\NWell, now let's take a look at-- let's just look at how you try rules.
Dialogue: 0,0:56:27.70,0:56:31.93,Default,,0,0,0,,\N大家如果看这个幻灯片, 我们会看到一堆复杂的东西.\NIf you look at this slide, we see this is a complicated mess also.
Dialogue: 0,0:56:33.26,0:56:35.73,Default,,0,0,0,,\N我正在对一个表达式尝试规则.\NI'm trying rules on an expression.
Dialogue: 0,0:56:36.00,0:56:40.43,Default,,0,0,0,,事实证明, #TBD\NIt turns out the expression I'm trying it on is some subexpression now of the expression I started with.
Dialogue: 0,0:56:40.43,0:56:44.30,Default,,0,0,0,,\N因为我允许尝试每一个子表达式.\NBecause the thing I just arranged allowed us to try every subexpression.
Dialogue: 0,0:56:45.80,0:56:51.90,Default,,0,0,0,,\N所以,现在我们表达式的子表达式\NSo now here we're taking in a subexpression of the expression we started with . 就是这个.\NThat's what this is.
Dialogue: 0,0:56:51.90,0:56:58.00,Default,,0,0,0,,我们这里要定义的是一个叫做scan的过程, 它用来尝试每一个规则.\NAnd what we're going to define here is a procedure called scan, which is going to try every rule.
Dialogue: 0,0:56:58.23,0:57:00.83,Default,,0,0,0,,\N我们会在整个规则集上开始(扫描).\NAnd we're going to start it up on the whole set of rules.
Dialogue: 0,0:57:00.83,0:57:08.46,Default,,0,0,0,,\N这使用cdr 向后遍历规则, 根据你的意愿找规则来应用.\NThis is going to go cdr-ing down the rules, if you will, looking for a rule to apply.
Dialogue: 0,0:57:08.86,0:57:12.60,Default,,0,0,0,,\N当找到一个(规则),它的任务就完成了.\NAnd when it finds one, it'll do the job.
Dialogue: 0,0:57:13.60,0:57:16.80,Default,,0,0,0,,\N我们来看一下尝试规则是如何工作的.\NWell, let's take a look at how try rules works.
Dialogue: 0,0:57:16.80,0:57:21.30,Default,,0,0,0,,它很简单: 扫描所有的规则.\NIt's very simple: the scan rules. Scan rules, the way of scanning.
Dialogue: 0,0:57:21.30,0:57:23.26,Default,,0,0,0,,它很简单,是吧.\NWell, is it so simple?
Dialogue: 0,0:57:23.26,0:57:24.93,Default,,0,0,0,,当然它是一个很庞大的程序.\NIt's a big program, of course.
Dialogue: 0,0:57:24.93,0:57:29.43,Default,,0,0,0,,\N我们使用了一堆规则, 他们是整个规则列表的子列表.\NWe take a bunch of rules, which is a sublist of the list of rules.
Dialogue: 0,0:57:30.53,0:57:35.53,Default,,0,0,0,,\N我们已经尝试了其中的一些, 他们都不符合, 这里还有一些.\NWe've tried some of them already, and they've not been appropriate, so we get to some here.
Dialogue: 0,0:57:35.53,0:57:36.40,Default,,0,0,0,,\N我们跳转到下一个.\NWe get to move to the next one.
Dialogue: 0,0:57:36.40,0:57:41.03,Default,,0,0,0,,\N如果没有更多的规则了,那么,我不能对这个表达式做任何事情,这个很简单.\NIf there are no more rules, well then, there's nothing I can do with this expression, and it's simplified.
Dialogue: 0,0:57:42.06,0:57:47.56,Default,,0,0,0,,\N然而, 如果还有规则,\NHowever, if it turns out that there are still rules to be done,
Dialogue: 0,0:57:47.56,0:57:59.30,Default,,0,0,0,,\N那么就用一个空的字典作为整个过程的字典, 用剩余规则中的第一个对表达式进行模式匹配.\Nthen let's match the pattern of the first rule against the expression using the empty dictionary to start with and use that as the dictionary.
Dialogue: 0,0:57:59.80,0:58:04.16,Default,,0,0,0,,\N如果失败了,就尝试其它规则.\NIf that happens to be a failure, try the rest of the rules.
Dialogue: 0,0:58:06.16,0:58:08.00,Default,,0,0,0,,这些代码就是说这个意思.\NThat's all it says here.
Dialogue: 0,0:58:08.00,0:58:10.76,Default,,0,0,0,,它说,丢弃那个规则.\NIt says discard that rule.
Dialogue: 0,0:58:10.76,0:58:17.70,Default,,0,0,0,,\N否则,我将得到第一个规则的框架,实例化它,然后关联到字典中.\NOtherwise, well, I'm going to get the skeleton of the first rule, instantiate that relative to the dictionary,
Dialogue: 0,0:58:17.70,0:58:21.30,Default,,0,0,0,,\N然后对结果进行化简, 这个表达式就是我想要的.\Nand simplify the result, and that's the expression I want.
Dialogue: 0,0:58:23.83,0:58:28.96,Default,,0,0,0,,所以,虽然这是一个复杂的过程,但是每个复杂过程都是由许多简单部分组成的.\NSo although that was a complicated program, every complicated program is made out of a lot of simple pieces.
Dialogue: 0,0:58:28.96,0:58:33.83,Default,,0,0,0,,现在 , 这里的递归模式非常复杂.\NNow, the pattern of recursions here is very complicated.
Dialogue: 0,0:58:34.43,0:58:36.96,Default,,0,0,0,,最重要的事情就是不要想它.\NAnd one of the most important things is not to think about that.
Dialogue: 0,0:58:38.43,0:58:44.00,Default,,0,0,0,,如果去思考它所做的实际模式,大家就会迷惑.\NIf you try to think about the actual pattern by which this does something, you're going to get very confused.
Dialogue: 0,0:58:44.86,0:58:46.00,Default,,0,0,0,,我会(迷惑)\NI would.
Dialogue: 0,0:58:46.36,0:58:50.80,Default,,0,0,0,,这不是你的问题,可以通过练习做到这一点。(写出这些代码)\NThis is not a matter of you can do this with practice.
Dialogue: 0,0:58:50.80,0:58:53.10,Default,,0,0,0,,这些模式非常难.\NThese patterns are hard.
Dialogue: 0,0:58:53.80,0:58:55.83,Default,,0,0,0,,\N但是大家不用考虑它.\NBut you don't have to think about it.
Dialogue: 0,0:58:55.83,0:59:01.33,Default,,0,0,0,,\N窍门是 --好的程序和好的设计-- (知道编程时)什么是不需要考虑的.\NThe key to this-- it's very good programming and very good design-- is to know what not to think about.
Dialogue: 0,0:59:02.60,0:59:13.83,Default,,0,0,0,,\N事实上,回到这个幻灯片, 我不需要考虑它是因为我规定了X化简后的结果是什么样子.\NThe fact is, going back to this slide, I don't have to think about it because I have specifications in my mind for what simplify x does.
Dialogue: 0,0:59:13.83,0:59:15.63,Default,,0,0,0,,我不需要知道它是如何做的.\NI don't have to know how it does it.
Dialogue: 0,0:59:16.60,0:59:21.63,Default,,0,0,0,,\N它也许是调用scan尝试规则实现的.\NAnd it may, in fact, call scan somehow through try rules, which it does.
Dialogue: 0,0:59:21.80,0:59:24.33,Default,,0,0,0,,\N然后通过某种方式, 在这里运行另一个递归.\NAnd somehow, I've got another recursion going on here.
Dialogue: 0,0:59:24.33,0:59:33.43,Default,,0,0,0,,既然我知道化简X 产生一个化简后的结果,那么我就不需要再考虑它了.\NBut since I know that simplify x is assumed by wishful thinking to produce the simplified result, then I don't have to think about it anymore.
Dialogue: 0,0:59:33.43,0:59:34.83,Default,,0,0,0,,我直接使用它.\NI've used it.
Dialogue: 0,0:59:34.83,0:59:36.43,Default,,0,0,0,,我合情合理的使用它.\NI've used it in a reasonable way.
Dialogue: 0,0:59:36.43,0:59:37.86,Default,,0,0,0,,我会得到一个正确的结果.\NI will get a reasonable answer.
Dialogue: 0,0:59:39.50,0:59:42.80,Default,,0,0,0,,\N大家需要学习这种编程方法 -- 学会放弃(思考过多)\NAnd you have to learn how to program that way-- with abandon.
Dialogue: 0,0:59:47.36,0:59:49.56,Default,,0,0,0,,这里还有一点剩余.\NWell, there's very little left of this thing.
Dialogue: 0,0:59:50.00,0:59:54.86,Default,,0,0,0,,\N这里还有一些字典方面的细节.\NAll there is left is a few details associated with what a dictionary is.
Dialogue: 0,0:59:54.86,1:00:02.16,Default,,0,0,0,,\N你们想知道到底字典是什么, 但是我会跳过它,不告诉你们这些.\NAnd those of you who've been itching to know what a dictionary is, well, I will flip it up and not tell you anything about it.
Dialogue: 0,1:00:03.76,1:00:05.53,Default,,0,0,0,,\N字典很简单.\NDictionaries are easy.
Dialogue: 0,1:00:05.53,1:00:16.50,Default,,0,0,0,,\N它可以用叫做列表A 来表示, 它是为了生成表的特定模式\NIt's represented in terms of something else called an A list, which is a particular pattern of usage for making tables in lists.
Dialogue: 0,1:00:16.50,1:00:20.63,Default,,0,0,0,,他们很简单.\NThey're easy. \N他们由pair构成, 之前已经有同学问过了.\NThey're made out of pairs, as was asked a bit ago.
Dialogue: 0,1:00:21.06,1:00:26.76,Default,,0,0,0,,有个特殊的过程来处理这个东西,叫做assq , 大家可以在手册中看到.\NAnd there are special procedures for dealing with such things called assq, and you can find them in manuals.
Dialogue: 0,1:00:26.76,1:00:28.83,Default,,0,0,0,,\N我对这个不是非常感兴趣.\NI'm not terribly excited about it.
Dialogue: 0,1:00:28.83,1:00:37.30,Default,,0,0,0,,\N这里有趣的是我需要用一个模式,一个数据,一个字典来扩展这个字典.\NThe only interesting thing here in extend dictionary is I have to extend the dictionary with a pattern, a datum, and a dictionary.
Dialogue: 0,1:00:37.30,1:00:42.76,Default,,0,0,0,,这个模式实际上是一个模式变量.\NThis pattern is, in fact, at this point a pattern variable.
Dialogue: 0,1:00:43.53,1:00:44.76,Default,,0,0,0,,\N我要做什么呢?\NAnd what do I want to do?
Dialogue: 0,1:00:44.76,1:00:49.86,Default,,0,0,0,,我想离开模式变量的名字, 这个模式变量名字,  #TBD what the meaning of the pull out\NI want to pull out the name of that pattern variable, the pattern variable name,
Dialogue: 0,1:00:49.86,1:00:53.70,Default,,0,0,0,,然后,我在字典中找它,看看字典中是否已经有值了.\Nand I'm going to look up in the dictionary and see if it already has a value.
Dialogue: 0,1:00:53.70,1:00:56.80,Default,,0,0,0,,如果没有,就在字典中加入它.\NIf not, I'm going to add a new one in.
Dialogue: 0,1:00:56.80,1:01:03.60,Default,,0,0,0,,如果已经存在了, 有这个值, 它最好等于现有的存储着的这个值.\NIf it does have one, if it has a value, then it had better be equal to the one that was already stored away.
Dialogue: 0,1:01:03.60,1:01:06.83,Default,,0,0,0,,\N如果是这种情况, 字典就是我所期待的.\NAnd if that's the case, the dictionary is what I expected it to be.
Dialogue: 0,1:01:06.83,1:01:09.43,Default,,0,0,0,,\N否则, 置失败.\NOtherwise, I fail.
Dialogue: 0,1:01:11.56,1:01:13.26,Default,,0,0,0,,所以,它也很简单.\NSo that's easy, too.
Dialogue: 0,1:01:13.26,1:01:18.63,Default,,0,0,0,,如果你发现一些程序, 它里面有很多小部分(过程)组成, 这些小部分都很简单.\NIf you open up any program, you're going to find inside of it lots of little pieces, all of which are easy.
Dialogue: 0,1:01:19.66,1:01:26.23,Default,,0,0,0,,\N这种情况下, 我认为, 我告诉你价值一万美金的信息.\NSo at this point, I suppose, I've just told you some million-dollar valuable information.
Dialogue: 0,1:01:28.40,1:01:31.43,Default,,0,0,0,,我想这个程序几乎已经完成了.\NAnd I suppose at this point we're pretty much done with this program.
Dialogue: 0,1:01:31.43,1:01:33.36,Default,,0,0,0,,大家有什么问题么?\NI'd like to ask about questions.
Dialogue: 0,1:01:33.36,1:01:38.70,Default,,0,0,0,,\N学生: 是的, 你可以给我描述一个化简后的表达式的规范么？\NAUDIENCE: Yes, can you give me the words that describe the specification for a simplified expression?
Dialogue: 0,1:01:38.70,1:01:39.53,Default,,0,0,0,,\N老师:可以.\NPROFESSOR: Sure.
Dialogue: 0,1:01:39.53,1:01:44.80,Default,,0,0,0,,\N一个化简后的表达式需要一个表达式和一个化简表达式的过程.\NA simplified expression takes an expression and produces a simplified expression.
Dialogue: 0,1:01:44.80,1:01:47.80,Default,,0,0,0,,就是这个.\NThat's it, OK?
Dialogue: 0,1:01:47.80,1:01:50.70,Default,,0,0,0,,\N它的工作方式很简单.\NHow it does it is very easy.
Dialogue: 0,1:01:51.10,1:01:56.50,Default,,0,0,0,,\N在复合表达式的情况下, 所有的块都是简单的, 然后在这个这些块上尝试这些规则.\NIn compound expressions, all the pieces are simplified, and then the rules are tried on the result.
Dialogue: 0,1:01:56.50,1:01:59.16,Default,,0,0,0,,对于简单表达式, 就直接尝试这些规则.\NAnd for simple expressions, you just try all the rules.
Dialogue: 0,1:01:59.16,1:02:02.70,Default,,0,0,0,,\N学生: 所以 是这些规则的作用来化简表达式的么?\NAUDIENCE: So an expression is simplified by virtue of the rules?
Dialogue: 0,1:02:02.70,1:02:03.80,Default,,0,0,0,,老师:当然.\NPROFESSOR: That's, of course, true.
Dialogue: 0,1:02:03.80,1:02:04.10,Default,,0,0,0,,学生: 好.\NAUDIENCE: Right.
Dialogue: 0,1:02:04.10,1:02:07.76,Default,,0,0,0,,老师: 它工作的方式是:化简的表达式, 在这里,\NPROFESSOR: And the way this works is that simplified expression, as you see here,
Dialogue: 0,1:02:07.76,1:02:12.13,Default,,0,0,0,,\N把表达式切分成不能再分的小块,\Nwhat it does is it breaks the expression down into the smallest pieces,
Dialogue: 0,1:02:12.13,1:02:17.73,Default,,0,0,0,,在化简器中使用这些规则自下而上化简构造表达式,\Nsimplifies building up from the bottom using the rules to be the simplifier,
Dialogue: 0,1:02:17.73,1:02:22.93,Default,,0,0,0,,处理,构造一个新的表达式作为结果.\Nto do the manipulations, and constructs a new expression as the result.
Dialogue: 0,1:02:24.03,1:02:29.70,Default,,0,0,0,,\N最终, 大家看到的一个事情是这些规则, 这些尝试的规则,\NEventually, one of things you see is that the rules themselves, the try rules,
Dialogue: 0,1:02:29.70,1:02:35.80,Default,,0,0,0,,当它改变匹配的结果,叫做生成结果的化简表达式\Ncall a simplified expression on the results when it changes something, the results of a match.
Dialogue: 0,1:02:35.80,1:02:40.90,Default,,0,0,0,,对不起, 框架的实例化结果已经匹配了\NI'm sorry, the results of instantiation of a skeleton for a rule that has matched.
Dialogue: 0,1:02:40.90,1:02:47.80,Default,,0,0,0,,\N化简的表达式的细节是 任何传入的表达式通过这些规则生成化简后的表达式.\NSo the spec of a simplified expression is that any expression you put into it comes out simplified according to those rules.
Dialogue: 0,1:02:49.30,1:02:51.30,Default,,0,0,0,,\N谢谢.\NThank you. 我们休息一下.\NLet's take a break.
