[Script Info]
; Script generated by Aegisub 3.0.4
; http://www.aegisub.org/
Title: EN Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
Collisions: Normal
Video Zoom Percent: 1
Scroll Position: 0
Active Line: 0
Video Zoom Percent: 0.65
PlayResX: 640
PlayResY: 480
YCbCr Matrix: TV.601

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: EN,Calisto MT,21,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,0,2,10,10,30,1
Style: Declare,微软雅黑,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,0,8,10,10,10,1
Style: staff,微软雅黑,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0,2,5,10,10,10,1
Style: title,微软雅黑,35,&H001D64D9,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0,1,5,10,10,10,1
Style: Default,雅黑宋体,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,0,2,10,10,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:22.34,EN,,0,0,0,,
Dialogue: 0,0:00:22.34,0:00:24.34,EN,,0,0,0,,Pattern-matching: Rule-based Substitution
Dialogue: 0,0:00:24.34,0:00:29.34,EN,,0,0,0,,PROFESSOR: Well, yesterday we learned a bit about symbolic manipulation,
Dialogue: 0,0:00:29.92,0:00:35.12,EN,,0,0,0,,and we wrote a rather stylized program
Dialogue: 0,0:00:35.15,0:00:38.97,EN,,0,0,0,,to implement a pile of calculus rule from the calculus book.
Dialogue: 0,0:00:39.61,0:00:44.59,EN,,0,0,0,,Here on the transparencies,
Dialogue: 0,0:00:44.96,0:00:48.81,EN,,0,0,0,,we see a bunch of calculus rules from such a book.
Dialogue: 0,0:00:49.47,0:00:54.62,EN,,0,0,0,,And, of course, what we did is sort of translate these rules into the language of the computer.
Dialogue: 0,0:00:55.14,0:00:58.85,EN,,0,0,0,,But, of course, that's a sort of funny strategy.
Dialogue: 0,0:00:59.36,0:01:04.80,EN,,0,0,0,,Why should we have to translate these rules into the language of the computer?
Dialogue: 0,0:01:05.00,0:01:06.27,EN,,0,0,0,,And what do I really mean by that?
Dialogue: 0,0:01:06.62,0:01:11.02,EN,,0,0,0,,These are--the program we wrote yesterday was very stylized.
Dialogue: 0,0:01:11.21,0:01:15.98,EN,,0,0,0,,It was a conditional, a dispatch on the type of the expression
Dialogue: 0,0:01:16.38,0:01:18.48,EN,,0,0,0,,as observed by the rules.
Dialogue: 0,0:01:19.68,0:01:21.55,EN,,0,0,0,,What we see here are rules that say
Dialogue: 0,0:01:21.74,0:01:25.48,EN,,0,0,0,,if the object being the derivative is being taken of,
Dialogue: 0,0:01:25.48,0:01:29.42,EN,,0,0,0,,if that expression is a constant, then do one thing.
Dialogue: 0,0:01:29.42,0:01:31.37,EN,,0,0,0,,If it's a variable, do another thing.
Dialogue: 0,0:01:31.60,0:01:35.56,EN,,0,0,0,,If it's a product of a constant times a variable, do something and so on.
Dialogue: 0,0:01:36.00,0:01:38.96,EN,,0,0,0,,There's sort of a dispatch there on a type.
Dialogue: 0,0:01:41.40,0:01:45.16,EN,,0,0,0,,Well, since it has such a stylized behavior and structure,
Dialogue: 0,0:01:45.95,0:01:49.53,EN,,0,0,0,,is there some other way of writing this program that's more clear?
Dialogue: 0,0:01:50.83,0:01:53.45,EN,,0,0,0,,Well, what's a rule, first of all, What are these rules?
Dialogue: 0,0:01:55.56,0:01:58.50,EN,,0,0,0,,Let's think about that. Rules have parts.
Dialogue: 0,0:01:58.94,0:02:02.35,EN,,0,0,0,,If you look at these rules in detail,
Dialogue: 0,0:02:03.71,0:02:04.99,EN,,0,0,0,,what you see, for example,
Dialogue: 0,0:02:05.12,0:02:09.69,EN,,0,0,0,,is the rule has a left-hand side and a right-hand side.
Dialogue: 0,0:02:10.36,0:02:14.36,EN,,0,0,0,,Each of these rules has a left-hand side and the right-hand side.
Dialogue: 0,0:02:15.15,0:02:20.30,EN,,0,0,0,,The left-hand side is somehow compared with the expression you're trying to take the derivative of.
Dialogue: 0,0:02:21.52,0:02:25.10,EN,,0,0,0,,The right-hand side is the replacement for that expression.
Dialogue: 0,0:02:28.49,0:02:33.10,EN,,0,0,0,,So all rules on this page are something like this.
Dialogue: 0,0:02:36.51,0:02:38.06,EN,,0,0,0,,I have patterns,
Dialogue: 0,0:02:41.48,0:02:48.30,EN,,0,0,0,,and somehow, I have to produce, given a pattern, a skeleton.
Dialogue: 0,0:02:51.88,0:02:52.81,EN,,0,0,0,,This is a rule.
Dialogue: 0,0:02:55.42,0:02:57.13,EN,,0,0,0,,A pattern is something that matches,
Dialogue: 0,0:02:57.88,0:03:03.26,EN,,0,0,0,,and a skeleton is something you substitute into in order to get a new expression.
Dialogue: 0,0:03:06.46,0:03:16.32,EN,,0,0,0,,So what that means is that the pattern is matched against the expression, which is the source expression.
Dialogue: 0,0:03:23.72,0:03:28.51,EN,,0,0,0,,And the result of the application of the rule is to produce a new expression,
Dialogue: 0,0:03:33.61,0:03:34.91,EN,,0,0,0,,which I'll call a target,
Dialogue: 0,0:03:38.12,0:03:39.88,EN,,0,0,0,,by instantiation of a skeleton.
Dialogue: 0,0:03:41.63,0:03:43.02,EN,,0,0,0,,That's called instantiation.
Dialogue: 0,0:03:50.72,0:03:54.73,EN,,0,0,0,,So that is the process by which these rules are described.
Dialogue: 0,0:03:55.69,0:03:57.26,EN,,0,0,0,,What I'd like to do today
Dialogue: 0,0:03:58.73,0:04:01.08,EN,,0,0,0,,is build a language
Dialogue: 0,0:04:02.20,0:04:05.48,EN,,0,0,0,,and a means of interpreting that language, a means of executing that language,
Dialogue: 0,0:04:05.74,0:04:08.43,EN,,0,0,0,,where that language allows us to directly express these rules.
Dialogue: 0,0:04:10.59,0:04:11.58,EN,,0,0,0,,And what we're going to do
Dialogue: 0,0:04:11.58,0:04:17.56,EN,,0,0,0,,instead of bringing the rules to the level of the computer by writing a program that is those rules
Dialogue: 0,0:04:18.38,0:04:21.56,EN,,0,0,0,,in the computer's language--at the moment, in a Lisp--
Dialogue: 0,0:04:22.16,0:04:24.49,EN,,0,0,0,,we're going to bring the computer to the level of us
Dialogue: 0,0:04:25.48,0:04:29.15,EN,,0,0,0,,by writing a way by which the computer can understand rules of this sort.
Dialogue: 0,0:04:30.91,0:04:34.76,EN,,0,0,0,,This is slightly emphasizing the idea that we had last time
Dialogue: 0,0:04:35.44,0:04:39.36,EN,,0,0,0,,that we're trying to make a solution to a class of problems rather than a particular one.
Dialogue: 0,0:04:39.77,0:04:46.72,EN,,0,0,0,,The problem is if I want to write rules for a different piece of mathematics,
Dialogue: 0,0:04:48.24,0:04:51.39,EN,,0,0,0,,say, to simple algebraic simplification or something like that,
Dialogue: 0,0:04:51.98,0:04:55.48,EN,,0,0,0,,or manipulation of trigonometric functions,
Dialogue: 0,0:04:56.09,0:05:01.16,EN,,0,0,0,,I would have to write a different program in using yesterday's method.
Dialogue: 0,0:05:01.16,0:05:05.42,EN,,0,0,0,,Whereas I would like to encapsulate all of the things that are common to both of those programs,
Dialogue: 0,0:05:06.12,0:05:10.17,EN,,0,0,0,,meaning the idea of matching, instantiation, the control structure,
Dialogue: 0,0:05:10.17,0:05:12.46,EN,,0,0,0,,which turns out to be very complicated for such a thing,
Dialogue: 0,0:05:13.16,0:05:18.46,EN,,0,0,0,,I'd like to encapsulate that separately from the rules themselves.
Dialogue: 0,0:05:20.06,0:05:22.60,EN,,0,0,0,,So let's look at, first of all, a representation.
Dialogue: 0,0:05:22.62,0:05:24.09,EN,,0,0,0,,I'd like to use the overhead here.
Dialogue: 0,0:05:24.67,0:05:25.60,EN,,0,0,0,,I'd like-- there it is.
Dialogue: 0,0:05:26.25,0:05:32.27,EN,,0,0,0,,I'd like to look at a representation of the rules of calculus for derivatives
Dialogue: 0,0:05:33.71,0:05:37.15,EN,,0,0,0,,in a sort of simple language that I'm writing right here.
Dialogue: 0,0:05:38.11,0:05:43.29,EN,,0,0,0,,Now, I'm going to avoid--I'm going to avoid worrying about syntax.
Dialogue: 0,0:05:44.28,0:05:49.28,EN,,0,0,0,,We can easily pretty this, and I'm not interested in making-- this is indeed ugly.
Dialogue: 0,0:05:49.30,0:05:56.41,EN,,0,0,0,,This doesn't look like the beautiful text set dx by dt or something that I'd like to write,
Dialogue: 0,0:05:56.76,0:05:58.12,EN,,0,0,0,,but that's not essential.
Dialogue: 0,0:05:58.88,0:06:00.62,EN,,0,0,0,,That's sort of an accidental phenomenon.
Dialogue: 0,0:06:01.00,0:06:04.44,EN,,0,0,0,,Here, we're just worrying about the fact that the structure of the rules
Dialogue: 0,0:06:04.83,0:06:11.70,EN,,0,0,0,,is that there is a left-hand side here, represents the thing I want to match against the derivative expression.
Dialogue: 0,0:06:11.80,0:06:13.56,EN,,0,0,0,,This is the representation I'm going to say
Dialogue: 0,0:06:13.60,0:06:18.32,EN,,0,0,0,,for the derivative of a constant, which we will call c
Dialogue: 0,0:06:18.84,0:06:21.20,EN,,0,0,0,,respect to the variable we will call v.
Dialogue: 0,0:06:23.08,0:06:25.55,EN,,0,0,0,,And what we will get on the right-hand side is 0.
Dialogue: 0,0:06:26.00,0:06:28.06,EN,,0,0,0,,So this represents a rule.
Dialogue: 0,0:06:29.26,0:06:34.04,EN,,0,0,0,,The next rule will be the derivative of a variable, which we will call v
Dialogue: 0,0:06:34.22,0:06:37.74,EN,,0,0,0,,respect to the same variable v, and we get a 1.
Dialogue: 0,0:06:38.60,0:06:42.17,EN,,0,0,0,,However, if we have the derivative of a variable called u
Dialogue: 0,0:06:42.41,0:06:44.84,EN,,0,0,0,,respect to a different variables v,
Dialogue: 0,0:06:45.39,0:06:47.05,EN,,0,0,0,,we will get 0.
Dialogue: 0,0:06:47.84,0:06:52.17,EN,,0,0,0,,I just want you look at these rules a little bit and see how they fit together.
Dialogue: 0,0:06:52.51,0:06:54.30,EN,,0,0,0,,For example, over here,
Dialogue: 0,0:06:54.73,0:07:01.90,EN,,0,0,0,,we're going to have the derivative of the sum of an expression called x1 and an expression called x2.
Dialogue: 0,0:07:01.90,0:07:05.85,EN,,0,0,0,,These things that begin with question marks are called pattern variables
Dialogue: 0,0:07:06.88,0:07:08.62,EN,,0,0,0,,in the language that we're inventing,
Dialogue: 0,0:07:08.93,0:07:14.93,EN,,0,0,0,,and you see we're just making it up, so pattern variables for matching.
Dialogue: 0,0:07:14.93,0:07:20.33,EN,,0,0,0,,And so in this-- here we have the derivative of the sum of the expression which we will call x1.
Dialogue: 0,0:07:20.33,0:07:26.70,EN,,0,0,0,,And the expression we will call x2 with respect to the variable we call v will be-- here is the right-hand side:
Dialogue: 0,0:07:26.70,0:07:32.76,EN,,0,0,0,,the sum of the derivative of  that expression x1 with respect to v-- the right-hand side is the skeleton--
Dialogue: 0,0:07:33.82,0:07:37.10,EN,,0,0,0,,and the derivative of x2 with respect to v.
Dialogue: 0,0:07:37.60,0:07:42.38,EN,,0,0,0,,Colons here will stand for substitution objects.
Dialogue: 0,0:07:43.63,0:07:47.23,EN,,0,0,0,,They're--we'll call them skeleton evaluations.
Dialogue: 0,0:07:48.51,0:07:53.07,EN,,0,0,0,,So let me put up here on the blackboard for a second some syntax
Dialogue: 0,0:07:53.23,0:07:55.56,EN,,0,0,0,,so we'll know what's going on for this rule language.
Dialogue: 0,0:07:56.68,0:07:59.88,EN,,0,0,0,,First of all, we're going to have to worry about the pattern matching.
Dialogue: 0,0:08:06.04,0:08:13.12,EN,,0,0,0,,We're going to have things like a symbol like foo matches exactly itself.
Dialogue: 0,0:08:23.52,0:08:31.34,EN,,0,0,0,,The expression f of a and b will be used to match any list
Dialogue: 0,0:08:36.30,0:08:57.02,EN,,0,0,0,,whose first element is f, whose second element is a, and whose third element is b.
Dialogue: 0,0:08:58.62,0:09:06.99,EN,,0,0,0,,Also, another thing we might have in a pattern is that--a question mark with some variable like x.
Dialogue: 0,0:09:08.57,0:09:18.67,EN,,0,0,0,,And what that means, it says matches anything, which we will call x.
Dialogue: 0,0:09:25.45,0:09:29.98,EN,,0,0,0,,Question mark c x will match only constants.
Dialogue: 0,0:09:31.50,0:09:40.96,EN,,0,0,0,,So this is something which matches a constant called x.
Dialogue: 0,0:09:44.56,0:09:57.07,EN,,0,0,0,,And question mark v x will match a variable, which we call x.
Dialogue: 0,0:10:01.66,0:10:03.80,EN,,0,0,0,,This is sort of the language we're making up now.
Dialogue: 0,0:10:04.19,0:10:09.40,EN,,0,0,0,,If I match two things against each other, then they are compared element by element
Dialogue: 0,0:10:10.25,0:10:15.85,EN,,0,0,0,,But elements in the pattern may contain these syntactic variables,
Dialogue: 0,0:10:17.07,0:10:20.43,EN,,0,0,0,,which will be used to match arbitrary objects.
Dialogue: 0,0:10:22.12,0:10:29.28,EN,,0,0,0,,And we'll get that object as the value in the name x here, for example.
Dialogue: 0,0:10:31.05,0:10:37.55,EN,,0,0,0,,Now, when we make skeletons for instantiation.
Dialogue: 0,0:10:39.50,0:10:41.40,EN,,0,0,0,,Well, then we have things like this.
Dialogue: 0,0:10:42.27,0:10:46.33,EN,,0,0,0,,foo, a symbol, instantiates to itself.
Dialogue: 0,0:10:55.08,0:11:05.92,EN,,0,0,0,,Something which is a list like f of a and b, instantiates to--
Dialogue: 0,0:11:06.36,0:11:14.75,EN,,0,0,0,,well, f instantiates to a  3-list, a list of three elements,
Dialogue: 0,0:11:15.55,0:11:33.37,EN,,0,0,0,,okay, which are the results of instantiating each of f, a, and b.
Dialogue: 0,0:11:36.35,0:11:54.27,EN,,0,0,0,,And x well--we instantiate to the value of x as in the matched pattern.
Dialogue: 0,0:12:03.05,0:12:10.08,EN,,0,0,0,,So going back to the overhead here, we see -- we see that all of those kinds of objects
Dialogue: 0,0:12:10.78,0:12:16.06,EN,,0,0,0,,we see here a pattern variable which matches a constant,
Dialogue: 0,0:12:16.56,0:12:19.02,EN,,0,0,0,,a pattern variable which matches a variable,
Dialogue: 0,0:12:19.39,0:12:21.74,EN,,0,0,0,,a pattern variable which will match anything.
Dialogue: 0,0:12:22.72,0:12:24.92,EN,,0,0,0,,And if we have two instances of the same name,
Dialogue: 0,0:12:25.08,0:12:31.77,EN,,0,0,0,,like this is the derivative of the expression which is a variable only whose name will be v
Dialogue: 0,0:12:32.86,0:12:36.30,EN,,0,0,0,,with respect to some arbitrary expression which we will call v,
Dialogue: 0,0:12:36.41,0:12:38.01,EN,,0,0,0,,since this v appears twice,
Dialogue: 0,0:12:38.65,0:12:41.07,EN,,0,0,0,,we're going to want that to mean they have to be the same.
Dialogue: 0,0:12:42.68,0:12:45.00,EN,,0,0,0,,The only consistent match is that those are the same.
Dialogue: 0,0:12:45.23,0:12:47.23,EN,,0,0,0,,So here, we're making up a language.
Dialogue: 0,0:12:47.60,0:12:50.66,EN,,0,0,0,,And in fact, that's a very nice thing to be doing.
Dialogue: 0,0:12:50.66,0:12:52.60,EN,,0,0,0,,It's so much fun to make up a language.
Dialogue: 0,0:12:52.60,0:12:54.33,EN,,0,0,0,,And you do this all the time.
Dialogue: 0,0:12:54.33,0:12:56.89,EN,,0,0,0,,And the really most powerful design things you ever do
Dialogue: 0,0:12:57.23,0:13:00.20,EN,,0,0,0,,are sort of making up a language to solve problems like this.
Dialogue: 0,0:13:02.06,0:13:05.34,EN,,0,0,0,,Now, here we go back here and look at some of these rules.
Dialogue: 0,0:13:05.80,0:13:07.10,EN,,0,0,0,,Well, there's a whole set of them.
Dialogue: 0,0:13:07.10,0:13:12.43,EN,,0,0,0,,I mean, there's one for addition and one for multiplication, just like we had before.
Dialogue: 0,0:13:12.43,0:13:17.37,EN,,0,0,0,,The derivative of the product of x1 and x2 with respect to v is
Dialogue: 0,0:13:17.68,0:13:26.52,EN,,0,0,0,,the sum of the product of x1 and the derivative x2 with respect to v and the product of the derivative of x1 and x2.
Dialogue: 0,0:13:27.26,0:13:29.10,EN,,0,0,0,,And here we have exponentiation.
Dialogue: 0,0:13:29.24,0:13:32.11,EN,,0,0,0,,And, of course, we run off the end down here. We get as many as we like.
Dialogue: 0,0:13:32.70,0:13:39.10,EN,,0,0,0,,But the whole thing over here, I'm giving this--this list of rules the name "derivative rules."
Dialogue: 0,0:13:40.40,0:13:44.33,EN,,0,0,0,,What would we do with such a thing once we have it?
Dialogue: 0,0:13:45.40,0:13:47.84,EN,,0,0,0,,Well, one of the nicest ideas, first of all,
Dialogue: 0,0:13:48.44,0:13:51.68,EN,,0,0,0,,is I'm going to write for you, and we're going to play with it all day.
Dialogue: 0,0:13:52.28,0:13:57.37,EN,,0,0,0,,What I'm going to write for you is a program called simplifier,
Dialogue: 0,0:13:57.82,0:13:59.47,EN,,0,0,0,,the general-purpose simplifier.
Dialogue: 0,0:14:00.09,0:14:17.10,EN,,0,0,0,,And we're going to say something like define dsimp to be a simplifier of the derivative rules.
Dialogue: 0,0:14:23.74,0:14:28.75,EN,,0,0,0,,And what simplifier is going to do is, given a set of rules, it will produce for me a procedure
Dialogue: 0,0:14:29.32,0:14:34.59,EN,,0,0,0,,which will simplify expressions containing the things that are referred to by these rules.
Dialogue: 0,0:14:37.39,0:14:43.93,EN,,0,0,0,,So here will be a procedure constructed for your purposes to simplify things with derivatives in them
Dialogue: 0,0:14:44.59,0:14:49.56,EN,,0,0,0,,such that, after that, if we're typing at some Lisp system, and we get a prompt,
Dialogue: 0,0:14:49.88,0:15:03.93,EN,,0,0,0,,and we say dsimp, for example, of the derivative of the sum of x and y with respect to x--
Dialogue: 0,0:15:06.99,0:15:10.97,EN,,0,0,0,,note the quote here because I'm talking about the expression which is the derivative--
Dialogue: 0,0:15:13.29,0:15:17.76,EN,,0,0,0,,then I will get back as a result plus 1 0.
Dialogue: 0,0:15:19.96,0:15:24.60,EN,,0,0,0,,Because the derivative of x plus y is the derivative of x plus derivative y.
Dialogue: 0,0:15:24.60,0:15:26.22,EN,,0,0,0,,The derivative of x with respect to x is 1.
Dialogue: 0,0:15:26.38,0:15:27.82,EN,,0,0,0,,The derivative of y with respect to x is 0.
Dialogue: 0,0:15:29.42,0:15:30.46,EN,,0,0,0,,It's not what we're going to get.
Dialogue: 0,0:15:31.18,0:15:34.65,EN,,0,0,0,,I haven't put any simplification at that level-- algebraic simplification--yet.
Dialogue: 0,0:15:36.16,0:15:41.53,EN,,0,0,0,,Of course, once we have such a thing, then we can--then we can look at other rules.
Dialogue: 0,0:15:41.96,0:15:49.36,EN,,0,0,0,,So, for example, we can, if we go to the slide, OK?
Dialogue: 0,0:15:49.36,0:15:54.12,EN,,0,0,0,,Here, for example, are other rules that we might have, algebraic manipulation rules,
Dialogue: 0,0:15:56.00,0:15:58.38,EN,,0,0,0,,ones that would be used for simplifying algebraic expressions.
Dialogue: 0,0:15:59.00,0:16:02.06,EN,,0,0,0,,For example, just looking at some of these,
Dialogue: 0,0:16:03.04,0:16:09.20,EN,,0,0,0,,the left-hand side says any operator applied to a constant e1 and a constant e2
Dialogue: 0,0:16:09.32,0:16:14.51,EN,,0,0,0,,is the result of evaluating that operator on the constants e1 and e2.
Dialogue: 0,0:16:15.88,0:16:21.56,EN,,0,0,0,,Or an operator, applied to e1, any expression e1 and a constant e2,
Dialogue: 0,0:16:21.69,0:16:23.87,EN,,0,0,0,,is going to move the constant forward.
Dialogue: 0,0:16:24.52,0:16:27.68,EN,,0,0,0,,So that'll turn into the operator with e2 followed by e1.
Dialogue: 0,0:16:28.59,0:16:30.11,EN,,0,0,0,,Why I did that, I don't know.
Dialogue: 0,0:16:30.22,0:16:33.16,EN,,0,0,0,,It wouldn't work if I had division, for example.
Dialogue: 0,0:16:33.53,0:16:35.31,EN,,0,0,0,,So there's a bug in the rules, if you like.
Dialogue: 0,0:16:36.67,0:16:40.86,EN,,0,0,0,,So the sum of 0 and e is e.
Dialogue: 0,0:16:42.17,0:16:45.31,EN,,0,0,0,,The product of 1 and any expression e is e.
Dialogue: 0,0:16:46.12,0:16:49.13,EN,,0,0,0,,The product of 0 and any expression e is 0.
Dialogue: 0,0:16:49.33,0:16:52.72,EN,,0,0,0,,Just looking at some more of these rules, we could have arbitrarily complicated ones.
Dialogue: 0,0:16:53.69,0:16:54.81,EN,,0,0,0,,We could have things like
Dialogue: 0,0:16:55.36,0:17:01.69,EN,,0,0,0,,the product of the constant e1 and any constant e2 with e3
Dialogue: 0,0:17:02.35,0:17:11.96,EN,,0,0,0,,is the result of multiplying the result of multiplying now the constants e1 and e2 together and putting e3 there.
Dialogue: 0,0:17:13.36,0:17:16.76,EN,,0,0,0,,So it says combine the constants that I had,
Dialogue: 0,0:17:16.76,0:17:22.70,EN,,0,0,0,,which was if I had a product of e1 and e2 and e3 just multiply--I mean and e1 and e2 are both constants, multiply them.
Dialogue: 0,0:17:23.84,0:17:25.48,EN,,0,0,0,,And you can make up the rules as you like.
Dialogue: 0,0:17:25.79,0:17:26.94,EN,,0,0,0,,There are lots of them here.
Dialogue: 0,0:17:27.42,0:17:31.04,EN,,0,0,0,,There are things as complicated, for example, as--
Dialogue: 0,0:17:31.26,0:17:33.93,EN,,0,0,0,,oh, I suppose down here some distributive law, you see.
Dialogue: 0,0:17:33.93,0:17:38.57,EN,,0,0,0,,The product of any object c and the sum of d and e
Dialogue: 0,0:17:39.02,0:17:43.66,EN,,0,0,0,,gives the result as the same as the sum of the product of c and d and the product of c and e.
Dialogue: 0,0:17:45.31,0:17:48.67,EN,,0,0,0,,Now, what exactly these rules are doesn't very much interest me.
Dialogue: 0,0:17:49.16,0:17:52.97,EN,,0,0,0,,We're going to be writing the language that will allow us to interpret these rules
Dialogue: 0,0:17:55.50,0:17:57.48,EN,,0,0,0,,so that we can, in fact, make up whatever rules we like,
Dialogue: 0,0:17:58.35,0:18:00.14,EN,,0,0,0,,another whole language of programming.
Dialogue: 0,0:18:03.39,0:18:04.04,EN,,0,0,0,,Well, let's see.
Dialogue: 0,0:18:05.18,0:18:06.96,EN,,0,0,0,,I haven't told you how we're going to do this.
Dialogue: 0,0:18:07.53,0:18:10.06,EN,,0,0,0,,And, of course, for a while, we're going to work on that.
Dialogue: 0,0:18:10.89,0:18:15.40,EN,,0,0,0,,But there's a real question of what is--what am I going to do at all at a large scale?
Dialogue: 0,0:18:17.08,0:18:18.22,EN,,0,0,0,,How do these rules work?
Dialogue: 0,0:18:19.00,0:18:25.45,EN,,0,0,0,,How is the simplifier program going to manipulate these rules with your expression to produce a reasonable answer?
Dialogue: 0,0:18:26.22,0:18:29.85,EN,,0,0,0,,Well, first, I'd like to think about these rules as being some sort of deck of them.
Dialogue: 0,0:18:32.52,0:18:34.22,EN,,0,0,0,,So here I have a whole bunch of rules,
Dialogue: 0,0:18:42.09,0:18:44.49,EN,,0,0,0,,Each rule-- here's a rule--
Dialogue: 0,0:18:46.97,0:18:49.24,EN,,0,0,0,,has a pattern and a skeleton.
Dialogue: 0,0:18:49.72,0:18:51.36,EN,,0,0,0,,I'm trying to make up a control structure for this.
Dialogue: 0,0:18:53.37,0:18:56.56,EN,,0,0,0,,Now, what I have is a matcher,
Dialogue: 0,0:19:00.99,0:19:03.76,EN,,0,0,0,,and I have something which is an instantiater.
Dialogue: 0,0:19:09.66,0:19:12.94,EN,,0,0,0,,And I'm going to pass from the matcher to the instantiater
Dialogue: 0,0:19:14.03,0:19:17.47,EN,,0,0,0,,some set of meaning for the pattern variables,
Dialogue: 0,0:19:18.06,0:19:19.42,EN,,0,0,0,,a dictionary, I'll call it.
Dialogue: 0,0:19:20.59,0:19:21.52,EN,,0,0,0,,A dictionary,
Dialogue: 0,0:19:24.92,0:19:27.82,EN,,0,0,0,,which will say x was matched against the following subexpression
Dialogue: 0,0:19:29.04,0:19:31.31,EN,,0,0,0,,and y was matched against another following subexpression.
Dialogue: 0,0:19:32.25,0:19:36.35,EN,,0,0,0,,And from the instantiater, I will be making expressions,and they will go into the matcher.
Dialogue: 0,0:19:37.16,0:19:38.36,EN,,0,0,0,,They will be expressions.
Dialogue: 0,0:19:45.00,0:19:48.41,EN,,0,0,0,,And the patterns of the rules will be fed into the matcher,
Dialogue: 0,0:19:49.24,0:19:54.40,EN,,0,0,0,,and the skeletons from the same rule will be fed into the instantiater.
Dialogue: 0,0:19:55.21,0:19:56.62,EN,,0,0,0,,Now, this is a little complicated
Dialogue: 0,0:19:57.12,0:19:59.53,EN,,0,0,0,,because when you have something like an algebraic expression,
Dialogue: 0,0:20:00.44,0:20:03.60,EN,,0,0,0,,where  some of the rules are intended to be able to allow you to substitute equal for equal.
Dialogue: 0,0:20:04.24,0:20:05.87,EN,,0,0,0,,These are equal transformation rules.
Dialogue: 0,0:20:06.88,0:20:09.29,EN,,0,0,0,,So all subexpressions of the expression should be looked at.
Dialogue: 0,0:20:11.13,0:20:15.82,EN,,0,0,0,,You give it an expression, this thing, and the rules should be cycled around.
Dialogue: 0,0:20:16.03,0:20:19.71,EN,,0,0,0,,First of all, for every subexpression of the expression you feed in,
Dialogue: 0,0:20:20.22,0:20:22.83,EN,,0,0,0,,all of the rules must be tried and looked at.
Dialogue: 0,0:20:24.33,0:20:27.07,EN,,0,0,0,,And if any rule matches, then this process occurs.
Dialogue: 0,0:20:27.30,0:20:30.63,EN,,0,0,0,,The dictionary--the dictionary is to have some values in it.
Dialogue: 0,0:20:30.63,0:20:33.39,EN,,0,0,0,,The instantiater makes a new expression,
Dialogue: 0,0:20:33.90,0:20:39.10,EN,,0,0,0,,which is basically replaces that part of the expression that was matched in your original expression.
Dialogue: 0,0:20:40.84,0:20:44.46,EN,,0,0,0,,And then, then, of course, we're going to recheck that,
Dialogue: 0,0:20:44.75,0:20:48.11,EN,,0,0,0,,going to go around these rules again, seeing if that could be simplified further.
Dialogue: 0,0:20:49.53,0:20:53.71,EN,,0,0,0,,And then, then we're going to do that for every subexpression until the thing no longer changes.
Dialogue: 0,0:20:54.96,0:20:57.50,EN,,0,0,0,,You can think of this as sort of an organic process.
Dialogue: 0,0:20:57.83,0:21:00.20,EN,,0,0,0,,You've got some sort of stew, right?
Dialogue: 0,0:21:00.24,0:21:04.32,EN,,0,0,0,,You've got bacteria or something, or enzymes in some, in some gooey mess.
Dialogue: 0,0:21:05.63,0:21:10.50,EN,,0,0,0,,And there's these--and these enzymes change things.
Dialogue: 0,0:21:10.50,0:21:14.38,EN,,0,0,0,,They attach to your expression, change it, and then they go away.
Dialogue: 0,0:21:15.28,0:21:17.83,EN,,0,0,0,,And they have to match. The key-in-lock phenomenon.
Dialogue: 0,0:21:18.00,0:21:19.73,EN,,0,0,0,,They match, they change it, they go away.
Dialogue: 0,0:21:19.73,0:21:21.68,EN,,0,0,0,,You can imagine it as a parallel process of some sort.
Dialogue: 0,0:21:22.70,0:21:24.97,EN,,0,0,0,,So you stick an expression into this mess,
Dialogue: 0,0:21:25.80,0:21:28.00,EN,,0,0,0,,and after a while, you take it out, and it's been simplified.
Dialogue: 0,0:21:30.44,0:21:32.64,EN,,0,0,0,,And it just keeps changing until it no longer can be changed.
Dialogue: 0,0:21:33.36,0:21:38.33,EN,,0,0,0,,But these enzymes can attach to any part of the, of the expression.
Dialogue: 0,0:21:39.21,0:21:43.76,EN,,0,0,0,,OK, at this point, I'd like to stop and ask for questions.
Dialogue: 0,0:21:44.92,0:21:45.36,EN,,0,0,0,,Yes.
Dialogue: 0,0:21:45.43,0:21:52.76,EN,,0,0,0,,AUDIENCE: This implies that the matching program and the instantiation program are separate programs; is that right? Or is that-- they are.
Dialogue: 0,0:21:52.76,0:21:53.85,EN,,0,0,0,,PROFESSOR: They're separate little pieces.
Dialogue: 0,0:21:54.14,0:21:56.60,EN,,0,0,0,,They fit together in a larger structure.
Dialogue: 0,0:21:57.26,0:21:59.13,EN,,0,0,0,,AUDIENCE: So I'm going through and matching
Dialogue: 0,0:21:59.61,0:22:03.21,EN,,0,0,0,,and passing the information about what I matched to an instantiater,
Dialogue: 0,0:22:03.39,0:22:06.03,EN,,0,0,0,,which makes the changes. And then I pass that back to the matcher?
Dialogue: 0,0:22:06.11,0:22:08.49,EN,,0,0,0,,PROFESSOR: It won't make a change. It will make a new expression,
Dialogue: 0,0:22:09.61,0:22:18.43,EN,,0,0,0,,which has, which has substituted the values of the pattern variable that were matched on the left-hand side for the variables that are mentioned,
Dialogue: 0,0:22:18.99,0:22:23.80,EN,,0,0,0,,the skeleton variables or evaluation variables or whatever I called them, on the right-hand side.
Dialogue: 0,0:22:25.20,0:22:27.08,EN,,0,0,0,,AUDIENCE: And then that's passed back into the matcher?
Dialogue: 0,0:22:27.20,0:22:32.32,EN,,0,0,0,,PROFESSOR: Then this is going to go around again. This is going to go through this mess until it no longer changes.
Dialogue: 0,0:22:33.31,0:22:37.00,EN,,0,0,0,,AUDIENCE: And it seems that there would be a danger of getting into a recursive loop.
Dialogue: 0,0:22:37.20,0:22:42.00,EN,,0,0,0,,Yes, if you do not write your rules nicely, you are-- indeed,
Dialogue: 0,0:22:42.00,0:22:45.53,EN,,0,0,0,,in any programming language you invent, if it's sufficiently powerful to do anything,
Dialogue: 0,0:22:45.72,0:22:48.40,EN,,0,0,0,,you can write programs that will go into infinite loops.
Dialogue: 0,0:22:49.37,0:22:55.07,EN,,0,0,0,,And indeed, writing a program for doing algebraic manipulation so on will produce infinite loops.
Dialogue: 0,0:23:01.05,0:23:01.52,EN,,0,0,0,,Go ahead.
Dialogue: 0,0:23:01.79,0:23:05.90,EN,,0,0,0,,AUDIENCE: Some language designers feel that this feature is so important
Dialogue: 0,0:23:05.93,0:23:12.03,EN,,0,0,0,,that it should become part of the basic language, for example, scheme in this case.
Dialogue: 0,0:23:12.03,0:23:13.96,EN,,0,0,0,,What are your thoughts on--
Dialogue: 0,0:23:13.96,0:23:15.08,EN,,0,0,0,,PROFESSOR: Which language feature?
Dialogue: 0,0:23:15.79,0:23:17.26,EN,,0,0,0,,AUDIENCE: The pattern matching.
Dialogue: 0,0:23:17.26,0:23:22.03,EN,,0,0,0,,It's all application of such rules should be--
Dialogue: 0,0:23:22.03,0:23:23.70,EN,,0,0,0,,PROFESSOR: Oh, you mean like Prolog?
Dialogue: 0,0:23:23.70,0:23:26.60,EN,,0,0,0,,AUDIENCE: Like Prolog, but it becomes a more general--
Dialogue: 0,0:23:26.60,0:23:27.64,EN,,0,0,0,,PROFESSOR: It's possible.
Dialogue: 0,0:23:28.46,0:23:32.30,EN,,0,0,0,,OK, I think my feeling about that is that
Dialogue: 0,0:23:33.16,0:23:36.49,EN,,0,0,0,,I would like to teach you how to do it so you don't depend upon some language designer.
Dialogue: 0,0:23:40.92,0:23:42.75,EN,,0,0,0,,PROFESSOR: You make it yourself. You can roll your own.
Dialogue: 0,0:23:45.28,0:23:45.63,EN,,0,0,0,,Thank you.
Dialogue: 0,0:23:45.63,0:23:50.63,EN,,0,0,0,,[JESU, JOY OF MAN'S DESIRING]
Dialogue: 0,0:23:50.63,0:23:53.13,Declare,,0,0,0,,{\an2\fad(500,500)}The Structure And Interpretation of Computer Programs
Dialogue: 0,0:23:53.13,0:23:55.63,Declare,,0,0,0,,{\an2\fad(500,500)}By: Prof. Harold Abelson && Gerald Jay Sussman
Dialogue: 0,0:24:00.32,0:24:06.76,Declare,,0,0,0,,{\an2\fad(500,500)}The Structure And Interpretation of Computer Programs
Dialogue: 0,0:24:07.07,0:24:10.52,Declare,,0,0,0,,{\an2\fad(500,500)}Pattern-matching: Rule-based Substitution
Dialogue: 0,0:24:14.08,0:24:15.80,EN,,0,0,0,,Well, let's see.
Dialogue: 0,0:24:15.80,0:24:17.21,EN,,0,0,0,,Now we have to tell you how it works.
Dialogue: 0,0:24:20.00,0:24:24.11,EN,,0,0,0,,It conveniently breaks up into various pieces.
Dialogue: 0,0:24:24.80,0:24:26.54,EN,,0,0,0,,I'd like to look now at the matcher.
Dialogue: 0,0:24:28.72,0:24:31.42,EN,,0,0,0,,The matcher has the following basic structure.
Dialogue: 0,0:24:32.86,0:24:45.12,EN,,0,0,0,,It's a box that takes as its input an expression and a pattern,
Dialogue: 0,0:24:52.09,0:24:53.95,EN,,0,0,0,,and it turns out a dictionary.
Dialogue: 0,0:25:01.71,0:25:08.67,EN,,0,0,0,,A dictionary, remember, is a mapping of pattern variables to the values that were found by matching,
Dialogue: 0,0:25:09.15,0:25:11.05,EN,,0,0,0,,and it puts out another dictionary,
Dialogue: 0,0:25:18.24,0:25:25.53,EN,,0,0,0,,which is the result of augmenting this dictionary by what was found in matching this expression against this pattern.
Dialogue: 0,0:25:28.00,0:25:28.83,EN,,0,0,0,,So that's the matcher.
Dialogue: 0,0:25:33.87,0:25:36.54,EN,,0,0,0,,Now, this is a rather complicated program,
Dialogue: 0,0:25:37.20,0:25:41.58,EN,,0,0,0,,and we can look at it on the overhead over here and see,
Dialogue: 0,0:25:41.98,0:25:43.87,EN,,0,0,0,,ha ha, it's very complicated.
Dialogue: 0,0:25:44.43,0:25:45.87,EN,,0,0,0,,I just want you to look at the shape of it.
Dialogue: 0,0:25:46.78,0:25:49.85,EN,,0,0,0,,It's too complicated to look at except in pieces.
Dialogue: 0,0:25:51.72,0:25:59.24,EN,,0,0,0,,However, it's a fairly large, complicated program with a lot of sort of indented structure.
Dialogue: 0,0:26:00.09,0:26:05.28,EN,,0,0,0,,At the largest scale-- you don't try to read those characters, but at the largest scale,
Dialogue: 0,0:26:05.43,0:26:10.36,EN,,0,0,0,,you see that there is a case analysis, which is all these cases lined up.
Dialogue: 0,0:26:12.09,0:26:16.19,EN,,0,0,0,,What we're now going to do is look at this in a bit more detail,
Dialogue: 0,0:26:16.67,0:26:18.60,EN,,0,0,0,,attempting to understand how it works.
Dialogue: 0,0:26:20.08,0:26:22.35,EN,,0,0,0,,Let's go now to the first slide,
Dialogue: 0,0:26:23.55,0:26:27.93,EN,,0,0,0,,showing some of the structure of the matcher at a large scale.
Dialogue: 0,0:26:28.81,0:26:36.33,EN,,0,0,0,,And we see that the matcher, the matcher takes as its input a pattern, an expression, and a dictionary.
Dialogue: 0,0:26:38.57,0:26:40.40,EN,,0,0,0,,And there is a case analysis here,
Dialogue: 0,0:26:41.24,0:26:45.61,EN,,0,0,0,,which is made out of several cases, some of which have been left out over here,
Dialogue: 0,0:26:46.62,0:26:48.62,EN,,0,0,0,,and the general case, which I'd like you to see.
Dialogue: 0,0:26:50.52,0:26:53.28,EN,,0,0,0,,Let's consider this general case. It's a very important pattern.
Dialogue: 0,0:26:56.32,0:27:01.61,EN,,0,0,0,,The problem is that we have to examine two trees simultaneously.
Dialogue: 0,0:27:02.50,0:27:08.03,EN,,0,0,0,,One of the trees is the tree of the expression, and the other is the tree of the pattern.
Dialogue: 0,0:27:08.59,0:27:10.11,EN,,0,0,0,,We have to compare them with each other
Dialogue: 0,0:27:11.37,0:27:16.38,EN,,0,0,0,,so that the subexpressions of the expression are matched against subexpressions of the pattern.
Dialogue: 0,0:27:18.38,0:27:23.44,EN,,0,0,0,,Looking at that in a bit more detail, suppose I had a pattern, a pattern,
Dialogue: 0,0:27:23.93,0:27:31.24,EN,,0,0,0,,which was the sum of the product of a thing which we will call x
Dialogue: 0,0:27:32.44,0:27:35.53,EN,,0,0,0,,and a thing which we will call y,
Dialogue: 0,0:27:39.12,0:27:42.04,EN,,0,0,0,,and the sum of that, and the same thing we call y.
Dialogue: 0,0:27:45.21,0:27:47.53,EN,,0,0,0,,So we're looking for a sum of a product
Dialogue: 0,0:27:48.99,0:27:54.78,EN,,0,0,0,,whose second--whose second argument is the same as the second argument of the sum.
Dialogue: 0,0:27:57.02,0:27:58.84,EN,,0,0,0,,That's a thing you might be looking for.
Dialogue: 0,0:27:59.60,0:28:02.04,EN,,0,0,0,,Well, that, as a pattern, looks like this.
Dialogue: 0,0:28:03.02,0:28:04.01,EN,,0,0,0,,There is a tree,
Dialogue: 0,0:28:04.94,0:28:06.25,EN,,0,0,0,,which consists of a sum,
Dialogue: 0,0:28:08.08,0:28:20.25,EN,,0,0,0,,and a product with a pattern variable question mark x and question mark y,
Dialogue: 0,0:28:21.36,0:28:22.73,EN,,0,0,0,,and question mark y,
Dialogue: 0,0:28:24.92,0:28:26.94,EN,,0,0,0,,just looking at the same, just writing down the list structure in a different way.
Dialogue: 0,0:28:28.75,0:28:31.76,EN,,0,0,0,,Now, suppose we were matching that against an expression which matches it,
Dialogue: 0,0:28:32.49,0:28:39.85,EN,,0,0,0,,the product of 3 and x and, say, x.
Dialogue: 0,0:28:42.41,0:28:43.36,EN,,0,0,0,,That's another tree.
Dialogue: 0,0:28:44.33,0:28:56.06,EN,,0,0,0,,It's the sum of the product of 3 and x and of x.
Dialogue: 0,0:28:59.44,0:29:03.02,EN,,0,0,0,,So what I want to do is traverse these two trees simultaneously.
Dialogue: 0,0:29:04.41,0:29:07.82,EN,,0,0,0,,And what I'd like to do is walk them like this.
Dialogue: 0,0:29:08.67,0:29:12.96,EN,,0,0,0,,I'm going to say are these the same?
Dialogue: 0,0:29:12.96,0:29:14.32,EN,,0,0,0,,This is a complicated object.
Dialogue: 0,0:29:15.21,0:29:17.26,EN,,0,0,0,,Let's look at the left branches.
Dialogue: 0,0:29:17.26,0:29:18.14,EN,,0,0,0,,Well, that could be the car.
Dialogue: 0,0:29:18.56,0:29:21.21,EN,,0,0,0,,How does that look? Oh yes, the plus looks just fine.
Dialogue: 0,0:29:21.68,0:29:24.20,EN,,0,0,0,,But the next thing here is a complicated thing.
Dialogue: 0,0:29:24.20,0:29:24.84,EN,,0,0,0,,Let's look at that.
Dialogue: 0,0:29:25.20,0:29:26.80,EN,,0,0,0,,Oh yes, that's pretty fine, too.
Dialogue: 0,0:29:26.80,0:29:27.79,EN,,0,0,0,,They're both asterisks.
Dialogue: 0,0:29:28.51,0:29:30.24,EN,,0,0,0,,Now, whoops!
Dialogue: 0,0:29:30.40,0:29:33.60,EN,,0,0,0,,My pattern variable, it matches against the 3.
Dialogue: 0,0:29:34.27,0:29:35.92,EN,,0,0,0,,Remember, x equals 3 now.
Dialogue: 0,0:29:36.36,0:29:37.37,EN,,0,0,0,,That's in my dictionary,
Dialogue: 0,0:29:37.56,0:29:40.73,EN,,0,0,0,,and the dictionary's going to follow along with me: x equals three.
Dialogue: 0,0:29:41.45,0:29:45.87,EN,,0,0,0,,Ah yes, x equals 3 and y equals x, different x.
Dialogue: 0,0:29:46.83,0:29:51.20,EN,,0,0,0,,The pattern x is the expression x, the pattern y.
Dialogue: 0,0:29:53.61,0:29:57.76,EN,,0,0,0,,Oh yes, the pattern variable y, I've already got a value for it. It's x.
Dialogue: 0,0:29:58.36,0:30:00.06,EN,,0,0,0,,Is this an x? Oh yeah, sure it is.
Dialogue: 0,0:30:00.06,0:30:00.75,EN,,0,0,0,,That's fine.
Dialogue: 0,0:30:02.03,0:30:02.78,EN,,0,0,0,,Yep, done.
Dialogue: 0,0:30:03.39,0:30:08.09,EN,,0,0,0,,I now have a dictionary, which I've accumulated by making this walk.
Dialogue: 0,0:30:11.42,0:30:14.51,EN,,0,0,0,,Well, now let's look at this general case here and see how that works.
Dialogue: 0,0:30:15.88,0:30:16.51,EN,,0,0,0,,Here we have it.
Dialogue: 0,0:30:17.20,0:30:21.66,EN,,0,0,0,,I take in a pattern variable -- sorry -- a pattern, an expression, and a dictionary.
Dialogue: 0,0:30:22.38,0:30:27.50,EN,,0,0,0,,And now I'm going to do a complicated thing here, which is the general case.
Dialogue: 0,0:30:29.98,0:30:34.80,EN,,0,0,0,,The expression is made out of two parts: a left and a right half, in general.
Dialogue: 0,0:30:35.45,0:30:38.81,EN,,0,0,0,,Anything that's complicated is made out of two pieces in a Lisp system.
Dialogue: 0,0:30:40.03,0:30:41.23,EN,,0,0,0,,Well, now what do we have here?
Dialogue: 0,0:30:41.88,0:30:48.84,EN,,0,0,0,,I'm going to match the car's of the two expressions against each other with respect to the dictionary I already have,
Dialogue: 0,0:30:50.30,0:30:53.12,EN,,0,0,0,,producing a dictionary as its value,
Dialogue: 0,0:30:54.14,0:30:57.26,EN,,0,0,0,,which I will then use for matching the cdr's against each other.
Dialogue: 0,0:30:58.51,0:31:02.09,EN,,0,0,0,,So that's how the dictionary travels, threads the entire structure.
Dialogue: 0,0:31:03.66,0:31:07.53,EN,,0,0,0,,And then the result of that is the dictionary for the match of the car and the cdr,
Dialogue: 0,0:31:10.12,0:31:12.41,EN,,0,0,0,,and that's what's going to be returned as a value.
Dialogue: 0,0:31:13.61,0:31:15.84,EN,,0,0,0,,Now, at any point, a match might fail.
Dialogue: 0,0:31:16.62,0:31:18.20,EN,,0,0,0,,It may be the case, for example,
Dialogue: 0,0:31:18.36,0:31:27.18,EN,,0,0,0,,if we go back and look at an expression that doesn't quite match, like supposing this was a 4.
Dialogue: 0,0:31:29.13,0:31:34.81,EN,,0,0,0,,Well, now these two don't match any more, because the x that had to be  --
Dialogue: 0,0:31:34.93,0:31:37.34,EN,,0,0,0,,sorry, the y that had to be x here
Dialogue: 0,0:31:37.82,0:31:40.12,EN,,0,0,0,,and this y has to be 4.
Dialogue: 0,0:31:40.53,0:31:43.52,EN,,0,0,0,,But x and 4 were not the same object syntactically.
Dialogue: 0,0:31:44.59,0:31:48.81,EN,,0,0,0,,So this wouldn't match, and that would be rejected sometimes, so matches may fail.
Dialogue: 0,0:31:50.19,0:31:56.08,EN,,0,0,0,,Now, of course, because this matcher takes the dictionary from the previous match as input,
Dialogue: 0,0:31:56.52,0:31:58.28,EN,,0,0,0,,it must be able to propagate the failures.
Dialogue: 0,0:31:58.57,0:32:01.04,EN,,0,0,0,,And so that's what the first clause of this conditional does.
Dialogue: 0,0:32:03.61,0:32:08.19,EN,,0,0,0,,It's also true that if it turned out that the pattern was not atomic--
Dialogue: 0,0:32:08.50,0:32:11.45,EN,,0,0,0,,see, if the pattern was atomic, I'd go into this stuff, which we haven't looked at yet.
Dialogue: 0,0:32:12.17,0:32:13.56,EN,,0,0,0,,But if the pattern is not atomic
Dialogue: 0,0:32:15.05,0:32:19.23,EN,,0,0,0,,and the expression is atomic-- it's not made out of pieces--
Dialogue: 0,0:32:20.14,0:32:22.65,EN,,0,0,0,,then that must be a failure, and so we go over here.
Dialogue: 0,0:32:23.64,0:32:30.78,EN,,0,0,0,,If the pattern is not atomic and the pattern is not a pattern variable--I have to remind myself of that-- then we go over here.
Dialogue: 0,0:32:30.96,0:32:32.51,EN,,0,0,0,,So that's way, failures may occur.
Dialogue: 0,0:32:35.26,0:32:39.12,EN,,0,0,0,,OK, so now let's look at the insides of this thing.
Dialogue: 0,0:32:39.84,0:32:42.93,EN,,0,0,0,,Well, the first place to look is what happens if I have an atomic pattern?
Dialogue: 0,0:32:42.93,0:32:43.90,EN,,0,0,0,,That's very simple.
Dialogue: 0,0:32:43.90,0:32:46.50,EN,,0,0,0,,A pattern that's not made out of any pieces: foo.
Dialogue: 0,0:32:47.37,0:32:48.54,EN,,0,0,0,,That's a nice atomic pattern.
Dialogue: 0,0:32:49.16,0:32:51.24,EN,,0,0,0,,Well, here's what we see.
Dialogue: 0,0:32:52.08,0:32:55.82,EN,,0,0,0,,If the pattern is atomic, then if the expression is atomic,
Dialogue: 0,0:32:56.80,0:33:01.85,EN,,0,0,0,,then if they are the same thing, then the dictionary I get is the same one as I had before.
Dialogue: 0,0:33:03.08,0:33:04.00,EN,,0,0,0,,Nothing's changed.
Dialogue: 0,0:33:04.60,0:33:10.33,EN,,0,0,0,,It's just that I matched plus against plus, asterisk against asterisk, x against x.
Dialogue: 0,0:33:11.42,0:33:12.33,EN,,0,0,0,,That's all fine.
Dialogue: 0,0:33:13.07,0:33:16.81,EN,,0,0,0,,However, if the pattern is not the one which is the expression,
Dialogue: 0,0:33:17.32,0:33:21.36,EN,,0,0,0,,if I have two separate atomic objects, then it was matching plus against asterisk,
Dialogue: 0,0:33:22.44,0:33:23.40,EN,,0,0,0,,which case I fail.
Dialogue: 0,0:33:25.60,0:33:34.56,EN,,0,0,0,,Or if it turns out that the pattern is atomic but the expression is complicated, it's not atomic, then I get a failure.
Dialogue: 0,0:33:37.40,0:33:38.24,EN,,0,0,0,,That's very simple.
Dialogue: 0,0:33:38.81,0:33:43.61,EN,,0,0,0,,Now, what about the various kinds of pattern variables?
Dialogue: 0,0:33:44.09,0:33:46.54,EN,,0,0,0,,We had three kinds. I give them the names.
Dialogue: 0,0:33:47.39,0:33:52.03,EN,,0,0,0,,They're arbitrary constants, arbitrary variables, and arbitrary expressions.
Dialogue: 0,0:33:53.82,0:34:00.14,EN,,0,0,0,,A question mark x is an arbitrary expression.
Dialogue: 0,0:34:01.18,0:34:04.54,EN,,0,0,0,,A question mark cx is an arbitrary constant,
Dialogue: 0,0:34:04.73,0:34:07.29,EN,,0,0,0,,and a question mark vx is an arbitrary variable.
Dialogue: 0,0:34:08.96,0:34:09.79,EN,,0,0,0,,Well, what do we do here?
Dialogue: 0,0:34:10.51,0:34:16.94,EN,,0,0,0,,Looking at this, we see that if I have an arbitrary constant, if the pattern is an arbitrary constant,
Dialogue: 0,0:34:17.53,0:34:20.57,EN,,0,0,0,,then it had better be the case that the expression had better be a constant.
Dialogue: 0,0:34:21.48,0:34:23.53,EN,,0,0,0,,If the expression is not a constant, then that match fails.
Dialogue: 0,0:34:23.83,0:34:27.50,EN,,0,0,0,,If it is a constant, however, then I wish to extend the dictionary.
Dialogue: 0,0:34:27.50,0:34:29.69,EN,,0,0,0,,I wish to extend the dictionary
Dialogue: 0,0:34:30.70,0:34:37.76,EN,,0,0,0,,with that pattern being remembered to be that expression using the old dictionary as a starting point.
Dialogue: 0,0:34:41.16,0:34:42.75,EN,,0,0,0,,So really, for arbitrary variables,
Dialogue: 0,0:34:43.72,0:34:47.46,EN,,0,0,0,,I have to check first if the expression is a variable by matching against.
Dialogue: 0,0:34:47.46,0:34:50.09,EN,,0,0,0,,If so, it's worth extending the dictionary
Dialogue: 0,0:34:50.38,0:34:54.65,EN,,0,0,0,,so the pattern is remembered to be matched against that expression, given the original dictionary,
Dialogue: 0,0:34:55.28,0:34:56.70,EN,,0,0,0,,and this makes a new dictionary.
Dialogue: 0,0:34:58.88,0:35:04.16,EN,,0,0,0,,Now, it has to check. There's a sorts of failure inside extend dictionary, which is that--
Dialogue: 0,0:35:04.16,0:35:07.50,EN,,0,0,0,,if one of these pattern variables already has a value
Dialogue: 0,0:35:09.23,0:35:16.17,EN,,0,0,0,,and I'm trying to match the thing against something else which is not equivalent to the one that I've already matched it against once,
Dialogue: 0,0:35:16.43,0:35:18.36,EN,,0,0,0,,then a failure will come flying out of here, too.
Dialogue: 0,0:35:20.16,0:35:21.56,EN,,0,0,0,,And I will see that some time.
Dialogue: 0,0:35:22.91,0:35:29.36,EN,,0,0,0,,And finally, an expression does not have to check anything syntactic about the expression that's being matched,
Dialogue: 0,0:35:30.11,0:35:32.20,EN,,0,0,0,,so all it does is it's an extension of the dictionary.
Dialogue: 0,0:35:34.76,0:35:38.32,EN,,0,0,0,,So you've just seen a complete, very simple matcher.
Dialogue: 0,0:35:39.28,0:35:41.37,EN,,0,0,0,,Now, one of the things that's rather remarkable about this
Dialogue: 0,0:35:41.66,0:35:45.12,EN,,0,0,0,,is people pay an awful lot of money these days for someone to make
Dialogue: 0,0:35:45.46,0:35:47.52,EN,,0,0,0,,a, quote, AI expert system
Dialogue: 0,0:35:48.40,0:35:52.03,EN,,0,0,0,,that has nothing more in it than a matcher and maybe an instantiater like this.
Dialogue: 0,0:35:53.56,0:35:56.94,EN,,0,0,0,,But it's very easy to do, and now, of course, you can start up a little start-up company
Dialogue: 0,0:35:57.42,0:36:01.72,EN,,0,0,0,,and make a couple of megabucks in the next week taking some people for a ride.
Dialogue: 0,0:36:03.79,0:36:08.57,EN,,0,0,0,,I mean, 20 years ago, this was remarkable, this kind of program.
Dialogue: 0,0:36:09.74,0:36:12.81,EN,,0,0,0,,But now, this is sort of easy. You can teach it to freshmen.
Dialogue: 0,0:36:13.63,0:36:15.47,EN,,0,0,0,,Well, now there's an instantiater as well.
Dialogue: 0,0:36:20.22,0:36:23.07,EN,,0,0,0,,The problem is they're all going off and making more money than I do. Alright?
Dialogue: 0,0:36:24.97,0:36:26.59,EN,,0,0,0,,But that's always been true of universities.
Dialogue: 0,0:36:27.10,0:36:39.42,EN,,0,0,0,,As expression, the purpose of the instantiater is to make expressions given a dictionary and a skeleton.
Dialogue: 0,0:36:44.35,0:36:45.69,EN,,0,0,0,,And that's not very hard at all.
Dialogue: 0,0:36:46.60,0:36:53.36,EN,,0,0,0,,We'll see that very simply in the next, the next slide here.
Dialogue: 0,0:36:53.88,0:36:59.29,EN,,0,0,0,,To instantiate a skeleton, given a particular dictionary-- oh, this is easy.
Dialogue: 0,0:36:59.68,0:37:03.29,EN,,0,0,0,,We're going to do a recursive tree walk over the skeleton.
Dialogue: 0,0:37:04.08,0:37:08.33,EN,,0,0,0,,And for everything which is a skeleton variable-- I don't know, call it a skeleton evaluation.
Dialogue: 0,0:37:08.41,0:37:11.42,EN,,0,0,0,,That's the name and the abstract syntax that I give it in this program:
Dialogue: 0,0:37:11.60,0:37:16.46,EN,,0,0,0,,a skeleton evaluation, a thing beginning with a colon in the rules.
Dialogue: 0,0:37:18.25,0:37:24.30,EN,,0,0,0,,For anything of that case, I'm going to look up the answer in the dictionary, and we'll worry about that in a second.
Dialogue: 0,0:37:24.30,0:37:25.61,EN,,0,0,0,,Let's look at this as a whole.
Dialogue: 0,0:37:27.77,0:37:31.80,EN,,0,0,0,,Here, I have-- I'm going to instantiate a skeleton, given a dictionary.
Dialogue: 0,0:37:32.75,0:37:37.15,EN,,0,0,0,,Well, I'm going to define some internal loop right there,
Dialogue: 0,0:37:38.14,0:37:39.85,EN,,0,0,0,,and it's going to do something very simple.
Dialogue: 0,0:37:40.17,0:37:43.50,EN,,0,0,0,,Even if a skeleton--even if a skeleton is simple and atomic,
Dialogue: 0,0:37:44.60,0:37:47.45,EN,,0,0,0,,in which case it's nothing more than giving the skeleton back as an answer,
Dialogue: 0,0:37:48.84,0:37:51.87,EN,,0,0,0,,or in the general case, it's complicated,
Dialogue: 0,0:37:52.60,0:37:59.40,EN,,0,0,0,,in which case I'm going to make up the expression which is the result of instantiating--
Dialogue: 0,0:37:59.40,0:38:04.25,EN,,0,0,0,,calling this loop recursively-- instantiating the car of the skeleton and the cdr.
Dialogue: 0,0:38:04.89,0:38:06.24,EN,,0,0,0,,So here is a recursive tree walk.
Dialogue: 0,0:38:08.41,0:38:14.36,EN,,0,0,0,,However, if it turns out to be a skeleton evaluation, a colon expression in the skeleton,
Dialogue: 0,0:38:14.96,0:38:22.64,EN,,0,0,0,,then what I'm going to do is find the expression that's in the colon-- the CADR in this case.
Dialogue: 0,0:38:22.81,0:38:26.25,EN,,0,0,0,,It's a piece of abstract syntax here, so I can change my representation of rules.
Dialogue: 0,0:38:27.52,0:38:32.73,EN,,0,0,0,,I'm going to evaluate that relative to this dictionary, whatever evaluation means.
Dialogue: 0,0:38:32.90,0:38:34.65,EN,,0,0,0,,We'll find out a lot about that sometime.
Dialogue: 0,0:38:36.12,0:38:38.35,EN,,0,0,0,,And the result of that is my answer.
Dialogue: 0,0:38:39.68,0:38:43.66,EN,,0,0,0,,so. I start up this loop-- here's my initialization-- by calling it with the whole skeleton,
Dialogue: 0,0:38:44.44,0:38:47.04,EN,,0,0,0,,and this will just do a recursive decomposition into pieces.
Dialogue: 0,0:38:49.63,0:38:56.48,EN,,0,0,0,,Now, one more little bit of detail is what happens inside evaluate?
Dialogue: 0,0:38:57.18,0:38:59.07,EN,,0,0,0,,I can't tell you that in great detail.
Dialogue: 0,0:38:59.98,0:39:01.34,EN,,0,0,0,,I'll tell you a little bit of it.
Dialogue: 0,0:39:01.56,0:39:03.74,EN,,0,0,0,,Later, we're going to see--look into this in much more detail.
Dialogue: 0,0:39:05.29,0:39:10.81,EN,,0,0,0,,To evaluate some form, some expression with respect to a dictionary,
Dialogue: 0,0:39:11.90,0:39:14.17,EN,,0,0,0,,if the expression is an atomic object, well,
Dialogue: 0,0:39:15.04,0:39:16.22,EN,,0,0,0,,I'm going to go look it up.
Dialogue: 0,0:39:18.60,0:39:19.87,EN,,0,0,0,,Nothing very exciting there.
Dialogue: 0,0:39:20.57,0:39:23.66,EN,,0,0,0,,Otherwise, I'm going to do something complicated here,
Dialogue: 0,0:39:23.83,0:39:28.28,EN,,0,0,0,,which is I'm going to apply a procedure which is the result of looking up the operator part
Dialogue: 0,0:39:29.44,0:39:31.68,EN,,0,0,0,,in something that we're going to find out about someday.
Dialogue: 0,0:39:32.14,0:39:34.20,EN,,0,0,0,,I want you realize you're seeing magic now.
Dialogue: 0,0:39:34.67,0:39:38.72,EN,,0,0,0,,This magic will become clear very soon, but not today.
Dialogue: 0,0:39:40.00,0:39:46.51,EN,,0,0,0,,Then I'm looking at--looking up all the pieces, all the arguments to that in the dictionary.
Dialogue: 0,0:39:48.56,0:39:50.88,EN,,0,0,0,,So I don't want you to look at this in detail.
Dialogue: 0,0:39:51.44,0:39:53.44,EN,,0,0,0,,I want you to see that there's more going on here,
Dialogue: 0,0:39:54.17,0:39:56.75,EN,,0,0,0,,and we're going to see more about this.
Dialogue: 0,0:39:59.04,0:40:00.88,EN,,0,0,0,,But it's-- the magic is going to stop.
Dialogue: 0,0:40:02.57,0:40:06.96,EN,,0,0,0,,This part has to do with Lisp, and it's the end of that.
Dialogue: 0,0:40:10.25,0:40:13.56,EN,,0,0,0,,OK, so now we know about matching and instantiation.
Dialogue: 0,0:40:15.05,0:40:16.60,EN,,0,0,0,,Are there any questions for this segment?
Dialogue: 0,0:40:28.10,0:40:29.80,EN,,0,0,0,,AUDIENCE: I have a question.
Dialogue: 0,0:40:29.80,0:40:30.43,EN,,0,0,0,,PROFESSOR: Yes.
Dialogue: 0,0:40:30.43,0:40:32.56,EN,,0,0,0,,AUDIENCE: Is it possible to bring up a previous slide?
Dialogue: 0,0:40:33.60,0:40:35.56,EN,,0,0,0,,It's about this define match pattern.
Dialogue: 0,0:40:36.16,0:40:40.76,EN,,0,0,0,,PROFESSOR: Yes. You'd like to see the overall slide define match pattern.
Dialogue: 0,0:40:40.76,0:40:43.06,EN,,0,0,0,,Can somebody put up the -- no, the overhead.
Dialogue: 0,0:40:43.06,0:40:45.16,EN,,0,0,0,,That's the biggest scale one.
Dialogue: 0,0:40:45.31,0:40:46.40,EN,,0,0,0,,What part would you like to see?
Dialogue: 0,0:40:46.76,0:40:49.96,EN,,0,0,0,,AUDIENCE: Well, the top would be fine.
Dialogue: 0,0:40:49.96,0:40:53.76,EN,,0,0,0,,Any of the parts where you're passing failed.
Dialogue: 0,0:40:54.52,0:40:55.21,EN,,0,0,0,,PROFESSOR: Yes.
Dialogue: 0,0:40:55.64,0:40:59.33,EN,,0,0,0,,AUDIENCE: The idea is to pass failed back to the dictionary; is that right?
Dialogue: 0,0:40:59.33,0:41:04.25,EN,,0,0,0,,PROFESSOR: The dictionary is the answer to a match, right?
Dialogue: 0,0:41:05.16,0:41:09.80,EN,,0,0,0,,And it is either some mapping
Dialogue: 0,0:41:11.07,0:41:14.03,EN,,0,0,0,,or there's no match. It doesn't match.
Dialogue: 0,0:41:14.46,0:41:14.97,EN,,0,0,0,,AUDIENCE: Right.
Dialogue: 0,0:41:15.26,0:41:17.83,EN,,0,0,0,,PROFESSOR: So what you're seeing over here is, in fact,
Dialogue: 0,0:41:17.83,0:41:22.60,EN,,0,0,0,,because the fact that a match may have another match pass in the dictionary,
Dialogue: 0,0:41:22.80,0:41:24.65,EN,,0,0,0,,as you see in the general case down here.
Dialogue: 0,0:41:25.12,0:41:27.93,EN,,0,0,0,,Here's the general case where a match passes another match to the dictionary.
Dialogue: 0,0:41:28.14,0:41:34.16,EN,,0,0,0,,When I match the cdr's, I match them in the dictionary that is resulting from matching the car's.
Dialogue: 0,0:41:36.06,0:41:37.08,EN,,0,0,0,,OK, that's what I have here.
Dialogue: 0,0:41:37.29,0:41:40.30,EN,,0,0,0,,So because of that, if the match of the car's fails,
Dialogue: 0,0:41:41.23,0:41:45.44,EN,,0,0,0,,then it may be necessary that the match of the cdr's propagates that failure,
Dialogue: 0,0:41:45.95,0:41:46.96,EN,,0,0,0,,and that's what the first line is.
Dialogue: 0,0:41:48.26,0:41:51.73,EN,,0,0,0,,AUDIENCE: OK, well, I'm still unclear what matches--
Dialogue: 0,0:41:51.73,0:41:54.24,EN,,0,0,0,,what comes out of one instance of the match?
Dialogue: 0,0:41:54.73,0:41:56.00,EN,,0,0,0,,PROFESSOR: One of two possibilities.
Dialogue: 0,0:41:56.33,0:41:59.15,EN,,0,0,0,,Either the symbol failed, which means there is no match.
Dialogue: 0,0:41:59.53,0:41:59.93,EN,,0,0,0,,AUDIENCE: Right.
Dialogue: 0,0:41:59.93,0:42:03.87,EN,,0,0,0,,PROFESSOR: Or some mapping, which is an abstract thing right now,
Dialogue: 0,0:42:04.16,0:42:05.68,EN,,0,0,0,,and you should know about the structure of it,
Dialogue: 0,0:42:06.49,0:42:13.96,EN,,0,0,0,,which relates the pattern variables to their values as picked up in the match.
Dialogue: 0,0:42:14.68,0:42:16.70,EN,,0,0,0,,AUDIENCE: OK, so it is--
Dialogue: 0,0:42:16.80,0:42:18.57,EN,,0,0,0,,PROFESSOR: That's constructed by extend dictionary.
Dialogue: 0,0:42:18.80,0:42:28.54,EN,,0,0,0,,AUDIENCE: So the recursive nature brings about the fact that if ever a failed gets passed out of any calling of match,
Dialogue: 0,0:42:28.68,0:42:30.30,EN,,0,0,0,,then the first condition will pick it up--
Dialogue: 0,0:42:30.40,0:42:33.56,EN,,0,0,0,,PROFESSOR: And just propagate it along without any further ado, right.
Dialogue: 0,0:42:33.56,0:42:34.83,EN,,0,0,0,,AUDIENCE: Oh, right.
Dialogue: 0,0:42:35.50,0:42:37.36,EN,,0,0,0,,PROFESSOR: That's just the fastest way to get that failure out of there.
Dialogue: 0,0:42:42.86,0:42:43.60,EN,,0,0,0,,Yes.
Dialogue: 0,0:42:43.84,0:42:47.23,EN,,0,0,0,,AUDIENCE: If I don't fail, that means that I've matched a pattern,
Dialogue: 0,0:42:47.84,0:42:53.00,EN,,0,0,0,,and I run the procedure extend dict and then pass in the pattern in the expression.
Dialogue: 0,0:42:55.21,0:42:58.43,EN,,0,0,0,,But the substitution will not be made at that point; is that right?
Dialogue: 0,0:42:58.43,0:42:59.03,EN,,0,0,0,,I'm just--
Dialogue: 0,0:42:59.03,0:42:59.46,EN,,0,0,0,,PROFESSOR: No, no.
Dialogue: 0,0:42:59.46,0:43:02.40,EN,,0,0,0,,There's no substitution being there because there's no skeleton to be substituted in.
Dialogue: 0,0:43:02.40,0:43:03.06,EN,,0,0,0,,AUDIENCE: Right. So
Dialogue: 0,0:43:03.06,0:43:07.16,EN,,0,0,0,,PROFESSOR: All you've got there is we're making up the dictionary for later substitution.
Dialogue: 0,0:43:08.25,0:43:12.43,EN,,0,0,0,,AUDIENCE: And what would the dictionary look like? Is it ordered pairs?
Dialogue: 0,0:43:12.72,0:43:15.96,EN,,0,0,0,,PROFESSOR: Ahhhhh, That's--that's not told to you.
Dialogue: 0,0:43:15.96,0:43:16.89,EN,,0,0,0,,We're being abstract.
Dialogue: 0,0:43:17.06,0:43:17.56,EN,,0,0,0,,AUDIENCE: OK.
Dialogue: 0,0:43:17.56,0:43:18.90,EN,,0,0,0,,PROFESSOR: Why do you want to know?
Dialogue: 0,0:43:18.90,0:43:21.64,EN,,0,0,0,,What it is, it's a function. It's a function.
Dialogue: 0,0:43:21.69,0:43:22.33,EN,,0,0,0,,AUDIENCE: Well, the reason I want to know is--
Dialogue: 0,0:43:22.33,0:43:24.17,EN,,0,0,0,,PROFESSOR: A function abstractly is a set of ordered pairs.
Dialogue: 0,0:43:25.12,0:43:28.44,EN,,0,0,0,,It could be implemented as a set of list pairs.
Dialogue: 0,0:43:29.06,0:43:32.43,EN,,0,0,0,,It could be implemented as some fancy table mechanism.
Dialogue: 0,0:43:32.56,0:43:34.16,EN,,0,0,0,,It could be implemented as a function.
Dialogue: 0,0:43:35.80,0:43:37.40,EN,,0,0,0,,And somehow, I'm building up a function.
Dialogue: 0,0:43:39.02,0:43:39.87,EN,,0,0,0,,But I'm not telling you.
Dialogue: 0,0:43:40.84,0:43:43.08,EN,,0,0,0,,That's up to George, who's going to build that later.
Dialogue: 0,0:43:49.56,0:43:52.06,EN,,0,0,0,,I know you really badly want to write concrete things.
Dialogue: 0,0:43:52.36,0:43:54.19,EN,,0,0,0,,I'm not going to let you do that.
Dialogue: 0,0:43:54.43,0:43:59.23,EN,,0,0,0,,AUDIENCE: Well, let me at least ask, what is the important information there that's being passed to extend dict?
Dialogue: 0,0:43:59.74,0:44:02.08,EN,,0,0,0,,I want to pass the pattern I found--
Dialogue: 0,0:44:02.73,0:44:04.83,EN,,0,0,0,,PROFESSOR: Yes. The pattern that's matched against the expression.
Dialogue: 0,0:44:04.83,0:44:09.30,EN,,0,0,0,,You want to have the pattern, which happens to be in those cases pattern variables, right?
Dialogue: 0,0:44:09.85,0:44:12.89,EN,,0,0,0,,All of those three cases for extend dict are pattern variables.
Dialogue: 0,0:44:13.20,0:44:13.50,EN,,0,0,0,,AUDIENCE: Right.
Dialogue: 0,0:44:14.48,0:44:18.75,EN,,0,0,0,,PROFESSOR: So you have a pattern variable that is to be given a value in a dictionary.
Dialogue: 0,0:44:19.45,0:44:22.11,EN,,0,0,0,,PROFESSOR: The value is the expression that it matched against.
Dialogue: 0,0:44:23.31,0:44:29.63,EN,,0,0,0,,The dictionary is the set of things I've already figured out that I have memorized or learned.
Dialogue: 0,0:44:30.54,0:44:34.41,EN,,0,0,0,,And I am going to make a new dictionary, which is extended from the original one
Dialogue: 0,0:44:35.12,0:44:38.35,EN,,0,0,0,,by having that pattern variable have a value with the new dictionary.
Dialogue: 0,0:44:39.98,0:44:43.73,EN,,0,0,0,,AUDIENCE: I guess what I don't understand is why can't the substitution be made right as soon as you find--
Dialogue: 0,0:44:43.73,0:44:44.80,EN,,0,0,0,,PROFESSOR: How do I know what I'm going to substitute?
Dialogue: 0,0:44:44.81,0:44:46.62,EN,,0,0,0,,I don't know anything about this skeleton.
Dialogue: 0,0:44:47.58,0:44:49.66,EN,,0,0,0,,This pattern, this matcher is an independent unit.
Dialogue: 0,0:44:49.66,0:44:51.00,EN,,0,0,0,,AUDIENCE: Oh, I see. OK.
Dialogue: 0,0:44:51.00,0:44:51.50,EN,,0,0,0,,PROFESSOR: Right?
Dialogue: 0,0:44:51.50,0:44:51.90,EN,,0,0,0,,AUDIENCE: Yeah.
Dialogue: 0,0:44:51.90,0:44:57.23,EN,,0,0,0,,PROFESSOR: I take the matcher. I apply the matcher. If it matches, then it was worth doing instantiation.
Dialogue: 0,0:44:58.20,0:44:59.50,EN,,0,0,0,,AUDIENCE: OK, good.
Dialogue: 0,0:45:00.54,0:45:03.88,EN,,0,0,0,,AUDIENCE: Can you just do that answer again using that example on the board?
Dialogue: 0,0:45:04.89,0:45:06.93,EN,,0,0,0,,You know, what you just passed back to the matcher.
Dialogue: 0,0:45:06.93,0:45:08.00,EN,,0,0,0,,PROFESSOR: Oh yes. OK, yes.
Dialogue: 0,0:45:08.26,0:45:09.74,EN,,0,0,0,,You're looking at this example.
Dialogue: 0,0:45:10.67,0:45:15.45,EN,,0,0,0,,At this point when I'm traversing this structure, I get to here: x.
Dialogue: 0,0:45:16.67,0:45:20.54,EN,,0,0,0,,I have some dictionary, presumably an empty dictionary at this point if this is the whole expression.
Dialogue: 0,0:45:21.56,0:45:25.36,EN,,0,0,0,,So I have an empty dictionary, and I've matched x against 3.
Dialogue: 0,0:45:26.62,0:45:33.60,EN,,0,0,0,,So now, after this point,the dictionary contains x is 3, OK?
Dialogue: 0,0:45:33.64,0:45:36.09,EN,,0,0,0,,Now, I continue walking along here. I see y.
Dialogue: 0,0:45:36.89,0:45:39.20,EN,,0,0,0,,Now, this is a particular x, a pattern x.
Dialogue: 0,0:45:39.79,0:45:41.37,EN,,0,0,0,,I see y, a pattern y.
Dialogue: 0,0:45:42.17,0:45:47.74,EN,,0,0,0,,The dictionary says, oh yes, the pattern y is the symbol x
Dialogue: 0,0:45:48.99,0:45:51.20,EN,,0,0,0,,because I've gota match there.
Dialogue: 0,0:45:52.43,0:45:54.52,EN,,0,0,0,,So the dictionary now contains at this point two entries.
Dialogue: 0,0:45:55.45,0:45:59.90,EN,,0,0,0,,The pattern x is 3, and the pattern y is the expression x.
Dialogue: 0,0:46:01.95,0:46:04.11,EN,,0,0,0,,Now, I get that, I can walk along further.
Dialogue: 0,0:46:04.23,0:46:07.45,EN,,0,0,0,,I say, oh, pattern y also wants to be 4.
Dialogue: 0,0:46:08.06,0:46:10.65,EN,,0,0,0,,But that isn't possible, producing a failure.
Dialogue: 0,0:46:14.30,0:46:15.48,EN,,0,0,0,,Thank you. Let's take a break.
Dialogue: 0,0:46:16.76,0:46:25.02,EN,,0,0,0,,[JESU, JOY OF MAN'S DESIRING]
Dialogue: 0,0:46:25.07,0:46:27.45,Declare,,0,0,0,,{\an2\fad(500,500)}The Structure And Interpretation of Computer Programs
Dialogue: 0,0:46:27.47,0:46:30.00,Declare,,0,0,0,,{\an2\fad(500,500)}By: Prof. Harold Abelson && Gerald Jay Sussman
Dialogue: 0,0:46:48.19,0:46:54.75,Declare,,0,0,0,,{\an2\fad(500,500)}The Structure And Interpretation of Computer Programs
Dialogue: 0,0:46:55.20,0:46:58.04,Declare,,0,0,0,,{\an2\fad(500,500)}Pattern-matching: Rule-based Substitution
Dialogue: 0,0:47:02.38,0:47:05.68,EN,,0,0,0,,OK, you're seeing your first very big and hairy program.
Dialogue: 0,0:47:07.34,0:47:09.90,EN,,0,0,0,,Now, of course, one of the goals of this subject
Dialogue: 0,0:47:09.90,0:47:12.97,EN,,0,0,0,,is to get you to be able to read something like this and not be afraid of it.
Dialogue: 0,0:47:13.76,0:47:16.33,EN,,0,0,0,,This one's only about four pages of code.
Dialogue: 0,0:47:17.08,0:47:19.23,EN,,0,0,0,,By the end of the subject, I hope a 50-page program
Dialogue: 0,0:47:20.27,0:47:21.80,EN,,0,0,0,,will not look particularly frightening.
Dialogue: 0,0:47:22.97,0:47:28.20,EN,,0,0,0,,But I don't expect-- and I don't want you to think that I expect you to be getting it as it's coming out.
Dialogue: 0,0:47:29.20,0:47:31.70,EN,,0,0,0,,You're supposed to feel the flavor of this, OK?
Dialogue: 0,0:47:31.70,0:47:34.83,EN,,0,0,0,,And then you're supposed to think about it because it is a big program.
Dialogue: 0,0:47:35.32,0:47:38.92,EN,,0,0,0,,There's a lot of stuff inside this program.
Dialogue: 0,0:47:41.24,0:47:46.03,EN,,0,0,0,,Now, I've told you about the language we're implementing, the pattern match substitution language.
Dialogue: 0,0:47:46.81,0:47:47.64,EN,,0,0,0,,I showed you some rules.
Dialogue: 0,0:47:48.36,0:47:51.24,EN,,0,0,0,,And I've told you about matching and instantiation,
Dialogue: 0,0:47:51.55,0:47:53.32,EN,,0,0,0,,which are the two halves of how a rule works.
Dialogue: 0,0:47:54.24,0:47:56.35,EN,,0,0,0,,Now we have to understand the control structure
Dialogue: 0,0:47:56.86,0:48:00.32,EN,,0,0,0,,by which the rules are applied to the expressions
Dialogue: 0,0:48:01.08,0:48:03.84,EN,,0,0,0,,so as to do algebraic simplification.
Dialogue: 0,0:48:06.92,0:48:09.58,EN,,0,0,0,,Now, that's also a big complicated mess.
Dialogue: 0,0:48:12.09,0:48:19.48,EN,,0,0,0,,The problem is that there is a variety of interlocking, interwoven loops, if you will, involved in this.
Dialogue: 0,0:48:20.24,0:48:26.99,EN,,0,0,0,,For one thing, I have to apply-- I have to examine every subexpression of my expression that I'm trying to simplify.
Dialogue: 0,0:48:29.00,0:48:29.93,EN,,0,0,0,,That we know how to do.
Dialogue: 0,0:48:29.93,0:48:36.24,EN,,0,0,0,,It's a car cdr recursion of some sort, or something like that, and some sort of tree walk.
Dialogue: 0,0:48:37.44,0:48:38.59,EN,,0,0,0,,And that's going to be happening.
Dialogue: 0,0:48:38.84,0:48:42.46,EN,,0,0,0,,Now, for every such place, every node that I get to
Dialogue: 0,0:48:43.47,0:48:48.76,EN,,0,0,0,,in doing my traversal of the expression I'm trying to simplify,
Dialogue: 0,0:48:49.20,0:48:51.07,EN,,0,0,0,,I want to apply all of the rules.
Dialogue: 0,0:48:53.42,0:48:55.08,EN,,0,0,0,,Every rule is going to look at every node.
Dialogue: 0,0:48:56.00,0:48:57.92,EN,,0,0,0,,I'm going to rotate the rules around.
Dialogue: 0,0:49:01.66,0:49:05.48,EN,,0,0,0,,Now, either a rule will or will not match.
Dialogue: 0,0:49:07.50,0:49:10.62,EN,,0,0,0,,If the rule does not match, then it's not very interesting.
Dialogue: 0,0:49:12.28,0:49:19.34,EN,,0,0,0,,If the rule does match, then I'm going to replace that node in the expression by an alternate expression.
Dialogue: 0,0:49:20.08,0:49:22.89,EN,,0,0,0,,I'm actually going to make a new expression, which contains--
Dialogue: 0,0:49:23.55,0:49:28.65,EN,,0,0,0,,everything contains that new value, the result of substituting into the skeleton,
Dialogue: 0,0:49:29.21,0:49:31.92,EN,,0,0,0,,instantiating the skeleton for that rule at this level.
Dialogue: 0,0:49:32.72,0:49:37.37,EN,,0,0,0,,But no one knows whether that thing that I instantiated there is in simplified form.
Dialogue: 0,0:49:38.75,0:49:43.82,EN,,0,0,0,,So we're going to have to simplify that, somehow to call the simplifier on the thing that I just constructed.
Dialogue: 0,0:49:46.12,0:49:50.36,EN,,0,0,0,,And then when that's done, then I sort of can build that into the expression I want as my answer.
Dialogue: 0,0:49:51.80,0:49:57.45,EN,,0,0,0,,Now, there is a basic idea here, which I will call a garbage- in, garbage-out simplifier.
Dialogue: 0,0:50:01.47,0:50:02.75,EN,,0,0,0,,It's a kind of recursive simplifier.
Dialogue: 0,0:50:03.58,0:50:08.84,EN,,0,0,0,,And what happens is the way simplify something is that simple objects like variables are simple.
Dialogue: 0,0:50:10.78,0:50:13.28,EN,,0,0,0,,Compound objects, well, I don't know.
Dialogue: 0,0:50:14.09,0:50:16.56,EN,,0,0,0,,What I'm going to do is I'm going to build up from simple objects,
Dialogue: 0,0:50:16.86,0:50:21.23,EN,,0,0,0,,trying to make simple things by assuming that the pieces they're made out of are simple.
Dialogue: 0,0:50:24.60,0:50:25.61,EN,,0,0,0,,That's what's happening here.
Dialogue: 0,0:50:27.82,0:50:33.12,EN,,0,0,0,,Well, now, if we look at the first slide-- no, overhead, overhead.
Dialogue: 0,0:50:33.88,0:50:37.13,EN,,0,0,0,,If we look at the overhead, we see a very complicated program like we saw before for the matcher,
Dialogue: 0,0:50:37.53,0:50:39.95,EN,,0,0,0,,so complicated that you can't read it like that.
Dialogue: 0,0:50:41.92,0:50:43.61,EN,,0,0,0,,I just want you to get the feel of the shape of it,
Dialogue: 0,0:50:44.44,0:50:50.01,EN,,0,0,0,,and the shape of it is that this program has various subprograms in it.
Dialogue: 0,0:50:52.11,0:50:57.56,EN,,0,0,0,,One of them--this part is the part for traversing the expression,
Dialogue: 0,0:50:58.97,0:51:01.36,EN,,0,0,0,,and this part is the part for trying rules.
Dialogue: 0,0:51:02.52,0:51:05.60,EN,,0,0,0,,Now, of course, we can look at that in some more detail.
Dialogue: 0,0:51:06.89,0:51:11.80,EN,,0,0,0,,Let's look at--let's look at the first transparency, right?
Dialogue: 0,0:51:13.40,0:51:17.36,EN,,0,0,0,,The simplifier is made out of several parts.
Dialogue: 0,0:51:17.96,0:51:22.92,EN,,0,0,0,,Now, remember at the very beginning, the simplifier is the thing which takes a rules-- a set of rules
Dialogue: 0,0:51:23.92,0:51:27.20,EN,,0,0,0,,and produces a program which will simplify it relative to them.
Dialogue: 0,0:51:30.04,0:51:32.60,EN,,0,0,0,,So here we have our simplifier.
Dialogue: 0,0:51:33.48,0:51:34.81,EN,,0,0,0,,It takes a rule set.
Dialogue: 0,0:51:36.16,0:51:38.68,EN,,0,0,0,,And in the context where that rule set is defined,
Dialogue: 0,0:51:39.24,0:51:41.48,EN,,0,0,0,,there are various other definitions that are done here.
Dialogue: 0,0:51:42.33,0:51:46.20,EN,,0,0,0,,And then the result of this simplifier procedure is,
Dialogue: 0,0:51:46.41,0:51:50.80,EN,,0,0,0,,in fact, one of the procedures that was defined. Simplify-exp.
Dialogue: 0,0:51:52.46,0:51:57.71,EN,,0,0,0,,What I'm returning as the value of calling the simplifier on a set of rules
Dialogue: 0,0:51:58.17,0:52:03.21,EN,,0,0,0,,is a procedure the simplify exp procedure, which is defined in that context,
Dialogue: 0,0:52:05.23,0:52:08.83,EN,,0,0,0,,which is a simplification procedure appropriate for using those set of rules.
Dialogue: 0,0:52:15.04,0:52:15.96,EN,,0,0,0,,That's what I have there.
Dialogue: 0,0:52:17.45,0:52:21.79,EN,,0,0,0,,Now, the first two of these procedures, this one and this one,
Dialogue: 0,0:52:22.48,0:52:25.74,EN,,0,0,0,,are together going to be the recursive traversal of an expression.
Dialogue: 0,0:52:26.97,0:52:30.20,EN,,0,0,0,,This one is the general simplification for any expression,
Dialogue: 0,0:52:30.94,0:52:33.23,EN,,0,0,0,,and this is the thing which simplifies a list of parts of an expression.
Dialogue: 0,0:52:35.53,0:52:36.08,EN,,0,0,0,,Nothing more.
Dialogue: 0,0:52:37.04,0:52:39.90,EN,,0,0,0,,For each of those, we're going to do something complicated, which involves trying the rules.
Dialogue: 0,0:52:40.32,0:52:41.71,EN,,0,0,0,,Now, we should look at the various parts.
Dialogue: 0,0:52:45.76,0:52:48.08,EN,,0,0,0,,Well let's look first at the recursive traversal of an expression.
Dialogue: 0,0:52:48.57,0:52:51.68,EN,,0,0,0,,And this is done in a sort of simple way.
Dialogue: 0,0:52:54.28,0:52:57.93,EN,,0,0,0,,This is a little nest of recursive procedures.
Dialogue: 0,0:52:59.42,0:53:01.77,EN,,0,0,0,,And what we have here are two procedures--
Dialogue: 0,0:53:02.59,0:53:05.20,EN,,0,0,0,,one for simplifying an expression,
Dialogue: 0,0:53:06.11,0:53:08.16,EN,,0,0,0,,and one for simplifying parts of an expression.
Dialogue: 0,0:53:09.44,0:53:10.97,EN,,0,0,0,,And the way this works is very simple.
Dialogue: 0,0:53:12.12,0:53:16.86,EN,,0,0,0,,If the expression I'm trying to simplify is a compound expression,
Dialogue: 0,0:53:17.04,0:53:18.32,EN,,0,0,0,,I'm going to simplify all the parts of it.
Dialogue: 0,0:53:19.95,0:53:22.32,EN,,0,0,0,,And that's calling--that procedure, simplify parts,
Dialogue: 0,0:53:22.33,0:53:25.74,EN,,0,0,0,,is going to make up a new expression with all the parts simplified,
Dialogue: 0,0:53:26.00,0:53:28.64,EN,,0,0,0,,which I'm then going to try the rules on over here.
Dialogue: 0,0:53:30.86,0:53:34.22,EN,,0,0,0,,If it turns out that the expression is not compound, if it's simple,
Dialogue: 0,0:53:34.76,0:53:37.13,EN,,0,0,0,,like just a symbol or something like pi,
Dialogue: 0,0:53:38.16,0:53:39.79,EN,,0,0,0,,then in any case, I'm going to try the rules on it
Dialogue: 0,0:53:40.03,0:53:47.56,EN,,0,0,0,,because it might be that I want in my set of rules to expand pi to 3.14159265358979,dot, dot, dot.
Dialogue: 0,0:53:48.46,0:53:49.08,EN,,0,0,0,,But I may not.
Dialogue: 0,0:53:50.11,0:53:51.52,EN,,0,0,0,,But there is no reason not to do it.
Dialogue: 0,0:53:52.75,0:53:57.53,EN,,0,0,0,,Now, if I want to simplify the parts, well, that's easy too.
Dialogue: 0,0:53:58.99,0:54:02.88,EN,,0,0,0,,Either the expression is an empty one, there's no more parts,
Dialogue: 0,0:54:03.71,0:54:05.08,EN,,0,0,0,,in which case I have the empty expression.
Dialogue: 0,0:54:05.72,0:54:10.52,EN,,0,0,0,,Otherwise, I'm going to make a new expression by cons,
Dialogue: 0,0:54:11.21,0:54:14.27,EN,,0,0,0,,which is the result of simplifying the first part of the expression, the car,
Dialogue: 0,0:54:15.42,0:54:17.39,EN,,0,0,0,,and simplifying the rest of the expression, which is the cdr.
Dialogue: 0,0:54:21.08,0:54:23.88,EN,,0,0,0,,Now, the reason why I'm showing you this sort of stuff this way
Dialogue: 0,0:54:24.88,0:54:30.12,EN,,0,0,0,,is because I want you get the feeling for the various patterns that are very important when writing programs.
Dialogue: 0,0:54:32.20,0:54:34.00,EN,,0,0,0,,And this could be written a different way.
Dialogue: 0,0:54:34.00,0:54:36.99,EN,,0,0,0,,There's another way to write simplified expressions so there would be only one of them.
Dialogue: 0,0:54:37.72,0:54:39.63,EN,,0,0,0,,There would only be one little procedure here.
Dialogue: 0,0:54:39.63,0:54:42.36,EN,,0,0,0,,Let me just write that on the blackboard to give you a feeling for that.
Dialogue: 0,0:54:49.71,0:54:51.90,EN,,0,0,0,,This is in another idiom, if you will.
Dialogue: 0,0:54:59.30,0:55:03.13,EN,,0,0,0,,To simplify an expression called exp, what am I going to do?
Dialogue: 0,0:55:03.21,0:55:10.14,EN,,0,0,0,,I'm going to try the rules on the following situation.
Dialogue: 0,0:55:11.12,0:55:15.72,EN,,0,0,0,,If-- on the following expression-- compound, just like we had before.
Dialogue: 0,0:55:21.52,0:55:24.27,EN,,0,0,0,,If the expression is compound, well, what am I going to do?
Dialogue: 0,0:55:24.53,0:55:25.40,EN,,0,0,0,,I'm going to simplify all the parts.
Dialogue: 0,0:55:26.01,0:55:27.80,EN,,0,0,0,,But I already have a cdr recursion,
Dialogue: 0,0:55:30.25,0:55:33.18,EN,,0,0,0,,common pattern of usage, which has been captured as a high-order procedure.
Dialogue: 0,0:55:34.09,0:55:34.46,EN,,0,0,0,,It's called map.
Dialogue: 0,0:55:36.08,0:55:36.88,EN,,0,0,0,,So I'll just write that here.
Dialogue: 0,0:55:37.16,0:55:48.03,EN,,0,0,0,,Map simplify the expression, all the parts of the expression.
Dialogue: 0,0:55:49.00,0:55:54.59,EN,,0,0,0,,This says apply the simplification operation, which is this one, every part of the expression,
Dialogue: 0,0:55:55.34,0:55:57.34,EN,,0,0,0,,and then that cons those up into a list.
Dialogue: 0,0:56:00.92,0:56:04.38,EN,,0,0,0,,It's every element of the list which the expression is assumed to be made out of,
Dialogue: 0,0:56:05.45,0:56:08.23,EN,,0,0,0,,and otherwise, I have the expression.
Dialogue: 0,0:56:09.05,0:56:12.36,EN,,0,0,0,,So I don't need the helper procedure, simplify parts,
Dialogue: 0,0:56:12.64,0:56:13.48,EN,,0,0,0,,because that's really this.
Dialogue: 0,0:56:15.47,0:56:17.05,EN,,0,0,0,,So sometimes, you just write it this way.
Dialogue: 0,0:56:17.84,0:56:18.70,EN,,0,0,0,,It doesn't matter very much.
Dialogue: 0,0:56:21.16,0:56:26.27,EN,,0,0,0,,Well, now let's take a look at-- let's just look at how you try rules.
Dialogue: 0,0:56:27.70,0:56:31.60,EN,,0,0,0,,If you look at this slide, we see this is a complicated mess also.
Dialogue: 0,0:56:33.68,0:56:35.28,EN,,0,0,0,,I'm trying rules on an expression.
Dialogue: 0,0:56:36.36,0:56:39.96,EN,,0,0,0,,It turns out the expression I'm trying it on is some subexpression now of the expression I started with.
Dialogue: 0,0:56:40.43,0:56:43.88,EN,,0,0,0,,Because the thing I just arranged allowed us to try every subexpression.
Dialogue: 0,0:56:46.11,0:56:51.90,EN,,0,0,0,,So now here we're taking in a subexpression of the expression we started with. That's what this is.
Dialogue: 0,0:56:52.49,0:56:57.71,EN,,0,0,0,,And what we're going to define here is a procedure called scan, which is going to try every rule.
Dialogue: 0,0:56:58.72,0:57:00.33,EN,,0,0,0,,And we're going to start it up on the whole set of rules.
Dialogue: 0,0:57:01.92,0:57:07.77,EN,,0,0,0,,This is going to go cdr-ing down the rules, if you will, looking for a rule to apply.
Dialogue: 0,0:57:09.37,0:57:11.96,EN,,0,0,0,,And when it finds one, it'll do the job.
Dialogue: 0,0:57:14.09,0:57:16.41,EN,,0,0,0,,Well, let's take a look at how try rules works.
Dialogue: 0,0:57:17.74,0:57:21.02,EN,,0,0,0,,It's very simple: the scan rules. Scan rules, the way of scanning.
Dialogue: 0,0:57:21.96,0:57:23.26,EN,,0,0,0,,Well, is it so simple?
Dialogue: 0,0:57:23.26,0:57:24.51,EN,,0,0,0,,It's a big program, of course.
Dialogue: 0,0:57:25.55,0:57:28.57,EN,,0,0,0,,We take a bunch of rules, which is a sublist of the list of rules.
Dialogue: 0,0:57:30.75,0:57:35.13,EN,,0,0,0,,We've tried some of them already, and they've not been appropriate, so we get to some here.
Dialogue: 0,0:57:35.87,0:57:36.30,EN,,0,0,0,,next one.
Dialogue: 0,0:57:36.40,0:57:37.63,EN,,0,0,0,,If there are no more rules,
Dialogue: 0,0:57:37.90,0:57:40.84,EN,,0,0,0,,well then, there's nothing I can do with this expression, and it's simplified.
Dialogue: 0,0:57:42.35,0:57:47.26,EN,,0,0,0,,However, if it turns out that there are still rules to be done,
Dialogue: 0,0:57:48.01,0:57:51.58,EN,,0,0,0,,then let's match the pattern of the first rule
Dialogue: 0,0:57:52.20,0:57:55.40,EN,,0,0,0,,against the expression using the empty dictionary to start with
Dialogue: 0,0:57:57.07,0:57:58.84,EN,,0,0,0,,and use that as the dictionary.
Dialogue: 0,0:58:00.32,0:58:03.74,EN,,0,0,0,,If that happens to be a failure, try the rest of the rules.
Dialogue: 0,0:58:06.68,0:58:07.52,EN,,0,0,0,,That's all it says here.
Dialogue: 0,0:58:08.52,0:58:10.33,EN,,0,0,0,,How it says, it says discard that rule.
Dialogue: 0,0:58:11.10,0:58:15.05,EN,,0,0,0,,Otherwise, well, I'm going to get the skeleton of the first rule,
Dialogue: 0,0:58:15.34,0:58:17.40,EN,,0,0,0,,instantiate that relative to the dictionary,
Dialogue: 0,0:58:17.93,0:58:20.80,EN,,0,0,0,,and simplify the result, and that's the expression I want.
Dialogue: 0,0:58:24.20,0:58:25.96,EN,,0,0,0,,So although that was a complicated program,
Dialogue: 0,0:58:26.25,0:58:28.72,EN,,0,0,0,,every complicated program is made out of a lot of simple pieces.
Dialogue: 0,0:58:29.77,0:58:33.12,EN,,0,0,0,,Now, the pattern of recursions here is very complicated.
Dialogue: 0,0:58:34.78,0:58:36.52,EN,,0,0,0,,And one of the most important things is not to think about that.
Dialogue: 0,0:58:38.67,0:58:41.80,EN,,0,0,0,,If you try to think about the actual pattern by which this does something,
Dialogue: 0,0:58:42.06,0:58:42.97,EN,,0,0,0,,you're going to get very confused.
Dialogue: 0,0:58:45.31,0:58:45.71,EN,,0,0,0,,I would.
Dialogue: 0,0:58:47.04,0:58:50.17,EN,,0,0,0,,This is not a matter. you can do this with practice.
Dialogue: 0,0:58:51.52,0:58:52.46,EN,,0,0,0,,These patterns are hard.
Dialogue: 0,0:58:54.17,0:58:55.42,EN,,0,0,0,,But you don't have to think about it.
Dialogue: 0,0:58:55.83,0:58:59.72,EN,,0,0,0,,The key to this-- it's very good programming and very good design--
Dialogue: 0,0:58:59.74,0:59:00.97,EN,,0,0,0,,is to know what not to think about.
Dialogue: 0,0:59:03.05,0:59:06.06,EN,,0,0,0,,The fact is, going back to this slide,
Dialogue: 0,0:59:06.92,0:59:08.01,EN,,0,0,0,,I don't have to think about it
Dialogue: 0,0:59:08.54,0:59:13.83,EN,,0,0,0,,because I have specifications in my mind for what simplify x does.
Dialogue: 0,0:59:14.00,0:59:15.24,EN,,0,0,0,,I don't have to know how it does it.
Dialogue: 0,0:59:17.08,0:59:21.24,EN,,0,0,0,,And it may, in fact, call scan somehow through try rules, which it does.
Dialogue: 0,0:59:22.24,0:59:24.09,EN,,0,0,0,,And somehow, I've got another recursion going on here.
Dialogue: 0,0:59:24.33,0:59:25.69,EN,,0,0,0,,But since I know that simplify exp
Dialogue: 0,0:59:26.84,0:59:30.40,EN,,0,0,0,,is assumed by wishful thinking to produce the simplified result,
Dialogue: 0,0:59:31.61,0:59:32.99,EN,,0,0,0,,then I don't have to think about it anymore.
Dialogue: 0,0:59:33.43,0:59:34.83,EN,,0,0,0,,I've used it.
Dialogue: 0,0:59:35.07,0:59:36.43,EN,,0,0,0,,I've used it in a reasonable way.
Dialogue: 0,0:59:36.43,0:59:37.45,EN,,0,0,0,,I will get a reasonable answer.
Dialogue: 0,0:59:39.95,0:59:42.57,EN,,0,0,0,,And you have to learn how to program that way-- with abandon.
Dialogue: 0,0:59:47.56,0:59:49.05,EN,,0,0,0,,Well, there's very little left of this thing.
Dialogue: 0,0:59:50.40,0:59:54.46,EN,,0,0,0,,All there is left is a few details associated with what a dictionary is.
Dialogue: 0,0:59:55.08,0:59:58.32,EN,,0,0,0,,And those of you who've been itching to know what a dictionary is,
Dialogue: 0,0:59:58.70,1:00:01.82,EN,,0,0,0,,well, I will flip it up and not tell you anything about it.
Dialogue: 0,1:00:04.14,1:00:05.20,EN,,0,0,0,,Dictionaries are easy.
Dialogue: 0,1:00:06.01,1:00:09.84,EN,,0,0,0,,It's represented in terms of something else called an A list,
Dialogue: 0,1:00:10.65,1:00:16.04,EN,,0,0,0,,which is a particular pattern of usage for making tables in lists.
Dialogue: 0,1:00:16.50,1:00:20.17,EN,,0,0,0,,They're easy. They're made out of pairs, as was asked a bit ago.
Dialogue: 0,1:00:21.21,1:00:24.62,EN,,0,0,0,,And there are special procedures for dealing with such things called assq,
Dialogue: 0,1:00:24.94,1:00:26.36,EN,,0,0,0,,and you can find them in manuals.
Dialogue: 0,1:00:27.04,1:00:28.59,EN,,0,0,0,,I'm not terribly excited about it.
Dialogue: 0,1:00:28.83,1:00:31.21,EN,,0,0,0,,The only interesting thing here in extend dictionary
Dialogue: 0,1:00:31.48,1:00:36.94,EN,,0,0,0,,is I have to extend the dictionary with a pattern, a datum, and a dictionary.
Dialogue: 0,1:00:37.42,1:00:42.38,EN,,0,0,0,,I wish that, this pattern is, in fact, at this point a pattern variable.
Dialogue: 0,1:00:43.74,1:00:47.53,EN,,0,0,0,,And what do I want to do? I want to pull out the name of that pattern variable
Dialogue: 0,1:00:48.16,1:00:49.42,EN,,0,0,0,,the pattern variable name,
Dialogue: 0,1:00:50.44,1:00:53.71,EN,,0,0,0,,and I'm going to look up in the dictionary and see if it already has a value.
Dialogue: 0,1:00:53.79,1:00:56.41,EN,,0,0,0,,If not, I'm going to add a new one in.
Dialogue: 0,1:00:56.92,1:00:59.23,EN,,0,0,0,,If it does have one, if it has a value,
Dialogue: 0,1:00:59.60,1:01:03.18,EN,,0,0,0,,then it had better be equal to the one that was already stored away.
Dialogue: 0,1:01:03.88,1:01:06.54,EN,,0,0,0,,And if that's the case, the dictionary is what I expected it to be.
Dialogue: 0,1:01:06.89,1:01:09.15,EN,,0,0,0,,Otherwise, I fail.
Dialogue: 0,1:01:12.08,1:01:12.89,EN,,0,0,0,,So that's easy, too.
Dialogue: 0,1:01:13.66,1:01:16.68,EN,,0,0,0,,If you open up any program, you're going to find inside of it lots of little pieces,
Dialogue: 0,1:01:17.18,1:01:18.30,EN,,0,0,0,,all of which are easy.
Dialogue: 0,1:01:20.04,1:01:21.29,EN,,0,0,0,,So at this point, I suppose,
Dialogue: 0,1:01:21.60,1:01:25.68,EN,,0,0,0,,I've just told you some million-dollar valuable information.
Dialogue: 0,1:01:28.41,1:01:30.96,EN,,0,0,0,,And I suppose at this point we're pretty much done with this program.
Dialogue: 0,1:01:31.85,1:01:32.72,EN,,0,0,0,,I'd like to ask about questions.
Dialogue: 0,1:01:34.27,1:01:38.16,EN,,0,0,0,,AUDIENCE: Yes, can you give me the words that describe the specification for a simplified expression?
Dialogue: 0,1:01:38.72,1:01:39.02,EN,,0,0,0,,PROFESSOR: Sure.
Dialogue: 0,1:01:39.85,1:01:44.33,EN,,0,0,0,,A simplified expression takes an expression and produces a simplified expression.
Dialogue: 0,1:01:45.28,1:01:45.77,EN,,0,0,0,,That's it, OK?
Dialogue: 0,1:01:48.11,1:01:50.27,EN,,0,0,0,,How it does it is very easy.
Dialogue: 0,1:01:51.60,1:01:56.09,EN,,0,0,0,,In compound expressions, all the pieces are simplified, and then the rules are tried on the result.
Dialogue: 0,1:01:56.89,1:01:58.49,EN,,0,0,0,,And for simple expressions, you just try all the rules.
Dialogue: 0,1:01:59.52,1:02:02.11,EN,,0,0,0,,AUDIENCE: So an expression is simplified by virtue of the rules?
Dialogue: 0,1:02:02.76,1:02:03.58,EN,,0,0,0,,PROFESSOR: That's, of course, true.
Dialogue: 0,1:02:03.76,1:02:03.90,EN,,0,0,0,,AUDIENCE: Right.
Dialogue: 0,1:02:04.06,1:02:07.13,EN,,0,0,0,,PROFESSOR: And the way this works is that simplified expression, as you see here,
Dialogue: 0,1:02:08.35,1:02:11.64,EN,,0,0,0,,what it does is it breaks the expression down into the smallest pieces,
Dialogue: 0,1:02:12.60,1:02:17.29,EN,,0,0,0,,simplifies building up from the bottom using the rules to be the simplifier,
Dialogue: 0,1:02:18.30,1:02:22.48,EN,,0,0,0,,to do the manipulations, and constructs a new expression as the result.
Dialogue: 0,1:02:24.28,1:02:29.44,EN,,0,0,0,,Eventually, one of things you see is that the rules themselves, the try rules,
Dialogue: 0,1:02:29.70,1:02:35.50,EN,,0,0,0,,call a simplified expression on the results when it changes something, the results of a match.
Dialogue: 0,1:02:35.80,1:02:40.64,EN,,0,0,0,,I'm sorry, the results of instantiation of a skeleton for a rule that has matched.
Dialogue: 0,1:02:42.00,1:02:47.36,EN,,0,0,0,,So the spec of a simplified expression is that any expression you put into it comes out simplified according to those rules.
Dialogue: 0,1:02:49.84,1:02:50.76,EN,,0,0,0,,Thank you. Let's take a break.
